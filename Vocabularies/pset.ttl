@prefix dc:    <http://purl.org/dc/elements/1.1/> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sp:    <http://spinrdf.org/sp#> .
@prefix spl:   <http://spinrdf.org/spl#> .
@prefix schm:   <http://bimsparql.org/schema#> .
@prefix expr:    <https://w3id.org/express#> .
@prefix ifcowl:  <http://ifcowl.openbimstandards.org/IFC2X3_TC1#> .
@prefix list:    <https://w3id.org/list#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix owl:   <http://www.w3.org/2002/07/owl#> .
@prefix spin:  <http://spinrdf.org/spin#> .
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix pset:  <http://bimsparql.org/pset#> .
@prefix ifcdoc: <http://www.buildingsmart-tech.org/ifc/IFC4/final#> .

pset:inclination  a       ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Inclination of the element as derived from the placement of the element shape, by convention: Vertical = 0, horizontal = 90, if unit is grad). The calculation procedure will be specific for each type of element.  In cases of inconsistency between the geometric parameters and the azimuth property, provided in the attached property set, the geometric parameters take precedence."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositivePlaneAngleMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ElementShading ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Inclination" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_LampTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A lamp is a component within a light fixture that is designed to emit light. \\X\\0A\\X\\0AHistory: Name changed from Pset_LampEmitterTypeCommon in IFC 2x3."^^xsd:string ;
        pset:groups   pset:lampMaintenanceFactor , pset:colorAppearance , pset:spectrum , pset:lampCompensationType , pset:colorTemperature , pset:lampBallastType , pset:contributedLuminousFlux , pset:colorRenderingIndex , pset:lightEmitterNominalPower .

pset:netPositiveSuctionHead
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Minimum liquid pressure at the pump inlet to prevent cavitation."^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_PumpTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NetPositiveSuctionHead" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:isolatorStaticDeflection
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Static deflection of the vibration isolator."^^xsd:string ;
        rdfs:range        ifcowl:IfcLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_VibrationIsolatorTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsolatorStaticDeflection" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:signalTime1  a       ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Time factor used for exponential increase."^^xsd:string ;
        rdfs:range        ifcowl:IfcTimeMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ControllerTypeProportional ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SignalTime1" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:concealedCeiling
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication whether this space is declared to be a concealed ceiling (TRUE) or not (FALSE). A concealed ceiling is normally meant to be the space between a slab and a suspended ceiling."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ConcealedCeiling" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:highLimit  a         ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The high limit value for the analog input."^^xsd:string , "The high limit value for the analog output."^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AnalogOutput , pset:Pset_AnalogInput ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HighLimit" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:contractualType  a   ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "The contractual type of the work."^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProjectOrderMaintenanceWorkOrder , pset:Pset_ProjectOrderWorkOrder ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ContractualType" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:externalShadingCoefficient
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Radiation transmission coefficient of the outside shading device. It is a value without unit."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DoorWindowShadingType ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ExternalShadingCoefficient" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:applianceDiversity
        a                 rdf:Property , spin:MagicProperty , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Diversity of appliance load."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirSideSystemInformation , pset:Pset_ThermalLoadAggregate ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ApplianceDiversity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FurnitureTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Common properties for all types of furniture such as chair, desk, table, and file cabinet. HISTORY: First issued in IFC Release R1.5. Renamed from Pset_FurnitureCommon"^^xsd:string ;
        pset:groups   pset:mainColor , pset:nominalDepth , pset:nominalLength , pset:nominalHeight , pset:style , pset:description .

pset:Pset_ProductRequirements
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Categorization of the required properties of an entity that are used to determine what the level of the requirement is, to enable its performance/quality to be determined, assessed, or measured, and compared against the requirement, and then to analyze whether the entity is suitable for use within a given context.."^^xsd:string ;
        pset:groups   pset:groupName , pset:name , pset:demandValue , pset:gapValueWeighted , pset:category , pset:gapValue , pset:classification , pset:demandImportanceValue , pset:demandThresholdValue , pset:supplyEvaluationValue .

pset:Pset_BoilerTypeSteam
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Steam boiler type common attributes."^^xsd:string ;
        pset:groups   pset:maximumOutletPressure .

pset:inletConnectionSize
        a                 rdf:Property , spin:MagicProperty , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Size of the inlet connection."^^xsd:string , "Size of the inlet connection(s), where used, of the inlet connections.\\X\\0A\\X\\0ANote that all inlet connections are assumed to be the same size."^^xsd:string , "Size of the inlet connection to the hose reel."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_WasteTerminalTypeGreaseInterceptor , pset:Pset_WasteTerminalTypeWasteTrap , pset:Pset_WasteTerminalTypeGullySump , pset:Pset_WasteTerminalTypeGullyTrap , pset:Pset_WasteTerminalTypeFloorTrap , pset:Pset_FireSuppressionTerminalTypeHoseReel , pset:Pset_WasteTerminalTypePetrolInterceptor , pset:Pset_WasteTerminalTypeOilInterceptor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "InletConnectionSize" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:manufacturersSpecificInformation
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Manufacturer specific information."^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_LightFixtureTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ManufacturersSpecificInformation" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_UtilityConsumption
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Consumption of utility resources, typically applied to the IfcBuilding instance, used to identify how much was consumed on I.e., a monthly basis."^^xsd:string ;
        pset:groups   pset:steam , pset:fuel , pset:water , pset:electricity , pset:heat .

pset:Pset_ControllerTypeTwoPosition
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties for signal handling for an analog controller taking disparate valued multiple inputs and creating a single valued binary output."^^xsd:string ;
        pset:groups   pset:bandWidth , pset:controlType .

pset:lowestSeatingHeight
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The value of seating height of low level if the chair height is adjustable."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FurnitureTypeChair ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LowestSeatingHeight" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SpaceHeaterPHistoryCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Space heater performance history common attributes."^^xsd:string ;
        pset:groups   pset:airResistanceCurve , pset:exponent , pset:outputCapacityCurve , pset:uACurve , pset:surfaceTemperature , pset:heatOutputRate , pset:spaceAirTemperature , pset:auxiliaryEnergySourceConsumption , pset:spaceMeanRadiantTemperature , pset:fractionConvectiveHeatTransfer , pset:fractionRadiantHeatTransfer , pset:effectiveness .

pset:dIN135610ShapeParameter_b
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter b. Note: this parameter is also used for parameter b0 (shape codes C2 and C3)"^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsDIN135610Common ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "DIN135610ShapeParameter_b" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:walkingLineOffset
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Offset of the walking line from the inner side of the flight. \\X\\0ANote: the walking line may have a own shape representation (in case of inconsistencies, the value derived from the shape representation shall take precedence)."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_StairFlightCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "WalkingLineOffset" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ControllerTypeProportional
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties for signal handling for an proportional controller taking a single input and creating a single valued output"^^xsd:string ;
        pset:groups   pset:signalTime2 , pset:signalTime1 , pset:signalFactor2 , pset:signalFactor1 , pset:controlType .

pset:idealCapacity  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Compressor capacity under ideal conditions."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CompressorTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IdealCapacity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FlowMovingDeviceFanCentrifugal
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Centrifugal fan occurrence attributes attached to an instance of IfcFlowMovingDevice."^^xsd:string ;
        pset:groups   pset:arrangement , pset:directionOfRotation , pset:dischargePosition .

pset:temperatureRating
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Temperature rating."^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DamperTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "TemperatureRating" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:wireLoopBasePlateLength
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The length of the base plate."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryWireLoop ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "WireLoopBasePlateLength" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_AirTerminalBoxPHistory
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Air terminal box performance history attributes."^^xsd:string ;
        pset:groups   pset:airflowCurve , pset:sound , pset:atmosphericPressure , pset:damperPosition .

pset:functionRequirement
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "General description of the functional requirement for the space (in addition to the space name)"^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceProgramCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FunctionRequirement" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:yDirectionTieHoopCount
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The number of bars with Y direction tie hoop bars."^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarPitchOfColumn ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "YDirectionTieHoopCount" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:signalFactor1  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Factor (Kp)"^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ControllerTypeProportional ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SignalFactor1" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:conditionCommencement
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Condition of property provided on commencement of the agreement e.g. cold shell, warm lit shell, broom clean, turn-key"^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_PropertyAgreement ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ConditionCommencement" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:dIN135610ShapeCode
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The bending type code for the specific bending shape as defined in the DIN 1356 Teil 10 standard. Note: depending on the standardized shape different combinations of following parameters a...z are used."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsDIN135610Common ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "DIN135610ShapeCode" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:diameter  a          spin:MagicProperty , rdf:Property , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Diameter of the object. It is the diameter of the handrail of the railing.\\X\\0AThe size information is provided in addition to the shape representation and the geometric parameters used within. In cases of inconsistency between the geometric parameters and the size properties, provided in the attached property set, the geometric parameters take precedence.\\X\\0AHere the diameter of the hand or guardrail within the railing."^^xsd:string , "Actual diameter of a fin for circular fins only."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TubeBundleTypeFinned , pset:Pset_RailingCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Diameter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:layerName  a         ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Identifier of the layer name within the sending application."^^xsd:string ;
        rdfs:range        ifcowl:IfcIdentifier ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_Draughting ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LayerName" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalSupplyWaterTemperatureCooling
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal supply water temperature (refers to nominal cooling capacity)"^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CooledBeamTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalSupplyWaterTemperatureCooling" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hasThermalInsulation
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "If TRUE, the air terminal has thermal insulation."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirTerminalTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasThermalInsulation" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hasCoating  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "TRUE if the fin has a coating, FALSE if it does not."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TubeBundleTypeFinned ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasCoating" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ValveTypePressureReducing
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Valve that reduces the pressure of a fluid immediately downstream of its position in a pipeline to a preselected value or by a predetermined ratio.\\X\\0ANote that a pressure reducing valve is constrained to have a 2 port  pattern."^^xsd:string ;
        pset:groups   pset:downstreamPressure , pset:upstreamPressure .

pset:hasNonSkidSurface
        a                 rdf:Property , spin:MagicProperty , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Indication whether the surface finish is designed to prevent slippery (TRUE) or not (FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_StairCommon , pset:Pset_RampCommon , pset:Pset_CoveringFlooring ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasNonSkidSurface" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ThermalLoadDesignCriteria
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Building thermal load design data that are used for calculating thermal loads in a space or building. HISTORY: New property set in IFC Release 1.0 (Pset_LoadDesignCriteria); renamed Pset_ThermalLoadDesignCriteria in IFC2x2."^^xsd:string ;
        pset:groups   pset:lightingPercentLoadToReturnAir , pset:lightingLoadIntensity , pset:appliancePercentLoadToRadiant , pset:receptacleLoadIntensity , pset:outsideAirPerPerson , pset:occupancyDiversity .

pset:leakageCurve  a      rdf:Property , ifcdoc:P_TABLEVALUE , ifcdoc:P_SINGLEVALUE , spin:MagicProperty ;
        rdfs:comment      "Leakage versus pressure drop; Leakage = f (pressure)."^^xsd:string , "Leakage per unit length curve versus working pressure. If a scalar is expressed then it represents LeakageClass which is flowrate per unit area at a specified pressure rating (e.g., ASHRAE Fundamentals 2001 34.16.)."^^xsd:string , "Leakage per unit length curve versus working pressure."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumetricFlowRateMeasure , <http://www.buildingsmart-tech.org/ifcOWL/IFC2X3_TC1#$> ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DuctSegmentPHistory , pset:Pset_DamperTypeCommon , pset:Pset_PipeSegmentPHistory ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LeakageCurve" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:surfaceSpreadOfFlame
        a                 spin:MagicProperty , rdf:Property , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Surface spread of flame characteristics."^^xsd:string , "Indication on how the flames spread around the surface,\\X\\0AIt is given according to the national building code that governs the fire behaviour for materials."^^xsd:string , "Indication on how the flames spread around the surface, It is given according to the national building code that governs the fire behaviour for materials."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CurtainWallCommon , pset:Pset_WallCommon , pset:Pset_CoveringCommon , pset:Pset_FireRatingProperties , pset:Pset_SlabCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SurfaceSpreadOfFlame" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:maximumApparentPower
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Maximum apparent power/capacity in VA (volt ampere)."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TransformerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MaximumApparentPower" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_TankTypePressureVessel
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Common attributes of a pressure vessel."^^xsd:string ;
        pset:groups   pset:reliefValveSetting , pset:pressureRegulatorSetting , pset:chargePressure .

pset:accuracyOfTemperatureSensor
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The accuracy of the sensor"^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SensorTypeTemperatureSensor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AccuracyOfTemperatureSensor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:glassThickness2  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Thickness of the second (intermediate or outer) glass layer."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DoorWindowGlazingType ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "GlassThickness2" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:bECShapeParameter_i
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter i."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBECCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BECShapeParameter_i" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:flowClass  a         ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Alphanumeric indication of the flow class of a hydrant (may be used in connection with or instead of the FlowRate property)"^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FireSuppressionTerminalTypeFireHydrant ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FlowClass" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:invertLevel  a       rdf:Property , spin:MagicProperty , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "The lowest point of the outfall"^^xsd:string , "Level of the lowest part of the cross section. (BS6100 250 8001)"^^xsd:string , "The lowest point in the cross section of the sump."^^xsd:string ;
        rdfs:range        ifcowl:IfcLengthMeasure , ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DistributionChamberElementTypeInspectionChamber , pset:Pset_DistributionChamberElementTypeTrench , pset:Pset_DrainageOutfall , pset:Pset_DistributionChamberElementTypeSump , pset:Pset_DistributionChamberElementTypeManhole ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "InvertLevel" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:flammableStorage
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication whether the space is intended to serve as a storage of flammable material (which is regarded as such by the presiding building code. (TRUE) indicates yes, (FALSE) otherwise."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceFireSafetyRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FlammableStorage" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalAirFlowRate
        a                 spin:MagicProperty , ifcdoc:P_SINGLEVALUE , rdf:Property ;
        rdfs:comment      "Nominal airflow rate."^^xsd:string , "Nominal rate of air flow into which water vapor is added."^^xsd:string , "Nominal air flow rate."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumetricFlowRateMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DamperTypeCommon , pset:Pset_AirTerminalBoxTypeCommon , pset:Pset_HumidifierTypeCommon , pset:Pset_FanTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalAirFlowRate" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_PipeSegmentTypeGutter
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Gutter segment type common attributes."^^xsd:string ;
        pset:groups   pset:flowRating , pset:slope .

pset:Pset_CoolingTowerPHistory
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Cooling tower performance history attributes."^^xsd:string ;
        pset:groups   pset:performance , pset:uACurve , pset:sumpHeaterPower , pset:heatTransferCoefficient , pset:capacity .

pset:slotWidth  a         ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Slot width."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirTerminalTypeSlot ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SlotWidth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:unitWeight  a        ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "Weight per unit length."^^xsd:string ;
        rdfs:range        ifcowl:IfcMassPerLengthMeasure , ifcowl:IfcMassMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_PipeSegmentTypeCommon , pset:Pset_DuctSegmentTypeCommon , pset:Pset_PipeFittingTypeCommon , pset:Pset_DuctFittingTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "UnitWeight" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:numberOfPoles  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The number of logical connections that can be made on an electrical device."^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ElectricalDeviceCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NumberOfPoles" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:spaceTemperatureSummerMin
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Minimal temperature of the space or zone for the hot (summer) period, that is required from user/designer view point."^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SpaceTemperatureSummerMin" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hasLock  a           ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication of whether a switching device has a key operated lock (=TRUE) or not (= FALSE)"^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SwitchingDeviceTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasLock" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:chargePressure  a    spin:MagicProperty , rdf:Property , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Nominal or design operating pressure of the tank."^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TankTypePressureVessel , pset:Pset_TankTypeExpansion ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ChargePressure" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:productionYear  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The year of production of the manufactured item."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ManufacturerTypeInformation ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ProductionYear" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:fireSensorSetPoint
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The temperature value to be sensed to indicate the presence of fire."^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SensorTypeFireSensor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FireSensorSetPoint" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FlowTerminalAirTerminal
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Air terminal occurrence attributes attached to an instance of IfcFlowTerminal."^^xsd:string ;
        pset:groups   pset:location , pset:airflowType .

pset:Pset_OutletTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Common properties for different outlet types."^^xsd:string ;
        pset:groups   pset:isPluggableOutlet .

pset:longInsideCenterTopBarPitch
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The pitch length of the long inside center top bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarPitchOfSlab ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LongInsideCenterTopBarPitch" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SensorTypeSoundSensor
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A device that senses or detects sound."^^xsd:string ;
        pset:groups   pset:timeConstant , pset:soundSensorAccuracy , pset:soundSensorRange , pset:soundSensorSetPoint .

pset:cisternColor  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Color of the object"^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SanitaryTerminalTypeCistern ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CisternColor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:lightEmitterNominalPower
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Light emitter nominal power."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_LampTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LightEmitterNominalPower" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_TankTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Common attributes of a tank type."^^xsd:string ;
        pset:groups   pset:nominalCapacity , pset:nominalLengthOrDiameter , pset:nominalDepth , pset:operatingWeight , pset:accessType , pset:type , pset:materialThickness , pset:effectiveCapacity , pset:nominalWidthOrDiameter , pset:material .

pset:Pset_DiscreteAccessoryEdgeFixingPlate
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties specific to edge fixing plates."^^xsd:string ;
        pset:groups   pset:edgeFixingPlateFlangeWidthInPlaneX , pset:edgeFixingPlateFlangeWidthInPlaneZ , pset:edgeFixingPlateThickness , pset:edgeFixingPlateLength .

pset:outsideAirPerPerson
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Design quantity of outside air to be provided per person in the space."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumetricFlowRateMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ThermalLoadDesignCriteria ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "OutsideAirPerPerson" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:localContext  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Local context information for the take-off quantity, if multiple information items are passed, then the property shall be indexed, e.g. LocalContext1, LocalContext2, \\X2\\2026\\X0\\"^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_QuantityTakeOff ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LocalContext" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalHeight  a     ifcdoc:P_LISTVALUE , ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "The nominal height of the duct fitting. Refer to NominalDiameterOrWidth for comments about interpretation of multiple items in the list."^^xsd:string , "The nominal height of the system furniture elements of this type. The size information is provided in addition to the shape representation and the geometric parameters used within. In cases of inconsistency between the geometric parameters and the size properties, provided in the attached property set, the geometric parameters take precedence."^^xsd:string , "The nominal height of the furniture of this type. The size information is provided in addition to the shape representation and the geometric parameters used within. In cases of inconsistency between the geometric parameters and the size properties, provided in the attached property set, the geometric parameters take precedence."^^xsd:string , "The nominal height of a cable, busbar or tube or, in the case of a circular cross section, the height is not asserted. Note that this value may be used for larger sized cables whose dimensions are explicitly given."^^xsd:string , "The nominal height of the segment"^^xsd:string , "The nominal height of the duct segment. Refer to NominalDiameterOrWidth for comments about interpretation of multiple items in the list."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CableSegmentTypeCableSegment , pset:Pset_CableCarrierSegmentTypeCableTrunkingSegment , pset:Pset_CableCarrierSegmentTypeCableTraySegment , pset:Pset_DuctSegmentTypeCommon , pset:Pset_CableCarrierSegmentTypeConduitSegment , pset:Pset_DuctFittingTypeCommon , pset:Pset_SystemFurnitureElementTypeCommon , pset:Pset_FurnitureTypeCommon , pset:Pset_CableCarrierSegmentTypeCableLadderSegment ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalHeight" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:drainConnectionSize
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Size of the drain connection inlet to the waste disposal unit."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_WasteTerminalTypeWasteDisposalUnit ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "DrainConnectionSize" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:style  a             ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Description of the furniture style"^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FurnitureTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Style" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_PumpPHistory
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Pump performance history attributes."^^xsd:string ;
        pset:groups   pset:power , pset:flowrate , pset:rotationSpeed , pset:pressureRise , pset:overallEfficiency , pset:mechanicalEfficiency .

pset:Pset_ValveTypeAirRelease
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Valve used to release air from a pipe or fitting. \\X\\0ANote that an air release valve is constrained to have a single port pattern"^^xsd:string ;
        pset:groups   pset:isAutomatic .

pset:fireResistanceRating
        a                 rdf:Property , spin:MagicProperty , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Fire rating identifying the entitys fire resistive value (e.g., 1-hour, 2-hour, etc.) so that its resistance to fire can be compared to that of the surrounding structure."^^xsd:string , "Measure of the fire resistance rating in hours (e.g., 1.5 hours, 2 hours, etc.)."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FireRatingProperties , pset:Pset_DamperTypeFireDamper ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FireResistanceRating" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SpaceHeaterTypeHydronic
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Hydronic space heater type common attributes.\\X\\0AWaterProperties attribute deleted in IFC2x2 Pset Addendum: Use IfcWaterProperties instead."^^xsd:string ;
        pset:groups   pset:waterContent , pset:tubingLength .

pset:occupancyNumber  a   spin:MagicProperty , rdf:Property , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Maximum number of occupants for the designed usage of the space."^^xsd:string , "Number of people required for the activity assigned to this space."^^xsd:string ;
        rdfs:range        ifcowl:IfcCountMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceProgramCommon , pset:Pset_SpaceOccupancyRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "OccupancyNumber" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:iSOCD3766ShapeParameter_b
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter b."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsISOCD3766Common ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ISOCD3766ShapeParameter_b" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DiscreteAccessoryLadderTrussConnector
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Shape properties specific to connecting accessories in truss form with straight cross-bars in ladder shape."^^xsd:string ;
        pset:groups   pset:ladderTrussCrossBarDiameter , pset:ladderTrussSecondaryBarDiameter , pset:ladderTrussBaseBarDiameter , pset:ladderTrussCrossBarSpacing , pset:ladderTrussLength , pset:ladderTrussHeight .

pset:spaceTemperatureWinterMax
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Maximal temperature of the space or zone for the cold (winter) period, that is required from user/designer view point."^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SpaceTemperatureWinterMax" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hoseLength  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Notional length of the hose fitted to the hose reel when fully extended."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FireSuppressionTerminalTypeHoseReel ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HoseLength" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:downstreamPressure
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The operating pressure of the fluid downstream of the pressure reducing valve"^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ValveTypePressureReducing ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "DownstreamPressure" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:spaceHumiditySummer
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Humidity of the space or zone for the hot (summer) period, that is required from user/designer view point."^^xsd:string ;
        rdfs:range        ifcowl:IfcRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SpaceHumiditySummer" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_BoilerTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Boiler type common attributes.\\X\\0ASoundLevel attribute deleted in IFC2x2 Pset Addendum: Use IfcSoundProperties instead. PrimaryEnergySource and AuxiliaryEnergySource attributes deleted in IFC2x2 Pset Addendum: Use IfcEnergyProperties, IfcFuelProperties, etc. instead."^^xsd:string ;
        pset:groups   pset:waterStorageCapacity , pset:pressureRating , pset:nominalPartLoadRatio , pset:material , pset:outletTemperatureRange , pset:partialLoadEfficiencyCurves , pset:isWaterStorageHeater , pset:nominalEfficiency , pset:weight , pset:heatTransferSurfaceArea , pset:waterInletTemperatureRange , pset:operatingMode , pset:heatOutput , pset:nominalEnergyConsumption .

pset:parkingUnits  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indicates the number of transporation units of the type specified by the property ParkingUse that may be accommodated within the space. Generally, this value should default to 1 unit. However, where the parking space is for motorcycles or bicycles, provision may be made for more than one unit in the space."^^xsd:string ;
        rdfs:range        ifcowl:IfcCountMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceParking ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ParkingUnits" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SanitaryTerminalTypeSink
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Waste water appliance for receiving, retaining or disposing of domestic, culinary, laboratory or industrial process liquids."^^xsd:string ;
        pset:groups   pset:nominalLength , pset:nominalWidth , pset:drainSize , pset:sinkType , pset:color , pset:material , pset:nominalDepth , pset:sinkMounting .

pset:Pset_DistributionFlowElementCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Common properties of all occurrences of IfcDistributionFlowElement and their subtypes."^^xsd:string ;
        pset:groups   pset:reference .

pset:Pset_CooledBeamTypeActive
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Active (ventilated) cooled beam common attributes."^^xsd:string ;
        pset:groups   pset:connectionSize , pset:supplyAirConnectionType , pset:airflowRateRange , pset:airFlowConfiguration .

pset:diagonalTrussBaseBarDiameter
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The nominal diameter of the base bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryDiagonalTrussConnector ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "DiagonalTrussBaseBarDiameter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:controlType  a       rdf:Property , ifcdoc:P_ENUMERATEDVALUE , spin:MagicProperty , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "The type of control used to operate the damper (e.g., Open/Closed Indicator, Resetable Temperature Sensor, Temperature Override, etc.)"^^xsd:string , "The type of signal modification effected"^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DamperTypeFireSmokeDamper , pset:Pset_ControllerTypeTwoPosition , pset:Pset_ControllerTypeCommon , pset:Pset_ControllerTypeProportional , pset:Pset_DamperTypeSmokeDamper ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ControlType" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:shortInsideCenterTopBarPitch
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The pitch length of the short inside center top bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarPitchOfSlab ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ShortInsideCenterTopBarPitch" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_CoveringCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all occurrences of IfcCovering."^^xsd:string ;
        pset:groups   pset:surfaceSpreadOfFlame , pset:finish , pset:combustible , pset:reference , pset:acousticRating , pset:material , pset:flammabilityRating , pset:totalThickness , pset:fragilityRating , pset:fireRating .

pset:waterContent  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Weight of water content within the heater."^^xsd:string ;
        rdfs:range        ifcowl:IfcMassMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceHeaterTypeHydronic ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "WaterContent" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:occupancyDiversity
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Diversity factor that may be applied to the number of people in the space."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ThermalLoadDesignCriteria ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "OccupancyDiversity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:buildingHeightLimit
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Calculated maximum height of buildings on this site - according to local building codes."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SiteCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BuildingHeightLimit" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:coilLength  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Length of coil"^^xsd:string ;
        rdfs:range        ifcowl:IfcLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CooledBeamTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CoilLength" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalHeatTransferCoefficient
        a                 rdf:Property , spin:MagicProperty , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Nominal overall heat transfer coefficient associated with nominal heat transfer area."^^xsd:string ;
        rdfs:range        ifcowl:IfcThermalTransmittanceMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_EvaporatorTypeCommon , pset:Pset_CondenserTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalHeatTransferCoefficient" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SwitchingDeviceTypeToggleSwitch
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A toggle switch is a switch that enables or isolates electrical power through a two position on/off action.."^^xsd:string ;
        pset:groups   pset:legend , pset:isIlluminated , pset:switchActivation , pset:switchUsage , pset:toggleSwitchType .

pset:Pset_BinaryOutput
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Defines the characteristics of a binary output."^^xsd:string ;
        pset:groups   pset:ackedTransitions , pset:eventEnable , pset:alarmValue , pset:activeText , pset:inactiveText , pset:polarity .

pset:Pset_WasteTerminalTypeGullyTrap
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Pipe fitting or assembly of fittings to receive surface water or waste water, fitted with a grating or sealed cover and discharging through a trap (BS6100 330 3504 modified)"^^xsd:string ;
        pset:groups   pset:nominalBodyWidth , pset:outletConnectionSize , pset:hasStrainer , pset:bodyMaterial , pset:nominalBodyLength , pset:nominalBodyDepth , pset:coverLength , pset:trapType , pset:coverWidth , pset:backInletPatternType , pset:inletConnectionSize , pset:gullyType , pset:coverMaterial .

pset:Pset_DistributionChamberElementTypeFormedDuct
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from BS6100 100 3410: Space formed in the ground for the passage of pipes, cables, ducts."^^xsd:string ;
        pset:groups   pset:accessCoverMaterial , pset:baseMaterial , pset:baseThickness , pset:clearDepth , pset:accessCoverLoadRating , pset:fillMaterial , pset:wallThickness , pset:wallMaterial , pset:clearWidth .

pset:fFETypeRequirement
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "General description of the Furniture, Fixtures and Equipment requirement for this space."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceProgramCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FFETypeRequirement" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:marketSubCategory
        a                 ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "Subset of category of use e.g. multi-family, 2 bedroom, low rise"^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BuildingUseAdjacent , pset:Pset_BuildingUse ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MarketSubCategory" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:gapValueWeighted
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Difference determined between the topic demand value and the topic supply evaluation value, weighted for topic demand importance value."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProductRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "GapValueWeighted" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:coolingRelativeHumidity
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Inside relative humidity for cooling design."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalDesign ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CoolingRelativeHumidity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:coverLength  a       rdf:Property , spin:MagicProperty , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "The length measured along the x-axis in the local coordinate system or the radius (in the case of a circular shape in plan) of the cover of the drain."^^xsd:string , "The length measured along the x-axis in the local coordinate system or the radius (in the case of a circular shape in plan) of the cover of the oil interceptor."^^xsd:string , "The length measured along the x-axis in the local coordinate system or the radius (in the case of a circular shape in plan) of the cover of the trap."^^xsd:string , "The length measured along the x-axis in the local coordinate system or the radius (in the case of a circular shape in plan) of the cover of the gully trap."^^xsd:string , "The length measured along the x-axis in the local coordinate system or the radius (in the case of a circular shape in plan) of the cover of the grease interceptor."^^xsd:string , "The length measured along the x-axis in the local coordinate system or the radius (in the case of a circular shape in plan) of the cover of the waste."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_WasteTerminalTypePetrolInterceptor , pset:Pset_WasteTerminalTypeFloorTrap , pset:Pset_WasteTerminalTypeGullyTrap , pset:Pset_WasteTerminalTypeFloorWaste , pset:Pset_WasteTerminalTypeGullySump , pset:Pset_WasteTerminalTypeOilInterceptor , pset:Pset_WasteTerminalTypeRoofDrain , pset:Pset_WasteTerminalTypeGreaseInterceptor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CoverLength" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ReinforcementBarPitchOfColumn
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: The pitch length information of reinforcement  bar with the column. The X and Y direction are based on the local coordinate system of building storey. The X and Y direction of the reinforcement bar are parallel to the X and Y axis of the IfcBuildingStoreys local coordinate system, respectively."^^xsd:string ;
        pset:groups   pset:hoopBarPitch , pset:xDirectionTieHoopCount , pset:xDirectionTieHoopBarPitch , pset:yDirectionTieHoopBarPitch , pset:reference , pset:reinforcementBarType , pset:yDirectionTieHoopCount , pset:description .

pset:colorAppearance  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "In both the DIN and CIE standards, artificial light sources are classified in terms of their color appearance. To the human eye they all appear to be white; the difference can only be detected by direct comparison. Visual performance is not directly affected by differences in color appearance."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_LampTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ColorAppearance" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SanitaryTerminalTypeUrinal
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Soil appliance that receives urine and directs it to a waste outlet (BS6100)"^^xsd:string ;
        pset:groups   pset:nominalDepth , pset:nominalWidth , pset:nominalLength , pset:spilloverLevel , pset:urinalColor , pset:urinalMaterial , pset:urinalType .

pset:longOutsideTopBarPitch
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The pitch length of the long outside top bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarPitchOfSlab ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LongOutsideTopBarPitch" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:sheathColor  a       ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Colour code on cable, conductor."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CableSegmentTypeCableSegment , pset:Pset_CableSegmentTypeConductorSegment ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SheathColor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DamperTypeControlDamper
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Control damper type attributes.\\X\\0APset renamed from Pset_DamperTypeControl to Pset_DamperTypeControlDamper in IFC2x2 Pset Addendum."^^xsd:string ;
        pset:groups   pset:controlDamperOperation , pset:torqueRange .

pset:ambientDesignDryBulbTemperature
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Ambient design dry bulb temperature used for selecting the cooling tower."^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CoolingTowerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AmbientDesignDryBulbTemperature" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:anchorBoltDiameter
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The nominal diameter of the anchor bolt bar(s)."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryAnchorBolt ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AnchorBoltDiameter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:signalTime2  a       ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Time factor used for exponential decrease."^^xsd:string ;
        rdfs:range        ifcowl:IfcTimeMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ControllerTypeProportional ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SignalTime2" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_WasteTerminalTypeWasteDisposalUnit
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Electrically operated device that reduces kitchen or other waste into fragments small enough to be flushed into a drainage system."^^xsd:string ;
        pset:groups   pset:nominalDepth , pset:outletConnectionSize , pset:drainConnectionSize .

pset:shortInsideCenterLowerBarPitch
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The pitch length of the short inside center lower bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarPitchOfSlab ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ShortInsideCenterLowerBarPitch" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_AirTerminalTypeSlot
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Slot air terminal type attributes."^^xsd:string ;
        pset:groups   pset:numberOfSlots , pset:slotLength , pset:slotWidth .

pset:isAutomatic  a       ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication of whether the valve is automatically operated (TRUE) or manually operated (FALSE)"^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ValveTypeAirRelease ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsAutomatic" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:chamberLengthOrRadius
        a                 spin:MagicProperty , ifcdoc:P_SINGLEVALUE , rdf:Property ;
        rdfs:comment      "Length or, in the event of the shape being circular in plan, the radius of the chamber."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DistributionChamberElementTypeInspectionChamber , pset:Pset_DistributionChamberElementTypeValveChamber , pset:Pset_DistributionChamberElementTypeMeterChamber ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ChamberLengthOrRadius" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:selfClosing  a       ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication whether this object is designed to close automatically after use (TRUE) or not (FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DoorCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SelfClosing" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:buildingPermitId
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The building permit identifier for the written authorization required by building authorities before construction on a specific project can begin."^^xsd:string ;
        rdfs:range        ifcowl:IfcIdentifier ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProjectCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BuildingPermitId" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:serialNumber  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The serial number assigned to an occurrence of a product"^^xsd:string ;
        rdfs:range        ifcowl:IfcIdentifier ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ManufacturerOccurrence ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SerialNumber" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:height  a            ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "Height of the vibration isolator before tha application of load."^^xsd:string , "Length of the fin as measured perpendicular to the direction of airflow."^^xsd:string , "Height of the object. It is the upper hight of the railing above the floor or stair.\\X\\0AThe size information is provided in addition to the shape representation and the geometric parameters used within. In cases of inconsistency between the geometric parameters and the size properties, provided in the attached property set, the geometric parameters take precedence."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_RailingCommon , pset:Pset_VibrationIsolatorTypeCommon , pset:Pset_TubeBundleTypeFinned ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Height" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:cornerFixingPlateFlangeWidthInPlaneZ
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The flange width of the L-shaped corner plate in plane Z."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryCornerFixingPlate ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CornerFixingPlateFlangeWidthInPlaneZ" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:dualDeck  a          ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Does the AirHandler have a dual deck? TRUE = Yes, FALSE = No."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_UnitaryEquipmentTypeAirHandler ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "DualDeck" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:dIN135610ShapeParameter_c
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter c."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsDIN135610Common ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "DIN135610ShapeParameter_c" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_CoveringCeiling
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all occurrences of IfcCovering with the PredefinedType set to CEILING."^^xsd:string ;
        pset:groups   pset:tileWidth , pset:tileLength , pset:permeability , pset:fragilityRating .

pset:isHighPressure  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication of whether the flushing valve is suitable for use on a high pressure water main (set TRUE) or not (set FALSE)"^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ValveTypeFlushing ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsHighPressure" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SensorTypeLightSensor
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A device that senses or detects light."^^xsd:string ;
        pset:groups   pset:timeConstant , pset:lightSensorAccuracy , pset:lightSensorRange , pset:lightSensorSetPoint .

pset:airDiffusionPerformanceIndex
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The Air Diffusion Performance Index (ADPI) is used for cooling mode conditions. If several measurements of air velocity and air temperature are made throughout the occupied zone of a space, the ADPI is the percentage of locations where measurements were taken that meet the specifications for effective draft temperature and air velocity."^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirTerminalTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AirDiffusionPerformanceIndex" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_WindowCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all occurrences of Window."^^xsd:string ;
        pset:groups   pset:glazingAreaFraction , pset:isExternal , pset:securityRating , pset:thermalTransmittance , pset:reference , pset:smokeStop , pset:infiltration , pset:fireRating , pset:acousticRating .

pset:Pset_EvaporatorTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Evaporator type common attributes."^^xsd:string ;
        pset:groups   pset:refrigerantType , pset:evaporatorMediumType , pset:internalRefrigerantVolume , pset:evaporatorCoolant , pset:refrigerantClass , pset:internalSurfaceArea , pset:nominalHeatTransferCoefficient , pset:internalWaterVolume , pset:externalSurfaceArea , pset:nominalHeatTransferArea .

pset:fixingSocketHeight
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The overall height of the fixing socket."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryFixingSocket ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FixingSocketHeight" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:ancillaryFireUse
        a                 rdf:Property , spin:MagicProperty , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Ancillary fire use for the building which is assigned from the fire use classification table as given by the relevant national building code."^^xsd:string , "Ancillary fire use for the space which is assigned from the fire use classification table as given by the relevant national building code."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BuildingCommon , pset:Pset_SpaceFireSafetyRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AncillaryFireUse" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:occupancyNumberPeak
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Maximal number of people required for the activity assigned to this space in peak time."^^xsd:string ;
        rdfs:range        ifcowl:IfcCountMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceOccupancyRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "OccupancyNumberPeak" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:numberOfSources  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Number of sources"^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_LightFixtureTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NumberOfSources" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:vacancyRateInCategoryNow
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Percentage of vacancy found in the particular category currently"^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BuildingUse ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "VacancyRateInCategoryNow" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:subType  a           rdf:Property , ifcdoc:P_SINGLEVALUE , spin:MagicProperty ;
        rdfs:comment      "Subtype of the pipe fitting..The following suggested items should be utilized whenever possible for consistency across applications:\\X\\0ABEND_15DEGREE: Changes the direction of flow through 15 degrees. \\X\\0ABEND_22_5DEGREE: Changes the direction of flow through 22.5 degrees. \\X\\0ABEND_25DEGREE: Changes the direction of flow through 25 degrees. \\X\\0ABEND_30DEGREE: Changes the direction of flow through 30 degrees. \\X\\0ABEND_45DEGREE: Changes the direction of flow through 45 degrees. \\X\\0ABEND_67DEGREE: Changes the direction of flow through 67 degrees. \\X\\0ABEND_76DEGREE: Changes the direction of flow through 76 degrees. \\X\\0ABEND_87_5DEGREE: Changes the direction of flow through 87.5 degrees. \\X\\0ABEND_90DEGREE: Changes the direction of flow through 90 degrees. \\X\\0ABEND_135DEGREE: Changes the direction of flow through 135 degrees. \\X\\0ABEND_180DEGREE: Changes the direction of flow through 180 degrees. \\X\\0AJUNCTION_CROSS_SQUARE: Branch fitting with two opposing branches that are swept in the direction of the main flow. \\X\\0AJUNCTION_CROSS_SWEEP: Branch fitting with two swept opposing branches at right angles to the main flow. \\X\\0AJUNCTION_TEE_SQUARE: Branch fitting in which the branch is at an angle of 90 degrees to the main pipe. \\X\\0AJUNCTION_TEE_SWEEP: Branch fitting in which the branch is curved through 90 degrees to join a main pipe tangentially. \\X\\0AJUNCTION_TEE_TWINBEND: Symmetrical pipe fitting in which two short radius bends curve through 90 degree to form a single pipe. \\X\\0A+I1JUNCTION_TEE_TWINELBOW: Symmetrical pipe fitting in which two elbows curve through 90 degree to form a single pipe. \\X\\0AJUNCTION_TEE_Y: Branch fitting in the shape of a letter Y. \\X\\0AOBSTRUCTION_CAP: Device fixed onto the end of a pipe or pipe fitting to close it. \\X\\0AOBSTRUCTION_PLUG: Device fixed into the end of a pipe or pipe fitting to close it. \\X\\0AOTHER: Other fitting subtype.\\X\\0ANOTDEFINED: The fitting subtype is not defined."^^xsd:string , "Subtype of fitting (I.e., 5-gore, pleated, stamped, etc.)"^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel , ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_PipeFittingTypeCommon , pset:Pset_DuctFittingTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SubType" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_VibrationIsolatorTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Vibration isolator type common attributes."^^xsd:string ;
        pset:groups   pset:maximumSupportedWeight , pset:material , pset:height , pset:isolatorCompressibility , pset:isolatorStaticDeflection , pset:vibrationTransmissibility .

pset:Pset_ProtectiveDeviceTypeResidualCurrentSwitch
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A residual current switch opens, closes or isolates a circuit and has no short circuit or overload protection."^^xsd:string ;
        pset:groups   pset:sensitivity .

pset:signalFactor2  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Factor (Ki)"^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ControllerTypeProportional ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SignalFactor2" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:columnShoeBasePlateDepth
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The depth of the column shoe base plate."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryColumnShoe ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ColumnShoeBasePlateDepth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:numberOfPhases  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Number of phases within this circuit."^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ElectricalCircuit ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NumberOfPhases" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_MemberCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all occurrences of IfcMember."^^xsd:string ;
        pset:groups   pset:fireRating , pset:loadBearing , pset:isExternal , pset:slope , pset:span , pset:reference .

pset:hasSteps  a          ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indicates whether the chamber has steps (TRUE) or not (FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DistributionChamberElementTypeManhole ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasSteps" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalWidthOrDiameter
        a                 spin:MagicProperty , ifcdoc:P_SINGLEVALUE , rdf:Property ;
        rdfs:comment      "The nominal width or, in the case of a horizontal cylindrical tank, the nominal diameter of the tank.\\X\\0A\\X\\0ANote: Not required for a vertical cylindrical tank."^^xsd:string , "The nominal width of a cable, busbar or tube or, in the case of a circular cross section, the diameter. Note that this value may be used for larger sized cables whose dimensions are explicitly given."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TankTypeCommon , pset:Pset_CableSegmentTypeCableSegment ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalWidthOrDiameter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:baseThickness  a     rdf:Property , ifcdoc:P_SINGLEVALUE , spin:MagicProperty ;
        rdfs:comment      "The thickness of the chamber base construction\\X\\0ANOTE: It is assumed that chamber base will be constructed at a single thickness."^^xsd:string , "The thickness of the duct base construction\\X\\0ANOTE: It is assumed that duct base will be constructed at a single thickness."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DistributionChamberElementTypeInspectionChamber , pset:Pset_DistributionChamberElementTypeManhole , pset:Pset_DistributionChamberElementTypeMeterChamber , pset:Pset_DistributionChamberElementTypeValveChamber , pset:Pset_DistributionChamberElementTypeFormedDuct ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BaseThickness" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:isCombustible  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Combustibility (YES it is combustible or NO it is not combustible)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FireRatingProperties ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsCombustible" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:numberOfChairs  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Maximum number of chairs that can fit with the table for normal use."^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FurnitureTypeTable ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NumberOfChairs" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:numberOfRows  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Number of tube rows in the tube bundle assembly."^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TubeBundleTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NumberOfRows" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:subNatureOfRisk1
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "A first subsidiary value that might be assigned to designate a more specific type of risk.\\X\\0A\\X\\0ANOTE: Nature of risk may be identified in various ways depending upon the place where risk assessment takes place and according to local agreement. This property set allows for a generic nature of risk and up to two subsidiary natures. An example might be causing injury and damage"^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_Risk ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SubNatureOfRisk1" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_WasteTerminalTypeGullySump
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Pipe fitting or assembly of fittings to receive surface water or waste water, fitted with a grating or sealed cover."^^xsd:string ;
        pset:groups   pset:nominalSumpDepth , pset:outletConnectionSize , pset:coverLength , pset:backInletPatternType , pset:trapType , pset:nominalSumpLength , pset:gullyType , pset:coverWidth , pset:inletConnectionSize , pset:sumpMaterial , pset:coverMaterial , pset:nominalSumpWidth .

pset:shortOutsideLowerBarPitch
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The pitch length of the short outside lower bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarPitchOfSlab ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ShortOutsideLowerBarPitch" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:dischargeFlowRate
        a                 spin:MagicProperty , ifcdoc:P_SINGLEVALUE , rdf:Property ;
        rdfs:comment      "The volumetric rate of fluid discharge."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumetricFlowRateMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FireSuppressionTerminalTypeSprinkler , pset:Pset_FireSuppressionTerminalTypeFireHydrant ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "DischargeFlowRate" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:pressureSensorSetPoint
        a                 ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "The smoke concentration value to be sensed."^^xsd:string , "The pressure value to be sensed."^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure , ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SensorTypePressureSensor , pset:Pset_SensorTypeSmokeSensor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "PressureSensorSetPoint" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:skillLevel  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Skill level exhibited by the actor and which indicates an extent of their capability to perform actions on the artefacts upon which they can act."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ActorCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SkillLevel" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:glassThickness3  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Thickness of the third (outer) glass layer."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DoorWindowGlazingType ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "GlassThickness3" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SiteCommon  a  ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all occurrences of IfcSite. Please note that several site attributes are handled directly at the IfcSite instance, the site number (or short name) by IfcSite.Name, the site name (or long name) by IfcSite.LongName, and the description (or comments) by IfcSite.Description. The land title number is also given as an explicit attribute IfcSite.LandTitleNumber. Actual site quantities, like site perimeter, site area and site volume are provided by IfcElementQuantities, and site classification according to national building code by IfcClassificationReference. The global positioning of the site in terms of Northing and Easting and height above sea level datum is given by IfcSite.RefLongitude, IfcSite.RefLatitude, IfcSite.RefElevation and the postal address by IfcSite.SiteAddress."^^xsd:string ;
        pset:groups   pset:buildingHeightLimit , pset:totalArea , pset:buildableArea .

pset:isRigid  a           ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication of whether the conduit is rigid (= TRUE) or flexible (= FALSE)"^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CableCarrierSegmentTypeConduitSegment ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsRigid" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:bECShapeParameter_j
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter j."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBECCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BECShapeParameter_j" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:longOutsideLowerBarPitch
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The pitch length of the long outside lower bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarPitchOfSlab ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LongOutsideLowerBarPitch" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:iSOCD3766BendingStartHook
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The angle of the hook at start of the bar. If the property is not included the bar has no start hook. Note: this differs from how ISO/CD 3766 handles end hooks."^^xsd:string ;
        rdfs:range        ifcowl:IfcPlaneAngleMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsISOCD3766Common ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ISOCD3766BendingStartHook" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:maintenanceFactor
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Maintenance factor."^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_LightFixtureTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MaintenanceFactor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:caseWeight  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Weight of case"^^xsd:string ;
        rdfs:range        ifcowl:IfcMassMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ElectricDistributionPointCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CaseWeight" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:averageSolarTransmittance
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Overall or average ratio of the solar flux transmitted through a body to that incident upon it."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ElementShading ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AverageSolarTransmittance" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:moveDescription  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "A textual description of the move required."^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProjectOrderMoveOrder ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MoveDescription" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:publiclyAccessible
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication whether this space (in case of e.g., a toilet) is designed to serve as a publicly accessible space, e.g., for a public toilet (TRUE) or not (FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceCommon , pset:Pset_ZoneCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "PubliclyAccessible" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:invertElevation  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The invert elevation relative to the datum established for the project."^^xsd:string ;
        rdfs:range        ifcowl:IfcLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FlowSegmentPipeSegment ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "InvertElevation" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:infiltrationDiversitySummer
        a                 rdf:Property , ifcdoc:P_SINGLEVALUE , spin:MagicProperty ;
        rdfs:comment      "Diversity factor for Summer infiltration."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirSideSystemInformation , pset:Pset_ThermalLoadAggregate ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "InfiltrationDiversitySummer" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hasIntegralShutOffDevice
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication of whether the flushing valve has an integral shut off device fitted (set TRUE) or not (set FALSE)"^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ValveTypeFlushing ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasIntegralShutOffDevice" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalCurrent  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The maximum allowed current that a device is certified to handle."^^xsd:string ;
        rdfs:range        ifcowl:IfcElectricCurrentMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ElectricalDeviceCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalCurrent" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:standardFixingPlateWidth
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The width of the standard fixing plate."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryStandardFixingPlate ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "StandardFixingPlateWidth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:thickness  a         ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Thickness of the fin."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TubeBundleTypeFinned ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Thickness" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:isCoated  a          ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication whether the glass is coated with a material (TRUE) or not (FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DoorWindowGlazingType ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsCoated" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:testPressure  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The maximum pressure to which the valve has been subjected under test"^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ValveTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "TestPressure" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:xDirectionLowerBarCount
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The number of bars with X direction lower bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarCountOfIndependentFooting ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "XDirectionLowerBarCount" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:fireHazardFactor
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Fire hazard code of the space. The coding depends on the national fire safety regulations."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceFireSafetyRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FireHazardFactor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_EnergyConsumptionPHistoryElectricity
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Measured electrical energy consumption properties."^^xsd:string ;
        pset:groups   pset:current , pset:powerFactor , pset:apparentPower , pset:reactivePower , pset:realPower , pset:voltage .

pset:identifier  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The identifier assigned to the agreement for the purposes of tracking."^^xsd:string ;
        rdfs:range        ifcowl:IfcIdentifier ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_PropertyAgreement ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Identifier" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:heatOutput  a        ifcdoc:P_LISTVALUE , spin:MagicProperty , ifcdoc:P_SINGLEVALUE , rdf:Property ;
        rdfs:comment      "Total nominal heat output as listed by the Boiler manufacturer. For water boilers, it is a function of inlet versus outlet temperature. For steam boilers, it is a function of inlet temperature versus steam pressure."^^xsd:string , "The total amount of heat output by the heat emitter."^^xsd:string ;
        rdfs:range        ifcowl:IfcReal , ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ElectricHeaterTypeElectricalPointHeater , pset:Pset_BoilerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HeatOutput" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalWidth  a      rdf:Property , spin:MagicProperty , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "The nominal width of the system furniture elements of this type. The size information is provided in addition to the shape representation and the geometric parameters used within. In cases of inconsistency between the geometric parameters and the size properties, provided in the attached property set, the geometric parameters take precedence."^^xsd:string , "The nominal width of the segment"^^xsd:string , "Nominal or quoted width of the object."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CableCarrierSegmentTypeCableLadderSegment , pset:Pset_SanitaryTerminalTypeWashHandBasin , pset:Pset_SystemFurnitureElementTypeCommon , pset:Pset_SanitaryTerminalTypeSink , pset:Pset_CableCarrierSegmentTypeCableTraySegment , pset:Pset_SanitaryTerminalTypeUrinal , pset:Pset_SanitaryTerminalTypeBath , pset:Pset_SanitaryTerminalTypeShower , pset:Pset_SanitaryTerminalTypeBidet , pset:Pset_CableCarrierSegmentTypeCableTrunkingSegment , pset:Pset_CableCarrierSegmentTypeConduitSegment , pset:Pset_SanitaryTerminalTypeToiletPan , pset:Pset_SanitaryTerminalTypeSanitaryFountain ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalWidth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DrainageReserve
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Area exclusively reserved for the routing of drainage services. Used as a non type driven property set in conjunction with an appropriate instance of IfcSpatialStructureElement that is identified as a drainage reserve using the inherited IfcRoot.Name attribute."^^xsd:string ;
        pset:groups   pset:width .

pset:phaseAngle  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The angular difference between two waveforms of the same frequency"^^xsd:string ;
        rdfs:range        ifcowl:IfcPositivePlaneAngleMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ElectricalDeviceCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "PhaseAngle" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_CoolingTowerTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Cooling tower type common attributes.\\X\\0AWaterRequirement attribute unit type modified in IFC2x2 Pset Addendum."^^xsd:string ;
        pset:groups   pset:ambientDesignDryBulbTemperature , pset:numberOfCells , pset:nominalCapacity , pset:capacityControl , pset:liftElevationDifference , pset:casingMaterial , pset:operationTemperatureRange , pset:circuitType , pset:flowArrangement , pset:weight , pset:fillMaterial , pset:basinReserveVolume , pset:ambientDesignWetBulbTemperature , pset:controlStrategy , pset:sprayType , pset:waterRequirement .

pset:reflectivity  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Fraction of the visible light that is reflected by the glazing at normal incidence. It is a value without unit."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DoorWindowGlazingType ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Reflectivity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DistributionChamberElementTypeTrench
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from BS6100 221 4118: Excavation, the length of which greatly exceeds the width."^^xsd:string ;
        pset:groups   pset:invertLevel , pset:depth , pset:width .

pset:Pset_SanitaryTerminalTypeBath
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Sanitary appliance for immersion of the human body or parts of it (BS6100)."^^xsd:string ;
        pset:groups   pset:material , pset:drainSize , pset:color , pset:bathType , pset:nominalWidth , pset:nominalDepth , pset:hasGrabHandles , pset:materialThickness , pset:nominalLength .

pset:Pset_AirToAirHeatRecoveryPHist
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Air to Air Heat Recovery performance history common attributes."^^xsd:string ;
        pset:groups   pset:totalEffectivenessTable , pset:sensibleEffectivenessTable , pset:temperatureEffectiveness , pset:totalHeatTransferRate , pset:sensibleEffectiveness , pset:airPressureDropCurves , pset:humidityEffectiveness , pset:sensibleHeatTransferRate , pset:totalEffectiveness , pset:defrostTemperatureEffectiveness , pset:latentHeatTransferRate .

pset:Pset_FlowInstrumentTypePressureGauge
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A device that reads and displays a pressure value at a point or the pressure difference between two points."^^xsd:string ;
        pset:groups   pset:displaySize , pset:pressureGaugeType .

pset:iSOCD3766ShapeParameter_c
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter c."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsISOCD3766Common ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ISOCD3766ShapeParameter_c" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:lowLimitEnable  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Is low limit validation enabled (TRUE) or not (FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AnalogInput , pset:Pset_AnalogOutput ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LowLimitEnable" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:maximumFlowRate  a   spin:MagicProperty , rdf:Property , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Maximum rate of flow which the meter is expected to pass."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumetricFlowRateMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FlowMeterTypeOilMeter , pset:Pset_FlowMeterTypeGasMeter , pset:Pset_FlowMeterTypeWaterMeter ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MaximumFlowRate" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:fireRiskFactor  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Fire Risk factor assigned to the space according to local building regulations."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceFireSafetyRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FireRiskFactor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:mediaExtendedArea
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Total extended media area."^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FilterTypeAirParticleFilter ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MediaExtendedArea" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:constructionMode
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The type of construction action the project deals with, e.g. new construction, renovation, refurbishment, etc."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProjectCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ConstructionMode" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:mechanicalVentilationRate
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication of the requirement of a particular mechanical air ventilation rate, given in air changes per hour."^^xsd:string ;
        rdfs:range        ifcowl:IfcCountMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MechanicalVentilationRate" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_PipeSegmentPHistory
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Pipe segment performance history common attributes."^^xsd:string ;
        pset:groups   pset:fluidFlowLeakage , pset:leakageCurve .

pset:Pset_SystemFurnitureElementTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Common properties for all systems furniture (I.e. modular furniture) element types (e.g. vertical panels, work surfaces, and storage). HISTORY: First issued in IFC Release R1.5. Renamed from Pset_FurnitureElementCommon"^^xsd:string ;
        pset:groups   pset:finishing , pset:nominalHeight , pset:nominalWidth , pset:groupCode , pset:isUsed .

pset:secondaryFrequency
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The frequency that has been transformed and is running out of the transformer on the secondary side."^^xsd:string ;
        rdfs:range        ifcowl:IfcFrequencyMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TransformerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SecondaryFrequency" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:numberOfCells  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Number of cells in one cooling tower unit."^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CoolingTowerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NumberOfCells" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SpaceFireSafetyRequirements
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties related to fire protection of spaces that apply to the occurrences of IfcSpace or IfcZone."^^xsd:string ;
        pset:groups   pset:airPressurization , pset:sprinklerProtectionAutomatic , pset:fireRiskFactor , pset:sprinklerProtection , pset:fireHazardFactor , pset:mainFireUse , pset:fireExit , pset:flammableStorage , pset:ancillaryFireUse .

pset:narrativeText  a     spin:MagicProperty , rdf:Property , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Added information relating to the adjacent building use that is not appropriate to the general descriptive text associated with an entity through the inherited IfcRoot.Description"^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BuildingUse , pset:Pset_BuildingUseAdjacent ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NarrativeText" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:shortOutsideTopBarPitch
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The pitch length of the short outside top bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarPitchOfSlab ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ShortOutsideTopBarPitch" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ManufacturerTypeInformation
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Defines characteristics of manufactured products that may be given by the manufacturer. Note that the term manufactured may also be used to refer to products that are supplied and identified by the supplier or that are assembled off site by a third party provider. \\X\\0AThis property set replaces the entity IfcManufacturerInformation from previous IFC releases."^^xsd:string ;
        pset:groups   pset:productionYear , pset:manufacturer , pset:modelLabel , pset:modelReference , pset:articleNumber .

pset:Pset_AirToAirHeatRecoveryTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Air to Air Heat Recovery type common attributes."^^xsd:string ;
        pset:groups   pset:weight , pset:secondaryAirflowRateRange , pset:primaryAirflowRateRange , pset:operationalTemperatureRange , pset:hasDefrost , pset:mediaMaterial , pset:heatTransferTypeEnum .

pset:Pset_ReinforcingBarBendingsDIN135610Common
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties expressing the bending information of non-prestressed reinforcing bars. The properties in this Pset are largely defined according to DIN 1356 Teil 10 with some minor omissions: the shape type X2 is not considered since it is better represented by the explicit shape geometry. It is presumed that a single standard for defining the bar bending is used throughout the project and that this standard is referenced from the IfcProject object through the IfcDocumentReference mechanism. Note: This bending standard is presumably to be replaced by the upcoming ISO 3766 standard."^^xsd:string ;
        pset:groups   pset:dIN135610ShapeParameter_z , pset:dIN135610ShapeParameter_e , pset:dIN135610ShapeParameter_d , pset:dIN135610ShapeParameter_c , pset:dIN135610ShapeParameter_b , pset:dIN135610ShapeParameter_a , pset:dIN135610ShapeCode .

pset:bodyMass  a          ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Overall body mass of the heater."^^xsd:string ;
        rdfs:range        ifcowl:IfcMassMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceHeaterTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BodyMass" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:lightingRequirement
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "General description of the lighting requirement for the space (e.g. \"natural lighting required\")"^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceProgramCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LightingRequirement" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:thermalMassHeatCapacity
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Product of component mass and specific heat"^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceHeaterTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ThermalMassHeatCapacity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalDiameter  a   ifcdoc:P_SINGLEVALUE , ifcdoc:P_LISTVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "The nominal diameter of the pipe segment. If the list contains only one value, then this nominal diameter applies to all ports. For more than value in the list, the nominal diameter value applies to the port that corresponds to the list index."^^xsd:string , "Nominal diameter or width of the tubes in the tube bundle."^^xsd:string , "The nominal diameter of the pipe fitting. If the list contains only one value, then this nominal diameter applies to all ports. For more than value in the list, the nominal diameter value applies to the port that corresponds to the list index."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_PipeFittingTypeCommon , pset:Pset_PipeSegmentTypeCommon , pset:Pset_TubeBundleTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalDiameter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:heatTransferSurfaceArea
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Total heat transfer area of the vessel."^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BoilerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HeatTransferSurfaceArea" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:latentCoolingCapacity
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Latent cooling capacity of the PackagedACUnit per ARI Standards 210/240, 270, 275, 360, 340 and 365."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_UnitaryEquipmentTypeAirConditioningUnit ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LatentCoolingCapacity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:oneDayProcessOrProductionWater
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The volume of water that needs to be stored to supply water for process or production requirements in a building for one day in the event of water supply failure."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumeMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BuildingWaterStorage ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "OneDayProcessOrProductionWater" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DiscreteAccessoryCornerFixingPlate
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties specific to corner fixing plates."^^xsd:string ;
        pset:groups   pset:cornerFixingPlateFlangeWidthInPlaneX , pset:cornerFixingPlateFlangeWidthInPlaneZ , pset:cornerFixingPlateThickness , pset:cornerFixingPlateLength .

pset:Pset_WasteTerminalTypeRoofDrain
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Pipe fitting, set into the roof, that collects rainwater for discharge into the rainwater system."^^xsd:string ;
        pset:groups   pset:outletConnectionSize , pset:nominalBodyWidth , pset:nominalBodyLength , pset:coverWidth , pset:coverMaterial , pset:bodyMaterial , pset:nominalBodyDepth , pset:coverLength .

pset:nominalLatentCapacity
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal latent capacity."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CoilTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalLatentCapacity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:ratedShortCircuitCurrent
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "An overcurrent resulting from a fault of negligible impedance between live conductors having a difference in potential under normal operating conditions. (IEC 826-05-08)"^^xsd:string ;
        rdfs:range        ifcowl:IfcElectricCurrentMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProtectiveDeviceTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "RatedShortCircuitCurrent" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:wallThickness  a     rdf:Property , spin:MagicProperty , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "The thickness of the duct wall construction\\X\\0ANOTE: It is assumed that chamber walls will be constructed at a single thickness."^^xsd:string , "The thickness of the chamber wall construction\\X\\0ANOTE: It is assumed that chamber walls will be constructed at a single thickness."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DistributionChamberElementTypeFormedDuct , pset:Pset_DistributionChamberElementTypeValveChamber , pset:Pset_DistributionChamberElementTypeMeterChamber , pset:Pset_DistributionChamberElementTypeManhole , pset:Pset_DistributionChamberElementTypeInspectionChamber ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "WallThickness" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_CompressorTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Compressor type common attributes."^^xsd:string ;
        pset:groups   pset:nominalCapacity , pset:refrigerantType , pset:hasHotGasBypass , pset:compressorSpeed , pset:refrigerantClass , pset:powerSource , pset:idealCapacity , pset:idealShaftPower , pset:maximumPartLoadRatio , pset:minimumPartLoadRatio .

pset:Pset_DuctSilencerPHistory
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Duct silencer performance history common attributes."^^xsd:string ;
        pset:groups   pset:airPressureDropCurve , pset:airFlowRate .

pset:Pset_TransportElementCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all occurrences of IfcTransportElement."^^xsd:string ;
        pset:groups   pset:fireExit , pset:reference .

pset:activeText  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "String value to be displayed in an active, on, or running state"^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BinaryInput , pset:Pset_BinaryOutput ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ActiveText" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:numberOfTreads  a    spin:MagicProperty , rdf:Property , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Total number of treads included in the stair"^^xsd:string , "Total number of treads included in the stair flight"^^xsd:string ;
        rdfs:range        ifcowl:IfcCountMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_StairCommon , pset:Pset_StairFlightCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NumberOfTreads" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:colorRenderingIndex
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The CRI indicates how well a light source renders eight standard colors compared to perfect reference lamp with the same color temperature. The CRI scale ranges from 1 to 100, with 100 representing perfect rendering properties."^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_LampTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ColorRenderingIndex" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_PipeConnection
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: This property set is used to define the various types of pipe connections. It is applied to occurrences of pipe segments and fittings."^^xsd:string ;
        pset:groups   pset:connectionType .

pset:totalHeatingLoad
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The peak total heating load for the building, zone or space."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ThermalLoadAggregate ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "TotalHeatingLoad" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:sectionLength  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The length of a section used in the construction of the tank"^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TankTypeSectional ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SectionLength" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FlowMovingDevicePump
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Pump occurrence attributes attached to an instance of IfcFlowMovingDevice."^^xsd:string ;
        pset:groups   pset:driveConnectionType , pset:baseType , pset:impellerDiameter .

pset:hasSoundAttenuator
        a                 rdf:Property , spin:MagicProperty , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "If TRUE, the air terminal has sound attenuation."^^xsd:string , "Terminal box has a sound attenuator."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirTerminalBoxTypeCommon , pset:Pset_AirTerminalTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasSoundAttenuator" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalWeightedEfficiency
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal filter efficiency based the particle weight concentration before and after the filter against particles with a certain size distribution."^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FilterTypeAirParticleFilter ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalWeightedEfficiency" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:internalWaterVolume
        a                 spin:MagicProperty , ifcdoc:P_SINGLEVALUE , rdf:Property ;
        rdfs:comment      "Internal volume of condenser (water side)."^^xsd:string , "Internal volume of evaporator (water side)."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumeMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_EvaporatorTypeCommon , pset:Pset_CondenserTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "InternalWaterVolume" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:iP_Code  a           ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "IEC 529 (1989) Classification of degrees of protection provided by enclosures (IP Code)"^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ElectricalDeviceCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IP_Code" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:spacing  a           ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Distance between fins on a tube in the tube bundle."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TubeBundleTypeFinned ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Spacing" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:isLandmarked  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "This builing is listed as a historic building (TRUE), or not (FALSE), or unknown."^^xsd:string ;
        rdfs:range        ifcowl:IfcLogical ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BuildingCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsLandmarked" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasLogical ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:reliefPressure  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The pressure at which the spring or weight in the valve is set to discharge fluid"^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ValveTypePressureRelief ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ReliefPressure" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalInletAirPressure
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal airflow inlet static pressure."^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirTerminalBoxTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalInletAirPressure" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:dIN135610ShapeParameter_d
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter d. Note: this parameter is also used for parameter d0 (shape code B3)"^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsDIN135610Common ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "DIN135610ShapeParameter_d" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:ladderTrussCrossBarSpacing
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The spacing between the straight cross-bars."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryLadderTrussConnector ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LadderTrussCrossBarSpacing" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ActuatorTypeHydraulicActuator
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A device that hydraulically actuates a control element."^^xsd:string ;
        pset:groups   pset:inputFlowrate , pset:inputPressure .

pset:secondarySurfaceArea
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Secondary heat transfer surface area created by fins."^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CoilTypeHydronic ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SecondarySurfaceArea" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:stirrupBarPitch  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The pitch length of the stirrup bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarPitchOfBeam ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "StirrupBarPitch" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DesignPoint
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI:  A point of connection taken as a reference for hydraulic calculations in sprinkler systems. The point is assigned to an instance of IfcDistributionPort and located according to circumstances as set out by local building codes. For instance, it may be either the last elbow, tee or branch downstream of which a sprinkler array is located (where ranges are directly connected to the distribution pipe without risers or drops) or the point of connection of the riser or drop nearest the installation valves in the sprinkler array (where ranges are connected to the distribution pipe with risers or drops). Other circumstances may be referenced in local codes and the assignment of the design point must be established by a user."^^xsd:string ;
        pset:groups   pset:isDesignPoint .

pset:Pset_ReinforcementBarCountOfIndependentFooting
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Reinforcement Concrete parameter [ST-2]: The amount number information of reinforcement  bar with the independent footing. The X and Y direction are based on the local coordinate system of building storey. The X and Y direction of the reinforcement bar are parallel to the X and Y axis of the IfcBuildingStoreys local coordinate system, respectively."^^xsd:string ;
        pset:groups   pset:yDirectionUpperBarCount , pset:xDirectionUpperBarCount , pset:yDirectionLowerBarCount , pset:xDirectionLowerBarCount , pset:reference , pset:description .

pset:ambientDesignWetBulbTemperature
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Ambient design wet bulb temperature used for selecting the cooling tower."^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CoolingTowerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AmbientDesignWetBulbTemperature" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hasHotGasBypass  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Whether or not hot gas bypass is provided for the compressor. TRUE = Yes, FALSE = No."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CompressorTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasHotGasBypass" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:torque  a            ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indicates the maximum close-off torque for the actuator."^^xsd:string ;
        rdfs:range        ifcowl:IfcTorqueMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ActuatorTypeRotationalActuation ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Torque" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:netAreaPlanned  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Total planned net area for the building storey. Used for programming the building storey."^^xsd:string , "Total planned net area for the space. Used for programming the space."^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BuildingStoreyCommon , pset:Pset_ZoneCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NetAreaPlanned" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:humiditySetPoint
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The humidity value to be sensed."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SensorTypeHumiditySensor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HumiditySetPoint" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:workingPressure  a   ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "Boiler working pressure"^^xsd:string , "Pressure classification as defined by the authority having jurisdiction (e.g., SMACNA, etc.)."^^xsd:string , "Working pressure."^^xsd:string , "The normally expected maximum working pressure of the valve"^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure , <http://www.buildingsmart-tech.org/ifcOWL/IFC2X3_TC1#$> ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DuctSegmentTypeCommon , pset:Pset_BoilerPHistory , pset:Pset_ValveTypeCommon , pset:Pset_PipeSegmentTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "WorkingPressure" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:drainSize  a         rdf:Property , spin:MagicProperty , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "The size of the drain outlet connection from the object."^^xsd:string , "The size of the drain outlet connection from the object"^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SanitaryTerminalTypeShower , pset:Pset_SanitaryTerminalTypeBidet , pset:Pset_SanitaryTerminalTypeSanitaryFountain , pset:Pset_SanitaryTerminalTypeWashHandBasin , pset:Pset_SanitaryTerminalTypeBath , pset:Pset_SanitaryTerminalTypeSink ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "DrainSize" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DoorWindowGlazingType
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of the glazing component of occurrences of IfcDoor and IfcWindow, used for thermal and lighting calculations."^^xsd:string ;
        pset:groups   pset:glassLayers , pset:beamRadiationTransmittance , pset:isTempered , pset:thermalTransmittanceWinter , pset:reflectivity , pset:glassColor , pset:isCoated , pset:isWired , pset:fillGas , pset:glassThickness2 , pset:thermalTransmittanceSummer , pset:solarHeatGainTransmittance , pset:translucency , pset:glassThickness1 , pset:isLaminated , pset:glassThickness3 .

pset:subNatureOfRisk2
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "A second subsidiary value that might be assigned to designate a more specific type of risk. An example might be o person and property"^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_Risk ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SubNatureOfRisk2" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ProjectionElementShadingDevicePHistory
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Shading device performance history attributes."^^xsd:string ;
        pset:groups   pset:azimuth , pset:tiltAngle .

pset:Pset_StairCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all occurrences of IfcStair."^^xsd:string ;
        pset:groups   pset:fireExit , pset:handicapAccessible , pset:fireRating , pset:reference , pset:hasNonSkidSurface , pset:numberOfTreads , pset:isExternal , pset:requiredHeadroom , pset:riserHeight , pset:numberOfRiser , pset:treadLength .

pset:maximumPowerOutput
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The maximum output power rating of the engine."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ElectricGeneratorTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MaximumPowerOutput" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:heatSensorSetPoint
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The temperature value to be sensed."^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SensorTypeHeatSensor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HeatSensorSetPoint" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:ceilingCovering  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Label to indicate the material or finish of the space flooring. The label is used for room book information and often displayed in room stamp."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CeilingCovering" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:maximumVelocity  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The maximum design velocity of the air in the duct or fitting."^^xsd:string ;
        rdfs:range        ifcowl:IfcLinearVelocityMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DuctDesignCriteria ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MaximumVelocity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FireSuppressionTerminalTypeBreechingInlet
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Symmetrical pipe fitting that unites two or more inlets into a single pipe (BS6100 330 114 adapted)."^^xsd:string ;
        pset:groups   pset:material , pset:hasCaps , pset:couplingType , pset:outletDiameter , pset:inletDiameter , pset:breechingInletType .

pset:bECShapeParameter_k
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter k."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBECCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BECShapeParameter_k" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:activationTemperature
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The temperature at which the object is designed to activate."^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FireSuppressionTerminalTypeSprinkler ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ActivationTemperature" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:airConditioningCentral
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication whether the space  requires a central air conditioning provided (TRUE) or not (FALSE).\\X\\0AIt should only be given, if the property \"AirConditioning\" is set to TRUE."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AirConditioningCentral" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:designName  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "A name for the design values"^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DuctDesignCriteria ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "DesignName" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:groupCode  a         ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "e.g. panels, worksurfaces, storage, etc."^^xsd:string ;
        rdfs:range        ifcowl:IfcIdentifier ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SystemFurnitureElementTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "GroupCode" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:faucetTopDescription
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Description of the operating mechanism/top of the faucet"^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ValveTypeFaucet ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FaucetTopDescription" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:inputFlowrate  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Maximum hydraulic flowrate requirement."^^xsd:string , "Maximum input control air flowrate requirement"^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumetricFlowRateMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ActuatorTypePneumaticActuator , pset:Pset_ActuatorTypeHydraulicActuator ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "InputFlowrate" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:timeConstant  a      ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "The time constant of the sensor.\\X\\0A."^^xsd:string , "The time constant of the sensor\\X\\0A."^^xsd:string ;
        rdfs:range        ifcowl:IfcTimeMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SensorTypeMovementSensor , pset:Pset_SensorTypePressureSensor , pset:Pset_SensorTypeFireSensor , pset:Pset_SensorTypeHumiditySensor , pset:Pset_SensorTypeCO2Sensor , pset:Pset_SensorTypeSoundSensor , pset:Pset_SensorTypeHeatSensor , pset:Pset_SensorTypeSmokeSensor , pset:Pset_SensorTypeGasSensor , pset:Pset_SensorTypeLightSensor , pset:Pset_SensorTypeTemperatureSensor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "TimeConstant" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SanitaryTerminalTypeWCSeat
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Hinged seat that fits on the top of a water closet (WC) pan. (BS6100 330 1401)"^^xsd:string ;
        pset:groups   pset:seatColor , pset:seatMaterial , pset:seatHasCover , pset:seatType .

pset:nominalTotalPressure
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal total pressure rise across the fan."^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FanTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalTotalPressure" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_WasteTerminalTypeGreaseInterceptor
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Chamber, on the line of a drain or discharge pipe, that prevents grease passing into a drainage system (BS6100 330 6205)."^^xsd:string ;
        pset:groups   pset:strainerMaterial , pset:inletConnectionSize , pset:nominalBodyWidth , pset:outletConnectionSize , pset:strainerDiameter , pset:nominalBodyLength , pset:coverLength , pset:nominalBodyMaterial , pset:strainerDepth , pset:bodyDepth , pset:coverWidth , pset:coverMaterial .

pset:beamRadiationTransmittance
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Direct solar radiation transmittance that passes the glazing at normal incidence. It is a value without unit, often referred to as (Tsol)."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DoorWindowGlazingType ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BeamRadiationTransmittance" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:horizontalSpacing
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Horizontal spacing between tubes in the tube bundle."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TubeBundleTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HorizontalSpacing" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:finishColor  a       spin:MagicProperty , ifcdoc:P_SINGLEVALUE , rdf:Property ;
        rdfs:comment      "The finish color for the air terminal."^^xsd:string , "Finish color for cooled beam"^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CooledBeamTypeCommon , pset:Pset_AirTerminalTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FinishColor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:bECShapeParameter_a
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter a."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBECCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BECShapeParameter_a" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_PipeFittingPHistory
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Pipe fitting performance history common attributes."^^xsd:string ;
        pset:groups   pset:flowrateLeakage , pset:lossCoefficient .

pset:riserHeight  a       ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "Vertical distance from tread to tread. \\X\\0AThe riser height is supposed to be equal for all steps of a stair or stair flight."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_StairCommon , pset:Pset_StairFlightCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "RiserHeight" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ProtectiveDeviceTypeEarthFailureDevice
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: An earth failure device acts to protect people and equipment from the effects of current leakage."^^xsd:string ;
        pset:groups   pset:sensitivity , pset:earthFailureDeviceType .

pset:Pset_TankTypeSectional
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Fixed vessel constructed from sectional parts with one or more compartments for storing a liquid.\\X\\0A\\X\\0ANote (1): All sectional construction tanks are considered to be rectangular by default.\\X\\0ANote (2): Generally, it is not expected that sectional construction tanks will be used for the purposes of gas storage.\\X\\0A\\X\\0APset renamed from Pset_TankTypeSectionalTank to Pset_TankTypeSectional in IFC2x2 Pset Addendum."^^xsd:string ;
        pset:groups   pset:sectionWidth , pset:sectionLength , pset:numberOfSections .

pset:secondaryApparentPower
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The power in VA (volt ampere) that has been transformed and is running out of the transformer on the secondary side."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TransformerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SecondaryApparentPower" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SensorTypeMovementSensor
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A device that senses or detects movement."^^xsd:string ;
        pset:groups   pset:timeConstant , pset:movementSensingType .

pset:Pset_ProjectOrderMoveOrder
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Defines the requirements for move orders. Note that the move order status is defined in the same way as a work order status since a move order implies a work requirement."^^xsd:string ;
        pset:groups   pset:specialInstructions , pset:moveDescription .

pset:secondaryVoltage
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The voltage that has been transformed and is running out of the transformer on the secondary side."^^xsd:string ;
        rdfs:range        ifcowl:IfcElectricVoltageMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TransformerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SecondaryVoltage" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:bECRollerDiameter
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Diameter of bending roller."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBECCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BECRollerDiameter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:coreSetHorizontal
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Degree of horizontal (in the X-axis of the LocalPlacement) blade set from the centerline."^^xsd:string ;
        rdfs:range        ifcowl:IfcPlaneAngleMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirTerminalTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CoreSetHorizontal" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:fanPower  a          ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Fan motor loads contributing to the cooling load."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirSideSystemInformation ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FanPower" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalCapacity  a   spin:MagicProperty , ifcdoc:P_SINGLEVALUE , rdf:Property ;
        rdfs:comment      "The nominal or design volumetric capacity of the tank."^^xsd:string , "Nominal cooling capacity of chiller at standardized conditions per ARI Standards 550-92, Centrifugal and Rotary Screw Water-Chilling Packages, and ARI Standards 590-92, Positive Displacement Compressor."^^xsd:string , "Nominal cooling tower capacity in terms of heat transfer rate of the cooling tower between air stream and water stream at nominal conditions."^^xsd:string , "Compressor nameplate capacity."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure , ifcowl:IfcVolumeMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TankTypeCommon , pset:Pset_CompressorTypeCommon , pset:Pset_CoolingTowerTypeCommon , pset:Pset_ChillerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalCapacity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:maximumDesignTemperature
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Maximum design operational temperature."^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FanTypeSmokeControl ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MaximumDesignTemperature" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:maximumWorkingPressure
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Maximum pressure that the object is manufactured to withstand."^^xsd:string , "Maximum working pressure."^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FireSuppressionTerminalTypeSprinkler , pset:Pset_DamperTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MaximumWorkingPressure" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:fractionOfMotorHeatToAirStream
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Fraction of the motor heat released into the fluid flow."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FlowMovingDeviceFan ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FractionOfMotorHeatToAirStream" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:wallCovering  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Label to indicate the material or finish of the space flooring. The label is used for room book information and often displayed in room stamp."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "WallCovering" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:iSOCD3766ShapeParameter_d
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter d."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsISOCD3766Common ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ISOCD3766ShapeParameter_d" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:spaceHumidityWinter
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Humidity of the space or zone for the cold (winter) period that is required from user/designer view point."^^xsd:string ;
        rdfs:range        ifcowl:IfcRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SpaceHumidityWinter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:dustHoldingCapacity
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Maximum filter dust holding capacity."^^xsd:string ;
        rdfs:range        ifcowl:IfcMassMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FilterTypeAirParticleFilter ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "DustHoldingCapacity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:fixingSocketThreadDiameter
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The nominal diameter of the thread."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryFixingSocket ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FixingSocketThreadDiameter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:inactiveText  a      ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "String value to be displayed in an inactive, off, or idle state"^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BinaryInput , pset:Pset_BinaryOutput ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "InactiveText" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DamperTypeSmokeDamper
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Smoke damper type attributes.\\X\\0APset renamed from Pset_DamperTypeSmoke to Pset_DamperTypeSmokeDamper in IFC2x2 Pset Addendum."^^xsd:string ;
        pset:groups   pset:controlType .

pset:Pset_DistributionChamberElementTypeManhole
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Chamber constructed on a drain, sewer or pipeline and with a removable cover, that permits the entry of a person."^^xsd:string ;
        pset:groups   pset:accessCoverLoadRating , pset:hasSteps , pset:isShallow , pset:accessCoverMaterial , pset:accessWidth , pset:invertLevel , pset:soffitLevel , pset:withBackdrop , pset:baseThickness , pset:wallMaterial , pset:accessLengthOrRadius , pset:baseMaterial , pset:wallThickness .

pset:legend  a            ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "A text inscribed or applied to the switch as a legend to indicate purpose or function."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SwitchingDeviceTypeToggleSwitch ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Legend" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:thermalTransmittanceWinter
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Thermal transmittance coefficient (U-Value) of a material.\\X\\0AWinter thermal transmittance coefficient of the glazing only, often referred to as (U-value)"^^xsd:string ;
        rdfs:range        ifcowl:IfcThermalTransmittanceMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DoorWindowGlazingType ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ThermalTransmittanceWinter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:classOfService  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "A classification of usage of the hose reel that may be applied."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FireSuppressionTerminalTypeHoseReel ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ClassOfService" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalReturnWaterTemperatureCooling
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal return water temperature (refers to nominal cooling capacity)"^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CooledBeamTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalReturnWaterTemperatureCooling" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FlowMeterTypeOilMeter
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Device that measures, indicates and sometimes records, the volume of oil that passes through it without interrupting the flow."^^xsd:string ;
        pset:groups   pset:maximumFlowRate , pset:connectionSize .

pset:nominalCoolingCapacity
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal cooling capacity"^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CooledBeamTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalCoolingCapacity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:material  a          spin:MagicProperty , ifcdoc:P_SINGLEVALUE , rdf:Property , ifcdoc:P_REFERENCEVALUE ;
        rdfs:comment      "Material from which the tank is constructed."^^xsd:string , "The primary material used to construct the boilers heat transfer vessel."^^xsd:string , "Material used for construction of the fins."^^xsd:string , "Primary construction material."^^xsd:string , "The duct fitting material."^^xsd:string , "Material from which the damping element of the vibration isolator is constructed."^^xsd:string , "Primary material from which the object is constructed."^^xsd:string , "Material from which the object is constructed"^^xsd:string , "Material used for construction of the tubes."^^xsd:string , "The pipe fitting material."^^xsd:string , "Material from which the pipe flange is constructed"^^xsd:string , "Main material of the covering, it should only be given, if no IfcMaterial class is assigned to the IfcCovering instance."^^xsd:string , "The primary material used to construct the air terminal box."^^xsd:string , "The duct segment material."^^xsd:string , "The primary material used to construct the air terminal."^^xsd:string ;
        rdfs:range        ifcowl:IfcMaterial , ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_VibrationIsolatorTypeCommon , pset:Pset_SpaceHeaterTypeCommon , pset:Pset_SanitaryTerminalTypeWashHandBasin , pset:Pset_SanitaryTerminalTypeSink , pset:Pset_AirTerminalBoxTypeCommon , pset:Pset_PipeSegmentTypeCommon , pset:Pset_CoveringCommon , pset:Pset_DuctSegmentTypeCommon , pset:Pset_SanitaryTerminalTypeSanitaryFountain , pset:Pset_PipeConnectionFlanged , pset:Pset_DuctFittingTypeCommon , pset:Pset_SanitaryTerminalTypeBidet , pset:Pset_PipeFittingTypeCommon , pset:Pset_TubeBundleTypeCommon , pset:Pset_TankTypeCommon , pset:Pset_CooledBeamTypeCommon , pset:Pset_BoilerTypeCommon , pset:Pset_SanitaryTerminalTypeShower , pset:Pset_FireSuppressionTerminalTypeBreechingInlet , pset:Pset_TubeBundleTypeFinned , pset:Pset_AirTerminalTypeCommon , pset:Pset_SanitaryTerminalTypeBath ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Material" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_PipeSegmentTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Pipe segment type common attributes."^^xsd:string ;
        pset:groups   pset:innerDiameter , pset:workingPressure , pset:pressureRange , pset:material , pset:unitWeight , pset:outerDiameter , pset:nominalDiameter , pset:endStyleTreatment , pset:temperatureRange .

pset:waterStorageRatePerPerson
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The volume of domestic water that needs to be stored per person."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumeMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BuildingWaterStorage ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "WaterStorageRatePerPerson" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DiscreteAccessoryWireLoop
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Shape properties common to wire loop joint connectors."^^xsd:string ;
        pset:groups   pset:wireLoopLength , pset:wireEmbeddingLength , pset:wireDiameter , pset:wireLoopBasePlateLength , pset:wireLoopBasePlateWidth , pset:wireLoopBasePlateThickness .

pset:crossingLowerBarPitch
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The pitch length of the crossing lower bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarPitchOfContinuousFooting ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CrossingLowerBarPitch" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:neckArea  a          ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Neck area of the air terminal."^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirTerminalTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NeckArea" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:wireLoopBasePlateWidth
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The width of the base plate."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryWireLoop ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "WireLoopBasePlateWidth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FlowControllerFlowMeter
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Flow meter occurrence common attributes."^^xsd:string ;
        pset:groups   pset:purpose .

pset:Pset_SlabCommon  a  ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all occurrences of IfcSlab. Note: Properties for PitchAngle added in IFC 2x3"^^xsd:string ;
        pset:groups   pset:combustible , pset:pitchAngle , pset:fireRating , pset:loadBearing , pset:surfaceSpreadOfFlame , pset:isExternal , pset:compartmentation , pset:reference , pset:acousticRating , pset:thermalTransmittance .

pset:sensibleCoolingCapacity
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Sensible cooling capacity of the PackagedACUnit per ARI Standards 210/240, 270, 275, 360, 340 and 365."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_UnitaryEquipmentTypeAirConditioningUnit ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SensibleCoolingCapacity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:prevailingWindDirection
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The prevailing wind angle direction measured from True North (0 degrees) in a clockwise direction."^^xsd:string ;
        rdfs:range        ifcowl:IfcPlaneAngleMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_OutsideDesignCriteria ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "PrevailingWindDirection" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:budgetSource  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The budget source requested."^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProjectOrderChangeOrder ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BudgetSource" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:glassColor  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Color (tint) selection for this glazing. It is given for information purposes only."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DoorWindowGlazingType ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "GlassColor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:operationalCriteria
        a                 rdf:Property , ifcdoc:P_SINGLEVALUE , spin:MagicProperty ;
        rdfs:comment      "Time of operation at maximum operational ambient air temperature."^^xsd:string ;
        rdfs:range        ifcowl:IfcTimeMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FanTypeCommon , pset:Pset_FanTypeSmokeControl ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "OperationalCriteria" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalEvaporatingTemperature
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Chiller evaporating temperature."^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ChillerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalEvaporatingTemperature" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:isolatorCompressibility
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The compressibility of the vibration isolator."^^xsd:string ;
        rdfs:range        ifcowl:IfcRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_VibrationIsolatorTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsolatorCompressibility" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_AirTerminalTypeRound
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Round air terminal type attributes."^^xsd:string ;
        pset:groups   pset:faceType .

pset:sensitivity  a       spin:MagicProperty , ifcdoc:P_SINGLEVALUE , rdf:Property ;
        rdfs:comment      "Current leakage to an unwanted leading path during normal operation (IEC 151-14-49)"^^xsd:string ;
        rdfs:range        ifcowl:IfcElectricCurrentMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProtectiveDeviceTypeResidualCurrentSwitch , pset:Pset_ProtectiveDeviceTypeEarthFailureDevice , pset:Pset_ProtectiveDeviceTypeResidualCurrentCircuitBreaker ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Sensitivity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_CableCarrierSegmentTypeCableTrunkingSegment
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: An enclosed carrier segment with one or more compartments into which cables are placed."^^xsd:string ;
        pset:groups   pset:numberOfCompartments , pset:nominalHeight , pset:nominalWidth , pset:nominalLength .

pset:handicapAccessible
        a                 ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "Indication whether this space (in case of e.g., a toilet) is designed to serve as an accessible space for handicapped people, e.g., for a public toilet (TRUE) or not (FALSE). This information is often used to declare the need for access for the disabled and for special design requirements of this space."^^xsd:string , "Indication that this object is designed to be accessible by the handicapped. \\X\\0AIt is giving according to the requirements of the national building code."^^xsd:string , "Indication that this object is designed to be accessible by the handicapped. \\X\\0ASet to (TRUE) if this ramp is rated as handicap accessible  according the local building codes, otherwise (FALSE)."^^xsd:string , "Indication that this object is designed to be accessible by the handicapped. \\X\\0ASet to (TRUE) if this stair is rated as handicap accessible  according the local building codes, otherwise (FALSE). Accessibility maybe provided by additional means."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DoorCommon , pset:Pset_StairCommon , pset:Pset_SpaceCommon , pset:Pset_ZoneCommon , pset:Pset_SpaceParking , pset:Pset_RampCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HandicapAccessible" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:gasDetected  a       ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Identification of the gas that is being detected."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SensorTypeGasSensor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "GasDetected" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:heatingEfficiency
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Heating efficiency of the PackagedACUnit under full load heating conditions per ARI Standards 210/240, 270, 275, 360, 340 and 365 for heat pumps, AFUE for fuel burning and NEMA for electric heat."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_UnitaryEquipmentTypeAirConditioningUnit ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HeatingEfficiency" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:panColor  a          ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Color selection for this object"^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SanitaryTerminalTypeToiletPan ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "PanColor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DrainageOutfall
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Structure through which water is discharged into a watercourse or body of water (BS6100). Used as a non type driven property set in conjunction with an instance of IfcProxy that is identified as an outfall using the inherited IfcRoot.Name attribute."^^xsd:string ;
        pset:groups   pset:invertLevel .

pset:soundSensorSetPoint
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The sound pressure value to be sensed."^^xsd:string ;
        rdfs:range        ifcowl:IfcSoundPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SensorTypeSoundSensor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SoundSensorSetPoint" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:maximumRatedVoltage
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Maximum rated voltage"^^xsd:string ;
        rdfs:range        ifcowl:IfcElectricVoltageMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProtectiveDeviceTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MaximumRatedVoltage" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:width  a             rdf:Property , spin:MagicProperty , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "The width of the drainage reserve"^^xsd:string , "The width of the trench."^^xsd:string , "The width of the pit."^^xsd:string , "The width of the sump."^^xsd:string ;
        rdfs:range        ifcowl:IfcLengthMeasure , ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DistributionChamberElementTypeSump , pset:Pset_DrainageReserve , pset:Pset_DistributionChamberElementTypeTrench , pset:Pset_DistributionChamberElementTypeInspectionPit ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Width" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_WasteTerminalTypeOilInterceptor
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: One or more chambers arranged to prevent the ingress of oil to a drain or sewer, that retain the oil for later removal (BS6100 330 67316)."^^xsd:string ;
        pset:groups   pset:outletConnectionSize , pset:bodyMaterial , pset:coverWidth , pset:coverLength , pset:nominalBodyDepth , pset:nominalBodyLength , pset:coverMaterial , pset:inletConnectionSize , pset:nominalBodyWidth .

pset:numberOfHoseConnections
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The number of hose connections on the hydrant (excluding the pumper connection)"^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FireSuppressionTerminalTypeFireHydrant ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NumberOfHoseConnections" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hasDeflector  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication of whether the sprinkler has a deflector (baffle) fitted to diffuse the discharge on activation (= TRUE) or not (= FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FireSuppressionTerminalTypeSprinkler ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasDeflector" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_HeatExchangerTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Heat exchanger type common attributes."^^xsd:string ;
        pset:groups   pset:shellMaterial , pset:arrangement .

pset:Pset_ReinforcementBarPitchOfSlab
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: The pitch length information of reinforcement  bar with the slab."^^xsd:string ;
        pset:groups   pset:shortOutsideLowerBarPitch , pset:description , pset:reference , pset:longInsideEndTopBarPitch , pset:shortInsideCenterLowerBarPitch , pset:shortOutsideTopBarPitch , pset:longInsideCenterLowerBarPitch , pset:shortInsideEndTopBarPitch , pset:longOutsideTopBarPitch , pset:longInsideCenterTopBarPitch , pset:longOutsideLowerBarPitch , pset:longInsideEndLowerBarPitch , pset:shortInsideEndLowerBarPitch , pset:shortInsideCenterTopBarPitch .

pset:urinalColor  a       ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Color of the urinal"^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SanitaryTerminalTypeUrinal ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "UrinalColor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:numberOfCompartments
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The number of separate internal compartments within the trunking"^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CableCarrierSegmentTypeCableTrunkingSegment ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NumberOfCompartments" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:heatOutputPerUnitArea
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The amount of heat output per unit area of heat emitter."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ElectricHeaterTypeElectricalMatHeater ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HeatOutputPerUnitArea" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:lampMaintenanceFactor
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Non recoverable losses of luminous flux of a lamp due to lamp depreciation; i.e. the decreasing of light output of a luminaire due to aging and dirt."^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_LampTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LampMaintenanceFactor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:cisternCapacity  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Volumetric capacity of the cistern"^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumeMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SanitaryTerminalTypeCistern ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CisternCapacity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:lightingPercentLoadToReturnAir
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Percent of lighting load to the return air plenum."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ThermalLoadDesignCriteria ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LightingPercentLoadToReturnAir" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:prevailingWindVelocity
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The design wind velocity coming from the direction specified by the PrevailingWindDirection attribute."^^xsd:string ;
        rdfs:range        ifcowl:IfcLinearVelocityMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_OutsideDesignCriteria ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "PrevailingWindVelocity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:vibrationTransmissibility
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The vibration transmissibility percentage."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_VibrationIsolatorTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "VibrationTransmissibility" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:yDirectionUpperBarCount
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The number of bars with Y direction upper bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarCountOfIndependentFooting ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "YDirectionUpperBarCount" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:dIN135610ShapeParameter_e
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter e. Note: this parameter is also used for parameter e0 (shape codes A4 and C3)"^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsDIN135610Common ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "DIN135610ShapeParameter_e" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:ladderConfiguration
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Description of the configuration of the ladder structure used."^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CableCarrierSegmentTypeCableLadderSegment ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LadderConfiguration" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:barCode  a           ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The identity of the bar code given to an occurrence of the product"^^xsd:string ;
        rdfs:range        ifcowl:IfcIdentifier ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ManufacturerOccurrence ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BarCode" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:phaseReference  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The phase identification used when the function of the conductor is a phase. In general, it is recommended that IEC recommendations for phase identification are used (L1, L2 etc.). However, other phase identifiers may be used such as by color (Red, Blue, Yellow) or by number (1, 2, 3) etc."^^xsd:string , "The phase identification used for the device electrical input. This should be the same phase identifier that is used for the conductor segment providing the electrical service to the device. In general, it is recommended that IEC recommendations for phase identification are used (L1, L2 etc.). However, other phase identifiers may be used such as by color (Red, Blue, Yellow) or by number (1, 2, 3) etc."^^xsd:string ;
        rdfs:range        ifcowl:IfcIdentifier ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CableSegmentTypeConductorSegment , pset:Pset_ElectricalDeviceCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "PhaseReference" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:ventilatingPipeSize
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Size of the ventilating pipe(s)"^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_WasteTerminalTypePetrolInterceptor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "VentilatingPipeSize" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:loadBearing  a       rdf:Property , ifcdoc:P_SINGLEVALUE , spin:MagicProperty ;
        rdfs:comment      "Indicates whether the object is intended to carry loads (TRUE) or not (FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_MemberCommon , pset:Pset_WallCommon , pset:Pset_ColumnCommon , pset:Pset_PlateCommon , pset:Pset_BeamCommon , pset:Pset_SlabCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LoadBearing" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hasGrabHandles  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indicates whether the bath is fitted with handles that provide assistance to a bather in entering or leaving the bath"^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SanitaryTerminalTypeBath ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasGrabHandles" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_GasTerminalTypeGasAppliance
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Piece of equipment for occupants use that is connected to a gas installation (definition is a modification from that found in BS6100)."^^xsd:string ;
        pset:groups   pset:flueType , pset:gasApplianceType .

pset:totalSensibleHeatGain
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The total sensible heat or energy gained by the space during the peak cooling conditions."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalDesign ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "TotalSensibleHeatGain" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_CoilTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Coil type common attributes."^^xsd:string ;
        pset:groups   pset:nominalUA , pset:nominalLatentCapacity , pset:nominalSensibleCapacity , pset:airflowRateRange , pset:operationalTemperatureRange .

pset:Pset_ValveTypeDrawOffCock
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from BS6100 250 6223: A small diameter valve, used to drain water from a cistern or water filled system."^^xsd:string ;
        pset:groups   pset:hasHoseUnion .

pset:mainColor  a         ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The main color of the furniture of this type"^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FurnitureTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MainColor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:minimumTextHeight
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The minlimum height of this type."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_LightFixtureTypeExitSign ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MinimumTextHeight" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FilterTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Filter type common attributes."^^xsd:string ;
        pset:groups   pset:nominalFlowrate , pset:nominalFilterFaceVelocity , pset:nominalMediaSurfaceVelocity , pset:weight , pset:nominalParticleGeometricMeanDiameter , pset:mediaMaterial , pset:finalResistance , pset:nominalPressureDrop , pset:operationTemperatureRange , pset:flowRateRange , pset:initialResistance , pset:nominalParticleGeometricStandardDeviation .

pset:Pset_SystemFurnitureElementTypeWorkSurface
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A set of specific properties for work surfaces used in workstations. HISTORY: First issued in IFC Release R1.5. Renamed from Pset_Worksurface"^^xsd:string ;
        pset:groups   pset:shapeDescription , pset:nominalThickness , pset:hangingHeight , pset:supportType , pset:usePurpose .

pset:Pset_ElectricHeaterTypeElectricalCableHeater
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: An electrical device that outputs heat uniformly along its path."^^xsd:string ;
        pset:groups   pset:heatOutputPerUnitLength .

pset:Pset_EnergyConversionDeviceSpaceHeaterSectional
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Sectional space heater type occurrence attributes."^^xsd:string ;
        pset:groups   pset:numberOfSections .

pset:usageCurrent  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The current that a device is actually handling or is calculated to be handling at a point in time."^^xsd:string ;
        rdfs:range        ifcowl:IfcElectricCurrentMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ElectricalDeviceCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "UsageCurrent" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:ventilation  a       ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Required outside air ventilation."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumetricFlowRateMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirSideSystemInformation ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Ventilation" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:escortRequirement
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indicates whether or not an escort is required to accompany persons carrying out a work order at or to/from the place of work (= TRUE) or not (= FALSE).\\X\\0A\\X\\0ANOTE - There are many instances where escorting is required, particularly in a facility that has a high security rating. Escorting may require that persons are escorted to and from the place of work. Alternatively, it may involve the escort remaining at the place of work at all times."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_Permit ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "EscortRequirement" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:flangeThickness  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Thickness of the material from which the pipe bend is constructed"^^xsd:string ;
        rdfs:range        ifcowl:IfcLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_PipeConnectionFlanged ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FlangeThickness" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:totalArea  a         ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "Total exposed area of the roof"^^xsd:string , "Total area of the site - masured according to local building codes."^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SiteCommon , pset:Pset_RoofCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "TotalArea" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:strainerDiameter
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Diameter, measured in plan view, of the strainer basket."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_WasteTerminalTypeGreaseInterceptor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "StrainerDiameter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:isWaterStorageHeater
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "This is used to identify if the boiler has storage capacity (TRUE). If FALSE, then there is no storage capacity built into the boiler, such as an instantaneous hot water heater."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BoilerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsWaterStorageHeater" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:signalTime  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Time factor used for integral and running average controllers"^^xsd:string ;
        rdfs:range        ifcowl:IfcTimeMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ControllerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SignalTime" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:bS8666ShapeParameter_r
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter r. Used for bending radius."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBS8666Common ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BS8666ShapeParameter_r" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:longJobDescription
        a                 ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "Description of the job requested."^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProjectOrderWorkOrder , pset:Pset_ProjectOrderMaintenanceWorkOrder ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LongJobDescription" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:natureOfRisk  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "An indication of the generic nature of the risk that might be encountered. \\X\\0A\\X\\0ANOTE: It is anticipated that there will be a local agreement that constrains the values that might be assigned to this property. An example might be Fall  or Fall of grille unit causing injury and damage to person and property"^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_Risk ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NatureOfRisk" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:employeeType  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "General description of the employee type that will occupy the space (e.g.  manager, programmer, secretary, etc.). The type classification depends on the company based terms for employee types."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceProgramCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "EmployeeType" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:isFreeHanging  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Is it free hanging type (not mounted in a false ceiling)?"^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CooledBeamTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsFreeHanging" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:bECShapeParameter_l
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter l."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBECCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BECShapeParameter_l" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalParticleGeometricStandardDeviation
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Particle geometric standard deviation associated with nominal efficiency."^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FilterTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalParticleGeometricStandardDeviation" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_TransformerTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: An inductive stationary device that transfers electrical energy from one circuit to another."^^xsd:string ;
        pset:groups   pset:secondaryCurrent , pset:secondaryFrequency , pset:primaryVoltage , pset:secondaryApparentPower , pset:maximumApparentPower , pset:secondaryCurrentType , pset:primaryCurrent , pset:primaryApparentPower , pset:primaryFrequency , pset:secondaryVoltage .

pset:securityRating  a    rdf:Property , ifcdoc:P_SINGLEVALUE , spin:MagicProperty ;
        rdfs:comment      "Index based rating system indicating security level.\\X\\0AIt is giving according to the national building code."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DoorCommon , pset:Pset_WindowCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SecurityRating" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_GasTerminalPHistory
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Gas terminal performance history common attributes."^^xsd:string ;
        pset:groups   pset:gasFlowRate .

pset:nominalBodyLength
        a                 spin:MagicProperty , ifcdoc:P_SINGLEVALUE , rdf:Property ;
        rdfs:comment      "Nominal or quoted length, measured along the x-axis of the local coordinate system of the object, of the body of the object."^^xsd:string , "Nominal or quoted length measured along the x-axis in the local coordinate system or the radius (in the case of a circular shape in plan) of the chamber of the trap."^^xsd:string , "Nominal or quoted length measured along the x-axis in the local coordinate system or the radius (in the case of a circular shape in plan) of the drain."^^xsd:string , "Nominal or quoted length measured along the x-axis in the local coordinate system or the radius (in the case of a circular shape in plan) of the waste."^^xsd:string , "Nominal or quoted length measured along the x-axis in the local coordinate system or the radius (in the case of a circular shape in plan) of the chamber of the gully trap."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_WasteTerminalTypeFloorWaste , pset:Pset_WasteTerminalTypeRoofDrain , pset:Pset_WasteTerminalTypeGreaseInterceptor , pset:Pset_WasteTerminalTypeGullyTrap , pset:Pset_WasteTerminalTypeOilInterceptor , pset:Pset_WasteTerminalTypeFloorTrap , pset:Pset_WasteTerminalTypePetrolInterceptor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalBodyLength" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:sprinklerProtection
        a                 spin:MagicProperty , ifcdoc:P_SINGLEVALUE , rdf:Property ;
        rdfs:comment      "Indication whether the space is sprinkler protected (TRUE) or not (FALSE)."^^xsd:string , "Indication whether this object is sprinkler protected (TRUE) or not (FALSE)."^^xsd:string , "Indication whether this object is sprinkler protected (true) or not (false)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceFireSafetyRequirements , pset:Pset_BuildingCommon , pset:Pset_BuildingStoreyCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SprinklerProtection" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:specialInstructions
        a                 rdf:Property , spin:MagicProperty , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Special instructions that affect the move."^^xsd:string , "Special instructions for packing."^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_PackingInstructions , pset:Pset_ProjectOrderMoveOrder ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SpecialInstructions" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:secondaryCurrent
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The current that has been transformed and is running out of the transformer on the secondary side."^^xsd:string ;
        rdfs:range        ifcowl:IfcElectricCurrentMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TransformerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SecondaryCurrent" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:bECShapeParameter_b
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter b."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBECCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BECShapeParameter_b" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:ladderTrussSecondaryBarDiameter
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The nominal diameter of the secondary bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryLadderTrussConnector ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LadderTrussSecondaryBarDiameter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalHeatTransferArea
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal heat transfer surface area associated with nominal overall heat transfer coefficient."^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_EvaporatorTypeCommon , pset:Pset_CondenserTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalHeatTransferArea" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:manualOverride  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Identifies whether hand-operated operation is provided as an override (= TRUE) or not (= FALSE). Note that this value should be set to FALSE by default in the case of a Hand Operated Actuator."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ActuatorTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ManualOverride" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:glassLayers  a       ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Number of glass layers within the frame. E.g. \"2\" for double glazing."^^xsd:string ;
        rdfs:range        ifcowl:IfcCountMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DoorWindowGlazingType ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "GlassLayers" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:pitchAngle  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Angle of the slab to the horizontal when used as a component for the roof (specified as 0 degrees or not asserted for cases where the slab is not used as a roof component)."^^xsd:string ;
        rdfs:range        ifcowl:IfcPlaneAngleMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SlabCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "PitchAngle" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:longitudinalSeam
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The type of seam to be used along the longitudinal axis of the duct segment."^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DuctSegmentTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LongitudinalSeam" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hasVisualIndication
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indicates whether a means of being to visually ascertain whether the contacts are open or closed is fitted (= TRUE) or not (= FALSE)"^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SwitchingDeviceTypeSwitchDisconnector ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasVisualIndication" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FlowSegmentPipeSegment
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Pipe segment occurrence attributes attached to an instance of IfcFlowSegment."^^xsd:string ;
        pset:groups   pset:invertElevation , pset:gradient , pset:color , pset:length , pset:interiorRoughnessCoefficient .

pset:isOneWay  a          ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indicates whether the parking aisle is designed for oneway traffic (TRUE) or twoway traffic (FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceParkingAisle ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsOneWay" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_CooledBeamTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Cooled beam common attributes.\\X\\0ASoundLevel and SoundAttenuation attributes deleted in IFC2x2 Pset Addendum: Use IfcSoundProperties instead."^^xsd:string ;
        pset:groups   pset:nominalWaterFlowCooling , pset:finishColor , pset:isFreeHanging , pset:nominalCoolingCapacity , pset:connectionSize , pset:nominalSupplyWaterTemperatureHeating , pset:nominalReturnWaterTemperatureHeating , pset:waterPressureRange , pset:nominalSupplyWaterTemperatureCooling , pset:pipeConnectionEnum , pset:nominalWaterFlowHeating , pset:material , pset:waterFlowControlSystemType , pset:coilLength , pset:nominalSurroundingHumidityCooling , pset:nominalHeatingCapacity , pset:nominalSurroundingTemperatureCooling , pset:coilWidth , pset:weight , pset:integratedLightingType , pset:nominalSurroundingTemperatureHeating , pset:nominalReturnWaterTemperatureCooling .

pset:nominalStaticPressure
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The static pressure within the air stream that the fan must overcome to insure designed circulation of air"^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FanTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalStaticPressure" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:requestSourceLabel
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "A specific name or label that further qualifies the identity of a request source. In the event of an email, this may be the email address."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ActionRequest ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "RequestSourceLabel" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:boltholePitch  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Diameter of the circle along which the boltholes are placed"^^xsd:string ;
        rdfs:range        ifcowl:IfcLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_PipeConnectionFlanged ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BoltholePitch" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:waterIsPotable  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication of whether the water flow from the hydrant is potable (set TRUE) or non potable (set FALSE)"^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FireSuppressionTerminalTypeFireHydrant ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "WaterIsPotable" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:impellerDiameter
        a                 rdf:Property , ifcdoc:P_SINGLEVALUE , spin:MagicProperty ;
        rdfs:comment      "Diameter of compressor impeller - used to scale performance of geometrically similar compressors."^^xsd:string , "Diameter of fan wheel - used to scale performance of geometrically similar fans."^^xsd:string , "Diameter of pump impeller - used to scale performance of geometrically similar pumps."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FlowMovingDevicePump , pset:Pset_FlowMovingDeviceFan , pset:Pset_FlowMovingDeviceCompressor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ImpellerDiameter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hasReturnAir  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Terminal box has return air mixed with supply air from duct work."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirTerminalBoxTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasReturnAir" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:capColor  a          ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Color of the caps of the hydrant.\\X\\0A\\X\\0ANote: Consult local fire regulations for statutory colors that may be required for hydrant caps in particular circumstances."^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FireSuppressionTerminalTypeFireHydrant ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CapColor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_MultiStateOutput
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Defines the characteristics of a multi-state output."^^xsd:string ;
        pset:groups   pset:notifyType , pset:eventEnable , pset:alarmValues , pset:stateText , pset:numberOfStates .

pset:externalSurfaceArea
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "External surface area (both primary and secondary area)."^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_EvaporatorTypeCommon , pset:Pset_CondenserTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ExternalSurfaceArea" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_RailingCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all occurrences of IfcRailing."^^xsd:string ;
        pset:groups   pset:isExternal , pset:diameter , pset:height , pset:reference .

pset:iSOCD3766ShapeParameter_e
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter e."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsISOCD3766Common ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ISOCD3766ShapeParameter_e" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:inputPressure  a     spin:MagicProperty , rdf:Property , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Maximum design pressure for the actuator."^^xsd:string , "Maximum input control air pressure requirement"^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ActuatorTypePneumaticActuator , pset:Pset_ActuatorTypeHydraulicActuator ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "InputPressure" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SensorTypeHeatSensor
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A device that senses or detects heat."^^xsd:string ;
        pset:groups   pset:timeConstant , pset:heatSensorAccuracy , pset:heatSensorRange , pset:heatSensorSetPoint , pset:coverageArea .

pset:illuminance  a       ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Required average illuminance value for this space."^^xsd:string ;
        rdfs:range        ifcowl:IfcIlluminanceMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceLightingRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Illuminance" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:portNumber  a        spin:MagicProperty , rdf:Property , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "The index of the port as it relates to the related object. Each index must be unique for any given related object."^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DistributionPortPipe , pset:Pset_DistributionPortDuct ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "PortNumber" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:xDirectionTieHoopCount
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The number of bars with X direction tie hoop bars."^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarPitchOfColumn ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "XDirectionTieHoopCount" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:ifNotAccomplished
        a                 spin:MagicProperty , ifcdoc:P_SINGLEVALUE , rdf:Property ;
        rdfs:comment      "Comments if the job is not accomplished."^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProjectOrderMaintenanceWorkOrder , pset:Pset_ProjectOrderWorkOrder ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IfNotAccomplished" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:spaceTemperatureMax
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Temperature of the space or zone, that is required from user/designer view point.  If no summer or winter space temperature requirements are given, it applies all year, otherwise for the intermediate period."^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SpaceTemperatureMax" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DiscreteAccessoryDiagonalTrussConnector
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Shape properties specific to connecting accessories in truss form with diagonal cross-bars."^^xsd:string ;
        pset:groups   pset:diagonalTrussCrossBarDiameter , pset:diagonalTrussSecondaryBarDiameter , pset:diagonalTrussBaseBarDiameter , pset:diagonalTrussCrossBarSpacing , pset:diagonalTrussLength , pset:diagonalTrussHeight .

pset:dischargeCoefficient
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The coefficient of flow at the sprinkler"^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FireSuppressionTerminalTypeSprinkler ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "DischargeCoefficient" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ValveTypePressureRelief
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Spring or weight loaded valve that automatically discharges to a safe place fluid that has built up to excessive pressure in pipes or fittings.\\X\\0ANote that a pressure relief valve is constrained to have a single port pattern."^^xsd:string ;
        pset:groups   pset:reliefPressure .

pset:restrictions  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Restrictions that may be placed by a  competent authority"^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_PropertyAgreement ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Restrictions" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:translucency  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Fraction of the visible light that passes the glazing at normal incidence. It is a value without unit."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DoorWindowGlazingType ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Translucency" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ActionRequest
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: An action request is a request for an action to fulfill a need."^^xsd:string ;
        pset:groups   pset:status , pset:requestComments , pset:requestDescription , pset:requestSourceName , pset:requestSourceLabel , pset:requestSourceType .

pset:heatOutputPerUnitLength
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The amount of heat output per unit length of heat emitter."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ElectricHeaterTypeElectricalCableHeater ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HeatOutputPerUnitLength" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:   a               owl:Ontology ;
        dc:creator      "Chi Zhang"^^xsd:string ;
        dc:date         "29-03-2016"^^xsd:string ;
        dc:description  "This is a vocabulary for the official property sets from IFC 4 documentation. "^^xsd:string .

pset:bladeThickness  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The thickness of the damper blade."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DamperTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BladeThickness" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ElectricHeaterTypeElectricalMatHeater
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: An electrical device that outputs heat uniformly across its surface area."^^xsd:string ;
        pset:groups   pset:heatOutputPerUnitArea .

pset:outsideAirFlowrate
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Flow rate of outside air entering the PackagedACUnit per the manufacturers listing (if available)"^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumetricFlowRateMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_UnitaryEquipmentTypeAirConditioningUnit ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "OutsideAirFlowrate" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:frameThickness  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The thickness of the damper frame material."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DamperTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FrameThickness" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalSumpLength
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal or quoted length measured along the x-axis in the local coordinate system or the radius (in the case of a circular shape in plan) of the sump."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_WasteTerminalTypeGullySump ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalSumpLength" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DistributionPortPipe
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Pipe port occurrence attributes attached to an instance of IfcDistributionPort."^^xsd:string ;
        pset:groups   pset:connectionType , pset:portNumber .

pset:nominalBodyDepth
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal or quoted length measured along the z-axis in the local coordinate system of the chamber of the gully trap."^^xsd:string , "Nominal or quoted length measured along the z-axis in the local coordinate system of the waste."^^xsd:string , "Nominal or quoted length measured along the z-axis in the local coordinate system of the chamber of the  trap."^^xsd:string , "Nominal or quoted length measured along the z-axis in the local coordinate system of the drain."^^xsd:string , "Nominal or quoted =length, measured along the z-axis of the local coordinate system of the object, of the body of the object."^^xsd:string , "Nominal or quoted length, measured along the z-axis of the local coordinate system of the object, of the body of the object."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_WasteTerminalTypeFloorWaste , pset:Pset_WasteTerminalTypeFloorTrap , pset:Pset_WasteTerminalTypePetrolInterceptor , pset:Pset_WasteTerminalTypeRoofDrain , pset:Pset_WasteTerminalTypeGullyTrap , pset:Pset_WasteTerminalTypeOilInterceptor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalBodyDepth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ActuatorTypePneumaticActuator
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A device that pneumatically actuates a control element"^^xsd:string ;
        pset:groups   pset:inputFlowrate , pset:inputPressure .

pset:edgeFixingPlateFlangeWidthInPlaneX
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The flange width of the L-shaped edge plate in plane X."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryEdgeFixingPlate ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "EdgeFixingPlateFlangeWidthInPlaneX" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:options  a           ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "A statement of the options available in the agreement"^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_PropertyAgreement ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Options" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_AirTerminalTypeRectangular
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Rectangular air terminal type attributes."^^xsd:string ;
        pset:groups   pset:faceType .

pset:dIN135610ShapeParameter_z
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter z."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsDIN135610Common ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "DIN135610ShapeParameter_z" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:accessWidth  a       spin:MagicProperty , rdf:Property , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "The width of the chamber access cover where the plan shape of the cover is not circular."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DistributionChamberElementTypeInspectionChamber , pset:Pset_DistributionChamberElementTypeManhole ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AccessWidth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ElectricDistributionPointCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A room or a place or a box where an electrical supply enters and is then further distributed via electrical circuits. A distribution point may be a main distribution point or a sub-main distribution point."^^xsd:string ;
        pset:groups   pset:numberOfOpenings , pset:caseWeight , pset:caseMaterial , pset:numberOfDoors , pset:isMain .

pset:smokeControlFlowrate
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Flowrate of fan while operating as a part of the smoke control system."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumetricFlowRateMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FanTypeSmokeControl ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SmokeControlFlowrate" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:numberOfSlots  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Number of slots."^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirTerminalTypeSlot ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NumberOfSlots" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:internalWidth  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The internal width of the culvert"^^xsd:string ;
        rdfs:range        ifcowl:IfcLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DrainageCulvert ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "InternalWidth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hasVisualIndicator
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication of whether the tank is provided with a visual indicator (set TRUE) that shows the water level in the tank. If no visual indicator is provided then value is set FALSE."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FlowStorageDeviceTank ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasVisualIndicator" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:horizontalBarPitch
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The pitch length of the horizontal bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarPitchOfWall ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HorizontalBarPitch" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:operationTemperatureRange
        a                 spin:MagicProperty , rdf:Property , ifcdoc:P_SINGLEVALUE , ifcdoc:P_BOUNDEDVALUE ;
        rdfs:comment      "Allowable operation ambient air temperature range"^^xsd:string , "Allowable operational range of the ambient air temperature."^^xsd:string , "Allowable operation ambient fluid temperature range."^^xsd:string , "Allowable operation ambient air temperature range."^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CoolingTowerTypeCommon , pset:Pset_AirTerminalBoxTypeCommon , pset:Pset_EvaporativeCoolerTypeCommon , pset:Pset_FanTypeCommon , pset:Pset_FilterTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "OperationTemperatureRange" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:isUsed  a            ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indicates whether the element is being used in a workstation (= TRUE) or not.(= FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SystemFurnitureElementTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsUsed" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:numberOfSections
        a                 spin:MagicProperty , rdf:Property , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Number of vertical sections, measured in the direction of flow."^^xsd:string , "Number of sections used in the construction of the tank\\X\\0A\\X\\0ANote: All sections assumed to be the same size."^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_EnergyConversionDeviceSpaceHeaterSectional , pset:Pset_TankTypeSectional ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NumberOfSections" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:verticalBarPitch
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The pitch length of the vertical bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarPitchOfWall ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "VerticalBarPitch" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:netPlannedArea  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "$"^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NetPlannedArea" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:clearDepth  a        rdf:Property , ifcdoc:P_SINGLEVALUE , spin:MagicProperty ;
        rdfs:comment      "The depth of the formed space in the duct."^^xsd:string , "Clear depth of the object (elevator). It indicates the distance from the inner surface of the elevator door to the opposite surface of the elevator car. \\X\\0AThe shape information is provided in addition to the shape representation and the geometric parameters used within. In cases of inconsistency between the geometric parameters and the shape properties, provided in the attached property, the geometric parameters take precedence."^^xsd:string , "The clear depth of the culvert"^^xsd:string ;
        rdfs:range        ifcowl:IfcLengthMeasure , ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TransportElementElevator , pset:Pset_DistributionChamberElementTypeFormedDuct , pset:Pset_DrainageCulvert ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ClearDepth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:residualFlowingPressure
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The residual flowing pressure in the pipeline at which the discharge flow rate is determined."^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FireSuppressionTerminalTypeSprinkler ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ResidualFlowingPressure" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SanitaryTerminalTypeBidet
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Waste water appliance for washing the excretory organs while sitting astride the bowl (BS6100)"^^xsd:string ;
        pset:groups   pset:nominalLength , pset:bidetMounting , pset:nominalDepth , pset:material , pset:spilloverLevel , pset:nominalWidth , pset:color , pset:drainSize .

pset:ladderTrussBaseBarDiameter
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The nominal diameter of the base bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryLadderTrussConnector ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LadderTrussBaseBarDiameter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_UnitaryEquipmentTypeAirConditioningUnit
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Air conditioning unit equipment type attributes.\\X\\0ANote that these attributes were formely Pset_PackagedACUnit prior to IFC2x2.\\X\\0AHeatingEnergySource attribute deleted in IFC2x2 Pset Addendum: Use IfcEnergyProperties, IfcFuelProperties, etc. instead."^^xsd:string ;
        pset:groups   pset:heatingCapacity , pset:heatingEfficiency , pset:latentCoolingCapacity , pset:outsideAirFlowrate , pset:condenserLeavingTemperature , pset:condenserFlowrate , pset:condenserEnteringTemperature , pset:coolingEfficiency , pset:sensibleCoolingCapacity .

pset:Pset_ValveTypeFaucet
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from BS6100: A small diameter valve, with a free outlet, from which water is drawn."^^xsd:string ;
        pset:groups   pset:faucetTopDescription , pset:finish , pset:faucetFunction , pset:faucetOperation , pset:faucetType .

pset:chamberWidth  a      spin:MagicProperty , rdf:Property , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Width, in the event of the shape being non circular in plan."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DistributionChamberElementTypeInspectionChamber , pset:Pset_DistributionChamberElementTypeValveChamber , pset:Pset_DistributionChamberElementTypeMeterChamber ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ChamberWidth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FurnitureTypeFileCabinet
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A set of specific properties for furniture type file cabinet HISTORY: First issued in IFC Release R1.5. Renamed from Pset_FileCabinet"^^xsd:string ;
        pset:groups   pset:withLock .

pset:columnShoeCasingWidth
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The width of the column shoe casing."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryColumnShoe ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ColumnShoeCasingWidth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SanitaryTerminalTypeWashHandBasin
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Waste water appliance for washing the upper parts of the body."^^xsd:string ;
        pset:groups   pset:drainSize , pset:nominalWidth , pset:washHandBasinMounting , pset:color , pset:material , pset:nominalDepth , pset:washHandBasinType , pset:nominalLength .

pset:articleNumber  a     spin:MagicProperty , ifcdoc:P_SINGLEVALUE , rdf:Property , ifcdoc:P_REFERENCEVALUE ;
        rdfs:comment      "Article number or reference that may be applied to a product according to a standard scheme for article number definition (e.g. UN, EAN)"^^xsd:string , "The article number."^^xsd:string ;
        rdfs:range        ifcowl:IfcIdentifier , ifcowl:IfcClassificationReference ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_LightFixtureTypeCommon , pset:Pset_ManufacturerTypeInformation ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ArticleNumber" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalLengthOrDiameter
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The nominal length or, in the case of a vertical cylindrical tank, the nominal diameter of the tank"^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TankTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalLengthOrDiameter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hasCaps  a           ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Does the inlet connection have protective caps."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FireSuppressionTerminalTypeBreechingInlet ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasCaps" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:isAutomaticFlush
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Boolean value that determines if the cistern is flushed automatically either after each use or periodically (TRUE) or whether manual flushing is required (FALSE)"^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SanitaryTerminalTypeCistern ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsAutomaticFlush" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:coverageArea  a      ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "The floor area that is covered by the sensor (typically measured as a circle whose center is at the location of the sensor)"^^xsd:string , "The area that the sprinkler is designed to protect."^^xsd:string , "The area that is covered by the sensor (typically measured as a circle whose center is at the location of the sensor)"^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SensorTypeSmokeSensor , pset:Pset_SensorTypeCO2Sensor , pset:Pset_SensorTypeHeatSensor , pset:Pset_FireSuppressionTerminalTypeSprinkler ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CoverageArea" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:minimumHeight  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The minimum duct height for rectangular, oval or round duct"^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DuctDesignCriteria ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MinimumHeight" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:worksurfaceArea  a   spin:MagicProperty , ifcdoc:P_SINGLEVALUE , rdf:Property ;
        rdfs:comment      "The value of the work surface area of the desk.."^^xsd:string , "The value of the work surface area of the desk."^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FurnitureTypeTable , pset:Pset_FurnitureTypeDesk ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "WorksurfaceArea" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hasFan  a            ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Terminal box has a fan inside (fan powered box)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirTerminalBoxTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasFan" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:maximumSupportedWeight
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The maximum weight that can be carried by the vibration isolator."^^xsd:string ;
        rdfs:range        ifcowl:IfcMassMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_VibrationIsolatorTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MaximumSupportedWeight" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:appliancePercentLoadToRadiant
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Percent of sensible load to radiant heat."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ThermalLoadDesignCriteria ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AppliancePercentLoadToRadiant" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:batchReference  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The identity of the batch reference from which an occurrence of a product is taken."^^xsd:string ;
        rdfs:range        ifcowl:IfcIdentifier ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ManufacturerOccurrence ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BatchReference" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:highLimitEnable  a   rdf:Property , spin:MagicProperty , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Is high limit validation enabled (TRUE) or not (FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AnalogInput , pset:Pset_AnalogOutput ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HighLimitEnable" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DamperTypeFireSmokeDamper
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Combination Fire and Smoke damper type attributes.\\X\\0ANew Pset in IFC2x2 Pset Addendum."^^xsd:string ;
        pset:groups   pset:controlType .

pset:maximumPressureLoss
        a                 rdf:Property , ifcdoc:P_SINGLEVALUE , spin:MagicProperty ;
        rdfs:comment      "Pressure loss expected across the meter under conditions of maximum flow."^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FlowMeterTypeWaterMeter , pset:Pset_FlowMeterTypeGasMeter ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MaximumPressureLoss" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SensorTypeTemperatureSensor
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A device that senses or detects temperature."^^xsd:string ;
        pset:groups   pset:timeConstant , pset:accuracyOfTemperatureSensor , pset:temperatureSensorRange , pset:temperatureSensorSetPoint , pset:temperatureSensorType .

pset:Pset_ProtectiveDeviceTypeVaristor
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A high voltage surge protection device."^^xsd:string ;
        pset:groups   pset:varistorType .

pset:gasSensorSetPoint
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The gas concentration value to be sensed."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SensorTypeGasSensor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "GasSensorSetPoint" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:areaPerOccupant  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Design occupancy loading for this type of usage assigned to this space."^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceOccupancyRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AreaPerOccupant" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:demandImportanceValue
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Importance of the topic relative to the importance of other topics."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProductRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "DemandImportanceValue" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:thermalTransmittance
        a                 rdf:Property , spin:MagicProperty , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Thermal transmittance coefficient (U-Value) of a material. Here the total thermal transmittance coefficient through the slab (including all materials)."^^xsd:string , "Thermal transmittance coefficient (U-Value) of a material.\\X\\0AHere the total thermal transmittance coefficient through the wall (including all materials)."^^xsd:string , "Thermal transmittance coefficient (U-Value) of a material.\\X\\0AIt applies to the total door construction."^^xsd:string ;
        rdfs:range        ifcowl:IfcThermalTransmittanceMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_WindowCommon , pset:Pset_DoorCommon , pset:Pset_WallCommon , pset:Pset_CurtainWallCommon , pset:Pset_SlabCommon , pset:Pset_PlateCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ThermalTransmittance" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:numberofBlades  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Number of blades."^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DamperTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NumberofBlades" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:heatExchangeSurfaceArea
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Heat exchange surface area associated with U-value."^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CoilTypeHydronic ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HeatExchangeSurfaceArea" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalWaterFlowCooling
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal water flow (refers to nominal cooling capacity)"^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumetricFlowRateMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CooledBeamTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalWaterFlowCooling" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:stroke  a            ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indicates the maximum distance the actuator must traverse."^^xsd:string ;
        rdfs:range        ifcowl:IfcLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ActuatorTypeLinearActuation ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Stroke" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:internalRefrigerantVolume
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Internal volume of condenser (refrigerant side)."^^xsd:string , "Internal volume of evaporator (refrigerant side)."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumeMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_EvaporatorTypeCommon , pset:Pset_CondenserTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "InternalRefrigerantVolume" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ElectricGeneratorTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Defines a particular type of engine that is a machine for converting mechanical energy into electrical energy."^^xsd:string ;
        pset:groups   pset:maximumPowerOutput , pset:startCurrentFactor , pset:electricGeneratorEfficiency .

pset:headroom  a          rdf:Property , spin:MagicProperty , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Actual headroom clearance for the passageway according to the current design. \\X\\0AThe shape information is provided in addition to the shape representation and the geometric parameters used within. In cases of inconsistency between the geometric parameters and the shape properties, provided in the attached property, the geometric parameters take precedence."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_StairFlightCommon , pset:Pset_RampFlightCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Headroom" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hasStrainer  a       spin:MagicProperty , ifcdoc:P_SINGLEVALUE , rdf:Property ;
        rdfs:comment      "Indicates whether the gully trap has a strainer (= TRUE) or not (= FALSE)"^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_WasteTerminalTypeGullyTrap , pset:Pset_WasteTerminalTypeFloorTrap ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasStrainer" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_TubeBundleTypeFinned
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Finned tube bundle type attributes.\\X\\0AContains the attributes related to the fins attached to a tube in a finned tube bundle such as is commonly found in coils."^^xsd:string ;
        pset:groups   pset:height , pset:thickness , pset:spacing , pset:thermalConductivity , pset:length , pset:material , pset:diameter , pset:finCorrugatedType , pset:hasCoating .

pset:bECShapeParameter_c
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter c."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBECCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BECShapeParameter_c" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:leakageClass  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal leakage rating for the system components."^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DuctDesignCriteria ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LeakageClass" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:planningControlStatus
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Label of zoning category or class, or planning control category for the site or facility."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BuildingUseAdjacent , pset:Pset_BuildingUse ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "PlanningControlStatus" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:accuracyOfPressureSensor
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The accuracy of the sensor"^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SensorTypePressureSensor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AccuracyOfPressureSensor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hasOpening  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "indicates whether the panel has an opening (= TRUE) or not (= FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SystemFurnitureElementTypePanel ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasOpening" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:treadLengthAtInnerSide
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Minimum length of treads at the inner side of the winder. \\X\\0AOnly relevant in case of winding flights, for straight flights it is identical with IfcStairFlight.TreadLength. It is a pre-calculated value, in case of inconsistencies, the value derived from the shape representation shall take precedence."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_StairFlightCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "TreadLengthAtInnerSide" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_Asset  a    ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: An asset is a uniquely identifiable element which has a financial value and against which maintenance actions are recorded."^^xsd:string ;
        pset:groups   pset:assetInsuranceType , pset:assetTaxType , pset:assetAccountingType .

pset:Pset_ManufacturerOccurrence
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Defines properties of individual instances of manufactured products that may be given by the manufacturer."^^xsd:string ;
        pset:groups   pset:batchReference , pset:serialNumber , pset:barCode , pset:acquisitionDate .

pset:Pset_CondenserPHistory
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Condenser performance history attributes."^^xsd:string ;
        pset:groups   pset:condenserMeanVoidFraction , pset:compressorCondenserHeatGain , pset:logarithmicMeanTemperatureDifference , pset:exteriorHeatTransferCoefficient , pset:heatRejectionRate , pset:compressorCondenserPressureDrop , pset:condensingTemperature , pset:uAcurves , pset:refrigerantFoulingResistance , pset:interiorHeatTransferCoefficient , pset:waterFoulingResistance .

pset:spaceTemperatureSummerMax
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Maximal temperature of the space or zone for the hot (summer) period, that is required from user/designer view point."^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SpaceTemperatureSummerMax" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalUA  a         ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal UA value."^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CoilTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalUA" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_HumidifierPHistory
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Humidifier performance history attributes.\\X\\0ASound attribute deleted in IFC2x2 Pset Addendum: Use IfcSoundProperties instead."^^xsd:string ;
        pset:groups   pset:airPressureDropCurve , pset:saturationEfficiencyCurve , pset:saturationEfficiency , pset:atmosphericPressure .

pset:riskCause  a         ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "A value that may be assigned to capture the cause or trigger for the risk. An example might be poor fixing"^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_Risk ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "RiskCause" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DoorWindowShadingType
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of the shading component of occurrences of IfcDoor and IfcWindow, used for static (simplified) shading calculations."^^xsd:string ;
        pset:groups   pset:insetShadingCoefficient , pset:internalShadingCoefficient , pset:externalShadingCoefficient .

pset:Pset_FanPHistory
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Fan performance history attributes.\\X\\0ASound attribute deleted in IFC2x2 Pset Addendum: Use IfcSoundProperties instead."^^xsd:string ;
        pset:groups   pset:drivePowerLoss , pset:wheelTipSpeed , pset:fanEfficiency , pset:pressureCurve , pset:fanRotationSpeed , pset:fanPowerRate , pset:dischargePressureLoss , pset:shaftPowerRate , pset:overallEfficiency , pset:efficiencyCurve , pset:dischargeVelocity .

pset:Pset_AirTerminalTypeSquare
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Square air terminal type attributes."^^xsd:string ;
        pset:groups   pset:faceType .

pset:coolingDesignAirflow
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The air flowrate required during the peak cooling conditions."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumetricFlowRateMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalDesign ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CoolingDesignAirflow" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:skirtingBoard  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Label to indicate the material or construction of the skirting board around the space flooring. The label is used for room book information and often displayed in room stamp."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SkirtingBoard" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_AnalogInput
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Defines the characteristics of an analog input."^^xsd:string ;
        pset:groups   pset:notifyType , pset:eventEnable , pset:lowLimitEnable , pset:highLimitEnable , pset:deadband , pset:lowLimit , pset:highLimit .

pset:Pset_ProjectOrderPurchaseOrder
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Defines the requirements for purchase orders in a project."^^xsd:string ;
        pset:groups   pset:shipMethod , pset:isFOB .

pset:isForSullageWater
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indicates if the purpose of the floor trap is to receive sullage water, or if that is amongst its purposes (= TRUE), or not (= FALSE). Note that if TRUE, it is expected that an upstand or kerb will be placed around the floor trap to prevent the ingress of surface water runoff; the provision of the upstand or kerb is not dealt with in this property set."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_WasteTerminalTypeFloorTrap ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsForSullageWater" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:entranceLevel  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication whether this building storey is an entrance level to the building (TRUE), or (FALSE) if otherwise."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BuildingStoreyCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "EntranceLevel" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:name  a              spin:MagicProperty , ifcdoc:P_SINGLEVALUE , rdf:Property ;
        rdfs:comment      "Subject matter for which a value is to be reported."^^xsd:string , "The name of the air side system"^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProductRequirements , pset:Pset_AirSideSystemInformation ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Name" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalSurroundingTemperatureHeating
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal surrounding temperature (refers to nominal heating capacity)"^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CooledBeamTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalSurroundingTemperatureHeating" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:size  a              ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The size of the connection to the valve (or to each connection for faucets, mixing valves, etc.)"^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ValveTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Size" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FlowStorageDeviceTank
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties that relate to an instance of a flow storage device that is typed as a tank. Note that a partial tank may be considered as a compartment within a compartmentalized tank."^^xsd:string ;
        pset:groups   pset:hasVisualIndicator , pset:hasLadder , pset:tankComposition .

pset:isDesignPoint  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indicates whether an instance of IfcDistributionPort is to act as the design point for sprinkler hydraulic calculation (set TRUE) or not (either set FALSE or assumed to be FALSE where an instance of the property set is not assigned to an instance of IfcDistributionPort)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DesignPoint ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsDesignPoint" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:manufacturer  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The organization that manufactured and/or assembled the item."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ManufacturerTypeInformation ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Manufacturer" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:diagonalTrussCrossBarDiameter
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The nominal diameter of the diagonal cross-bars."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryDiagonalTrussConnector ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "DiagonalTrussCrossBarDiameter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_BuildingElementProxyCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all instances of IfcBuildingElementProxy."^^xsd:string ;
        pset:groups   pset:reference .

pset:hasTray  a           ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indicates whether the shower has a separate receptacle that catches the water in a shower and directs it to a waste outlet."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SanitaryTerminalTypeShower ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasTray" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_BuildingUseAdjacent
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Provides information on adjacent buildings and their uses to enable their impact on the building of interest to be determined. Note that for each instance of the property set used, where there is an existence of risk, there will be an instance of the property set Pset_Risk (q.v)"^^xsd:string ;
        pset:groups   pset:narrativeText , pset:planningControlStatus , pset:marketSubCategory , pset:marketCategory .

pset:accuracyOfCO2Sensor
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The accuracy of the sensor"^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SensorTypeCO2Sensor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AccuracyOfCO2Sensor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:normalOperatingTemperature
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Normal operating temperature for the cable, busbar."^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CableSegmentTypeCableSegment ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NormalOperatingTemperature" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:waterStorageCapacity
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Water storage capacity."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumeMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BoilerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "WaterStorageCapacity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:isSwitch  a          ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Identifies if the sensor also functions as a switch at the set point (=TRUE) or not (= FALSE)"^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SensorTypePressureSensor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsSwitch" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:bS8666ShapeParameter_A
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter A."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBS8666Common ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BS8666ShapeParameter_A" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_EvaporativeCoolerPHistory
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Evaporative cooler performance history attributes."^^xsd:string ;
        pset:groups   pset:totalHeatTransferRate , pset:latentHeatTransferRate , pset:waterSumpTemperature , pset:waterPressDropCurve , pset:effectiveness , pset:airPressureDropCurve , pset:effectivenessTable , pset:sensibleHeatTransferRate .

pset:coreSetVertical  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Degree of vertical (in the Y-axis of the LocalPlacement) blade set from the centerline."^^xsd:string ;
        rdfs:range        ifcowl:IfcPlaneAngleMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirTerminalTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CoreSetVertical" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:isOutlookDesirable
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "An indication of whether the outlook is desirable (set TRUE) or not (set FALSE)"^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceOccupancyRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsOutlookDesirable" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ReinforcingBarBendingsBECCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties expressing the bending information of non-prestressed reinforcing bars. The properties in this Pset are defined according to the local Finnish BEC standard with minor adjustements (only bar bending information is included). The bending shape property definitions apply to both reinforcing bars (IfcReinforcingBar) and reinforcing meshes (IfcReinforcingMesh). It is presumed that a single standard for defining the bar bending is used throughout the project and that this standard is referenced from the IfcProject object through the IfcDocumentReference mechanism."^^xsd:string ;
        pset:groups   pset:bECShapeParameter_d , pset:bECShapeParameter_k , pset:bECBendingParameter_v , pset:bECShapeParameter_b , pset:bECBendingParameter_u1 , pset:bECShapeParameter_i , pset:bECShapeParameter_h , pset:bECRollerDiameter , pset:bECCuttingLength , pset:bECShapeParameter_c , pset:bECShapeAid_x , pset:bECBarShapeCode , pset:bECShapeParameter_f , pset:bECShapeAid_y , pset:bECBendingParameter_u , pset:bECShapeParameter_a , pset:bECBendingParameter_v1 , pset:bECShapeParameter_g , pset:bECShapeParameter_j , pset:bECShapeParameter_l , pset:bECShapeParameter_e .

pset:span  a              spin:MagicProperty , rdf:Property , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Clear span for this object.\\X\\0AThe shape information is provided in addition to the shape representation and the geometric parameters used within. In cases of inconsistency between the geometric parameters and the shape properties, provided in the attached property, the geometric parameters take precedence."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_MemberCommon , pset:Pset_BeamCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Span" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FlowMeterTypeWaterMeter
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Device that measures, indicates and sometimes records, the volume of water that passes through it without interrupting the flow."^^xsd:string ;
        pset:groups   pset:backflowPreventerType , pset:maximumPressureLoss , pset:maximumFlowRate , pset:connectionSize , pset:type .

pset:wireLoopBasePlateThickness
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The thickness of the base plate."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryWireLoop ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "WireLoopBasePlateThickness" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:securityRequirement
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "General description of the security requirement for the space (in addition to the function requirement)"^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceProgramCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SecurityRequirement" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:minimumPartLoadRatio
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Minimum part load ratio as a fraction of nominal capacity."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CompressorTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MinimumPartLoadRatio" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:verticalSpacing  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Vertical spacing between tubes in the tube bundle."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TubeBundleTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "VerticalSpacing" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:iSOCD3766ShapeParameter_R
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter R. Used for bending radius."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsISOCD3766Common ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ISOCD3766ShapeParameter_R" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:vacancyRateInCategoryFuture
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Percentage of vacancy found in the particular category expected in the future"^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BuildingUse ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "VacancyRateInCategoryFuture" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:heatingTemperatureDelta
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Heating temperature difference for calculating space air flow rates"^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirSideSystemInformation ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HeatingTemperatureDelta" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:pressureRegulatorSetting
        a                 ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "Pressure that is automatically maintained in the tank."^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TankTypeExpansion , pset:Pset_TankTypePressureVessel ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "PressureRegulatorSetting" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:outsideDiameter  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Actual outside diameter of the tube in the tube bundle."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TubeBundleTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "OutsideDiameter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:fragilityRating  a   spin:MagicProperty , ifcdoc:P_SINGLEVALUE , rdf:Property ;
        rdfs:comment      "Indication on the fragility of the covering (e.g., under fire conditions).  It is given according to the national building code that might provide a classification for fragility."^^xsd:string , "The level of fragility of the ceiling.\\X\\0AIt is giving according to the national building code."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CoveringCommon , pset:Pset_CoveringCeiling ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FragilityRating" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:columnShoeBasePlateThickness
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The thickness of the column shoe base plate."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryColumnShoe ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ColumnShoeBasePlateThickness" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:areaDrained  a       ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The area measure enclosed within the catchment"^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DrainageCatchment ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AreaDrained" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:permeability  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Ratio of the permeability of the ceiling.\\X\\0AThe ration can be used to indicate an open ceiling (that enables identification of whether ceiling construction should be considered as impeding distribution of sprinkler water, light etc. from installations within the ceiling area) ."^^xsd:string ;
        rdfs:range        ifcowl:IfcNormalisedRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CoveringCeiling ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Permeability" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:treadLength  a       ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Horizontal distance from the front of the thread to the front of the next tread. \\X\\0AThe tread length is supposed to be equal for all steps of the stair or stair flight at the walking line."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_StairFlightCommon , pset:Pset_StairCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "TreadLength" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:coilWidth  a         ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Width of coil"^^xsd:string ;
        rdfs:range        ifcowl:IfcLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CooledBeamTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CoilWidth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DiscreteAccessoryFixingSocket
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to fixing sockets."^^xsd:string ;
        pset:groups   pset:fixingSocketThreadLength , pset:fixingSocketThreadDiameter , pset:fixingSocketHeight , pset:fixingSocketTypeReference .

pset:primarySurfaceArea
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Primary heat transfer surface area of the tubes and headers."^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CoilTypeHydronic ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "PrimarySurfaceArea" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hasLiner  a          spin:MagicProperty , ifcdoc:P_SINGLEVALUE , rdf:Property ;
        rdfs:comment      "TRUE if the fitting has interior duct insulating lining, FALSE if it does not."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FlowFittingDuctFitting , pset:Pset_FlowSegmentDuctSegment ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasLiner" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_Permit  a   ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A permit is a document that allows permission to gain access to an area or carry out work in a situation where security or other access restrictions apply."^^xsd:string ;
        pset:groups   pset:specialRequirements , pset:endTime , pset:startTime , pset:permitDuration , pset:startDate , pset:escortRequirement , pset:permitType .

pset:yearOfConstruction
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Year of construction of this building, including expected year of completion."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BuildingCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "YearOfConstruction" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FlowMovingDeviceFan
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Fan occurrence attributes attached to an instance of IfcFlowMovingDevice."^^xsd:string ;
        pset:groups   pset:impellerDiameter , pset:fractionOfMotorHeatToAirStream , pset:fanMountingType , pset:motorPosition , pset:coilPosition , pset:applicationOfFan , pset:dischargeType .

pset:propertyName  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Addressing details of the property as stated within the agreement"^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_PropertyAgreement ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "PropertyName" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:totalHeatGain  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The total amount of heat or energy gained by the space at the time of the spaces peak cooling conditions."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalDesign ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "TotalHeatGain" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:reliefValveSetting
        a                 rdf:Property , ifcdoc:P_SINGLEVALUE , spin:MagicProperty ;
        rdfs:comment      "Pressure at which the relief valve activates."^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TankTypePressureVessel , pset:Pset_TankTypeExpansion ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ReliefValveSetting" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:startCurrentFactor
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "IEC. Start current factor defines how large the peek starting current will become on the engine. StartCurrentFactor is multiplied to NominalCurrent and we get the start current."^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ElectricGeneratorTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "StartCurrentFactor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ActuatorTypeLinearActuation
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Characteristics of linear actuation of an actuator\\X\\0AHistory: Replaces Pset_LinearActuator"^^xsd:string ;
        pset:groups   pset:stroke , pset:force .

pset:nominalFlowrate  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal fluid flow rate through the filter."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumetricFlowRateMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FilterTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalFlowrate" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:foulingFactor  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Fouling factor of the tubes in the tube bundle."^^xsd:string ;
        rdfs:range        ifcowl:IfcThermalResistanceMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TubeBundleTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FoulingFactor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DrainageCulvert
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Covered channel or large pipe that forms a watercourse below ground level, usually under a road or railway (BS6100). Used as a non type driven property set in conjunction with an instance of IfcSystem that is classified as a culvert."^^xsd:string ;
        pset:groups   pset:clearDepth , pset:internalWidth .

pset:nominalSumpWidth
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal or quoted length measured along the y-axis in the local coordinate system of the sump."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_WasteTerminalTypeGullySump ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalSumpWidth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:pressureRating  a    rdf:Property , ifcdoc:P_SINGLEVALUE , spin:MagicProperty ;
        rdfs:comment      "Nominal pressure rating of the boiler as rated by ASME Boiler and Pressure Vessel Code Section IV, Rules for Construction of Heating Boilers, and Section I, Rules for Construction of Power Boilers"^^xsd:string , "Maximum pressure that the hydrant is manufactured to withstand."^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BoilerTypeCommon , pset:Pset_FireSuppressionTerminalTypeFireHydrant ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "PressureRating" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:accuracyOfFireSensor
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The accuracy of the sensor"^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SensorTypeFireSensor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AccuracyOfFireSensor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ChillerTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Chiller type common attributes."^^xsd:string ;
        pset:groups   pset:nominalPowerConsumption , pset:nominalHeatRejectionRate , pset:nominalEvaporatingTemperature , pset:nominalCondensingTemperature , pset:nominalEfficiency , pset:nominalCapacity .

pset:Pset_PipeConnectionFlanged
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: This property set is used to define the specifics of a flanged pipe connection used between occurrences of pipe segments and fittings."^^xsd:string ;
        pset:groups   pset:numberOfBoltholes , pset:boreSize , pset:boltSize , pset:flangeStandard , pset:material , pset:boltholePitch , pset:flangeTable , pset:flangeThickness , pset:flangeDiameter .

pset:Pset_SpaceThermalRequirements
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties related to the comfort requirements for thermal and other  thermal related performances of spaces that apply to the occurrences of IfcSpace or IfcZone. This includes the required design temperature, humidity, and air conditioning."^^xsd:string ;
        pset:groups   pset:spaceTemperatureMax , pset:spaceHumidityWinter , pset:spaceHumidity , pset:spaceTemperatureSummerMax , pset:naturalVentilationRate , pset:spaceTemperatureWinterMax , pset:airConditioningCentral , pset:spaceHumiditySummer , pset:spaceTemperatureSummerMin , pset:airConditioning , pset:spaceTemperatureWinterMin , pset:discontinuedHeating , pset:naturalVentilation , pset:mechanicalVentilationRate , pset:spaceTemperatureMin .

pset:concealedFlooring
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication whether this space is declared to be a concealed flooring (TRUE) or not (FALSE). A concealed flooring is normally meant to be the space beneath a raised floor."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ConcealedFlooring" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:thermalConductivity
        a                 rdf:Property , ifcdoc:P_SINGLEVALUE , spin:MagicProperty ;
        rdfs:comment      "The thermal conductivity of the fin."^^xsd:string , "The thermal conductivity of the tube."^^xsd:string ;
        rdfs:range        ifcowl:IfcThermalConductivityMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TubeBundleTypeCommon , pset:Pset_TubeBundleTypeFinned ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ThermalConductivity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:floorCovering  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Label to indicate the material or finish of the space flooring. The label is used for room book information and often displayed in room stamp."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FloorCovering" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_WasteTerminalTypeWasteTrap
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Pipe fitting, set adjacent to a sanitary terminal, that retains liquid to prevent the passage of foul air."^^xsd:string ;
        pset:groups   pset:inletConnectionSize , pset:outletConnectionSize , pset:wasteTrapType .

pset:isIlluminated  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "An indication of whether there is an illuminated indicator to show that the switch is on (=TRUE) or not (= FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SwitchingDeviceTypeToggleSwitch ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsIlluminated" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:internalShadingCoefficient
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Radiation transmission coefficient of the inside shading device, symbol \"b-value\". It is a value without unit."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DoorWindowShadingType ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "InternalShadingCoefficient" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FanTypeSmokeControl
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Smoke control attributes of a fan participating as part of a smoke control system."^^xsd:string ;
        pset:groups   pset:smokeControlFlowrate , pset:maximumDesignTemperature , pset:operationalCriteria .

pset:heatingWetBulb  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Outside wet bulb temperature for heating design"^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_OutsideDesignCriteria ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HeatingWetBulb" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_OpeningElementCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all instances of IfcOpeningElement."^^xsd:string ;
        pset:groups   pset:parallelJambs , pset:protectedOpening , pset:fireExit , pset:purpose , pset:reference .

pset:flangeTable  a       ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Designation of the standard table to which the flange conforms"^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_PipeConnectionFlanged ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FlangeTable" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:effectiveArea  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Effective discharge area of the air terminal."^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirTerminalTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "EffectiveArea" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:isPermanentID  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indicates whether the identity assigned to a building is permanent (= TRUE) or temporary (=FALSE)"^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BuildingCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsPermanentID" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:pressureClass  a     rdf:Property , spin:MagicProperty , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Pressure classification as defined by the authority having jurisdiction (e.g., SMACNA, etc.)."^^xsd:string , "The test or rated pressure classification of the fitting."^^xsd:string , "Nominal pressure rating of the system components. (Data type = PressureMeasure)"^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DuctDesignCriteria , pset:Pset_DuctFittingTypeCommon , pset:Pset_PipeFittingTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "PressureClass" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_TubeBundleTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Tube bundle type common attributes."^^xsd:string ;
        pset:groups   pset:thermalConductivity , pset:verticalSpacing , pset:foulingFactor , pset:outsideDiameter , pset:staggeredRowSpacing , pset:numberOfCircuits , pset:horizontalSpacing , pset:insideDiameter , pset:material , pset:length , pset:volume , pset:inLineRowSpacing , pset:numberOfRows , pset:nominalDiameter , pset:hasTurbulator .

pset:maximumSpaceSensibleLoad
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Maximum or Peak sensible thermal load contributed to return air plenum by the light fixture."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_LightFixtureTypeThermal ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MaximumSpaceSensibleLoad" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nosingLength  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Horizontal distance from the front of the tread to the riser underneath. It is the overhang of the tread."^^xsd:string ;
        rdfs:range        ifcowl:IfcLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_StairFlightCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NosingLength" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ProjectOrderMaintenanceWorkOrder
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A MaintenanceWorkOrder is a detailed description of maintenance work that is to be performed. Note that the Scheduled Frequency property of the maintenance work order is used when the order is required as an instance of a scheduled work order."^^xsd:string ;
        pset:groups   pset:ifNotAccomplished , pset:workTypeRequested , pset:productDescription , pset:faultPriorityType , pset:maintenaceType , pset:contractualType , pset:scheduledFrequency , pset:shortJobDescription , pset:locationPriorityType , pset:longJobDescription .

pset:Pset_EnergyConversionDeviceSpaceHeaterPanel
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Panel space heater type occurrence attributes."^^xsd:string ;
        pset:groups   pset:numberOfPanels .

pset:cornerFixingPlateThickness
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The thickness of the L-shaped corner plate."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryCornerFixingPlate ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CornerFixingPlateThickness" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:sensibleLoadToRadiant
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Percent of sensible thermal load to radiant heat."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_LightFixtureTypeThermal ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SensibleLoadToRadiant" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ReinforcementBarPitchOfContinuousFooting
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Reinforcement Concrete parameter [ST-2]: The pitch length information of reinforcement  bar with the continuous footing."^^xsd:string ;
        pset:groups   pset:crossingLowerBarPitch , pset:crossingUpperBarPitch , pset:reference , pset:description .

pset:xDirectionTieHoopBarPitch
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The X direction pitch length of the tie hoop."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarPitchOfColumn ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "XDirectionTieHoopBarPitch" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:sprinklerProtectionAutomatic
        a                 spin:MagicProperty , rdf:Property , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Indication whether this object has an automatic sprinkler protection (TRUE) or not (FALSE).\\X\\0AIt should only be given, if the property \"SprinklerProtection\" is set to TRUE."^^xsd:string , "Indication whether the space has an automatic sprinkler protection (TRUE) or not (FALSE).\\X\\0AIt should only be given, if the property \"SprinklerProtection\" is set to TRUE."^^xsd:string , "Indication whether this object has an automatic sprinkler protection (true) or not (false).\\X\\0AIt should only be given, if the property \"SprinklerProtection\" is set to TRUE."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BuildingCommon , pset:Pset_BuildingStoreyCommon , pset:Pset_SpaceFireSafetyRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SprinklerProtectionAutomatic" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalRotationSpeed
        a                 rdf:Property , ifcdoc:P_SINGLEVALUE , spin:MagicProperty ;
        rdfs:comment      "Nominal fan wheel speed."^^xsd:string , "Pump rotational speed under nominal conditions."^^xsd:string ;
        rdfs:range        ifcowl:IfcRotationalFrequencyMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_PumpTypeCommon , pset:Pset_FanTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalRotationSpeed" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:category  a          spin:MagicProperty , ifcdoc:P_SINGLEVALUE , rdf:Property ;
        rdfs:comment      "A reference to a classification of the degree of aggregation or granularity of topic data such as regional, local etc."^^xsd:string , "Designation of the category into which the actors in the population belong."^^xsd:string , "Category of space usage or utilization of the area. It is defined according to the presiding national building code."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceCommon , pset:Pset_ActorCommon , pset:Pset_ProductRequirements , pset:Pset_ZoneCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Category" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:idealShaftPower  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Compressor shaft power under ideal conditions."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CompressorTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IdealShaftPower" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ReinforcingBarBendingsISOCD3766Common
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties expressing the bending information of non-prestressed reinforcing bars. The properties in this Pset are largely defined according to ISO/CD 3766 with some minor changes in how the hooks are defined (explicit angle measures instead of coded parameters). It is presumed that a single standard for defining the bar bending is used throughout the project and that this standard is referenced from the IfcProject object through the IfcDocumentReference mechanism. Note: This standard is still under development and the Pset will be changed accordingly if so required."^^xsd:string ;
        pset:groups   pset:iSOCD3766BendingStartHook , pset:iSOCD3766ShapeParameter_c , pset:iSOCD3766ShapeParameter_d , pset:iSOCD3766ShapeParameter_a , pset:iSOCD3766ShapeParameter_e , pset:iSOCD3766ShapeCode , pset:iSOCD3766BendingEndHook , pset:iSOCD3766ShapeParameter_R , pset:iSOCD3766ShapeParameter_b .

pset:Pset_BuildingStoreyCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all instances of IfcBuildingStorey. Please note that several building attributes are handled directly at the IfcBuildingStorey instance, the building storey number (or short name) by IfcBuildingStorey.Name, the building storey name (or long name) by IfcBuildingStorey.LongName, and the description (or comments) by IfcBuildingStorey.Description. Actual building storey quantities, like building storey perimeter, building storey area and building storey volume are provided by IfcElementQuantities, and the building storey classification according to national building code by IfcClassificationReference."^^xsd:string ;
        pset:groups   pset:netAreaPlanned , pset:grossAreaPlanned , pset:sprinklerProtectionAutomatic , pset:sprinklerProtection , pset:aboveGround , pset:entranceLevel .

pset:rangeAngle  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indicates the maximum rotation the actuator must traverse."^^xsd:string ;
        rdfs:range        ifcowl:IfcPlaneAngleMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ActuatorTypeRotationalActuation ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "RangeAngle" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:faceArea  a          ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Face area open to the airstream."^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DamperTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FaceArea" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalHeatingCapacity
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal heating capacity"^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CooledBeamTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalHeatingCapacity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:airPressurization
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication whether the space is required to have pressurized air (TRUE) or not (FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceFireSafetyRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AirPressurization" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:fireExit  a          ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication whether this object is designed to serve as an exit in the case of fire (TRUE) or not (FALSE).\\X\\0AHere it defines an exit door in accordance to the national building code."^^xsd:string , "Indication whether this object is designed to serve as an exit in the case of fire (TRUE) or not (FALSE).\\X\\0AHere it defines an exit ramp in accordance to the national building code."^^xsd:string , "Indication whether this object is designed to serve as an exit in the case of fire (TRUE) or not (FALSE).\\X\\0AHere it defines an exit stair in accordance to the national building code."^^xsd:string , "Indication whether this object is designed to serve as an exit in the case of fire (TRUE) or not (FALSE).\\X\\0AHere whether the transport element (in case of e.g., a lift) is designed to serve as a fire exit, e.g., for fire escape purposes."^^xsd:string , "Indication whether this object is designed to serve as an exit in the case of fire (TRUE) or not (FALSE).\\X\\0AHere whether the space (in case of e.g., a corridor) is designed to serve as an exit space, e.g., for fire escape purposes."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_StairCommon , pset:Pset_RampCommon , pset:Pset_TransportElementCommon , pset:Pset_DoorCommon , pset:Pset_SpaceFireSafetyRequirements , pset:Pset_OpeningElementCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FireExit" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:frictionLoss  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The pressure loss due to friction per unit length. (Data type = PressureMeasure/LengthMeasure)"^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DuctDesignCriteria ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FrictionLoss" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:bandWidth  a         ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Dead band for controller"^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ControllerTypeTwoPosition ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BandWidth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:totalThickness  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Thickness of the covering, The thickness information is provided in addition to the shape representation and the geometric parameters used within. In cases of inconsistency between the geometric parameters and the shape properties, provided in the attached property, the geometric parameters take precedence."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CoveringCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "TotalThickness" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FilterPHistory
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Filter performance history attributes."^^xsd:string ;
        pset:groups   pset:particleMassHolding , pset:weightedEfficiency , pset:countedEfficiency .

pset:Pset_FlowSegmentDuctSegment
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Duct segment occurrence attributes attached to an instance of IfcFlowSegment."^^xsd:string ;
        pset:groups   pset:color , pset:length , pset:hasLiner , pset:interiorRoughnessCoefficient , pset:materialThickness .

pset:Pset_CableCarrierSegmentTypeConduitSegment
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: An enclosed tubular carrier segment through which cables are pulled."^^xsd:string ;
        pset:groups   pset:isRigid , pset:conduitShapeType , pset:nominalHeight , pset:nominalWidth , pset:nominalLength .

pset:grossAreaPlanned
        a                 ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "Total planned area for the building storey. Used for programming the building storey."^^xsd:string , "Total planned area for the project.  Used for programming the project"^^xsd:string , "Total planned gross area for the space. Used for programming the space."^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ZoneCommon , pset:Pset_BuildingStoreyCommon , pset:Pset_ProjectCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "GrossAreaPlanned" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FireSuppressionTerminalTypeFireHydrant
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Device, fitted to a pipe, through which a temporary supply of water may be provided (BS6100 330 6107)\\X\\0A\\X\\0AFor further details on fire hydrants, see www.firehydrant.org"^^xsd:string ;
        pset:groups   pset:numberOfHoseConnections , pset:capColor , pset:flowClass , pset:pumperConnectionSize , pset:dischargeFlowRate , pset:hoseConnectionSize , pset:fireHydrantType , pset:bodyColor , pset:pressureRating , pset:waterIsPotable .

pset:Pset_ValveTypeFlushing
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Valve that flushes a predetermined quantity of water to cleanse a WC, urinal or slop hopper.\\X\\0ANote that a flushing valve is constrained to have a 2 port  pattern."^^xsd:string ;
        pset:groups   pset:isHighPressure , pset:hasIntegralShutOffDevice , pset:flushingRate .

pset:maximumPlenumSensibleLoad
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Maximum or Peak sensible thermal load contributed to the conditioned space by the light fixture."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_LightFixtureTypeThermal ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MaximumPlenumSensibleLoad" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:numberOfStates  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Number of states for the multi-state Input."^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_MultiStateOutput , pset:Pset_MultiStateInput ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NumberOfStates" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:bECBendingParameter_u
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar bending angle parameter u."^^xsd:string ;
        rdfs:range        ifcowl:IfcPlaneAngleMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBECCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BECBendingParameter_u" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:accuracyOfSmokeSensor
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The accuracy of the sensor"^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SensorTypeSmokeSensor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AccuracyOfSmokeSensor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:bECShapeParameter_d
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter d."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBECCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BECShapeParameter_d" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ProjectOrderChangeOrder
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A change order is an instruction to make a change to a product or work being undertake. Note that the change order status is defined in the same way as a work order status since a change order implies a work requirement."^^xsd:string ;
        pset:groups   pset:budgetSource , pset:reasonForChange , pset:changeDescription .

pset:Pset_ReinforcingBarBendingsBS8666Common
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties expressing the bending information of non-prestressed reinforcing bars. The properties in this Pset are largely defined according to BS8666. It is presumed that a single standard for defining the bar bending is used throughout the project and that this standard is referenced from the IfcProject object through the IfcDocumentReference mechanism."^^xsd:string ;
        pset:groups   pset:bS8666ShapeParameter_r , pset:bS8666ShapeParameter_E , pset:bS8666ShapeParameter_D , pset:bS8666ShapeParameter_C , pset:bS8666ShapeParameter_B , pset:bS8666ShapeParameter_A , pset:bS8666ShapeCode .

pset:reference  a         ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Reference ID for this specific instance (e.g.  WWS/VS1/400/001, which indicates the occurrence belongs to system WWS, subsystems VSI/400, and has the component number 001)"^^xsd:string , "Reference ID for this specified type of quantity, e.g. linking back to a macro name, etc."^^xsd:string , "A descriptive label for the general reinforcement type."^^xsd:string , "Reference ID for this specified type in this project (e.g. type A-1)"^^xsd:string ;
        rdfs:range        ifcowl:IfcIdentifier , ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarPitchOfWall , pset:Pset_QuantityTakeOff , pset:Pset_SpaceCommon , pset:Pset_DistributionFlowElementCommon , pset:Pset_ReinforcementBarCountOfIndependentFooting , pset:Pset_StairCommon , pset:Pset_RoofCommon , pset:Pset_RampFlightCommon , pset:Pset_DoorCommon , pset:Pset_ZoneCommon , pset:Pset_TransportElementCommon , pset:Pset_PlateCommon , pset:Pset_RampCommon , pset:Pset_BuildingElementProxyCommon , pset:Pset_CurtainWallCommon , pset:Pset_RailingCommon , pset:Pset_MemberCommon , pset:Pset_ReinforcementBarPitchOfSlab , pset:Pset_BeamCommon , pset:Pset_ReinforcementBarPitchOfBeam , pset:Pset_StairFlightCommon , pset:Pset_ColumnCommon , pset:Pset_WallCommon , pset:Pset_OpeningElementCommon , pset:Pset_ReinforcementBarPitchOfContinuousFooting , pset:Pset_CoveringCommon , pset:Pset_ReinforcementBarPitchOfColumn , pset:Pset_WindowCommon , pset:Pset_SlabCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Reference" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:isNormallyOpen  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "If TRUE, the valve is normally open. If FALSE is is normally closed."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ValveTypeIsolating ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsNormallyOpen" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:deadband  a          ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "The deadband value for the analog output."^^xsd:string , "The deadband value for the analog input."^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AnalogInput , pset:Pset_AnalogOutput ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Deadband" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ElectricHeaterTypeElectricalPointHeater
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI:  An electrical device that outputs heat as a total quantity from a point or restricted area that can be considered as a point."^^xsd:string ;
        pset:groups   pset:heatOutput .

pset:longInsideEndLowerBarPitch
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The pitch length of the long inside end lower bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarPitchOfSlab ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LongInsideEndLowerBarPitch" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:faceSurfaceArea  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Face area of filter frame."^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FilterTypeAirParticleFilter ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FaceSurfaceArea" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_WasteTerminalTypePetrolInterceptor
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Two or more chambers with inlet and outlet pipes arranged to allow petrol/gasoline collected on the surface of water drained into them to evaporate through ventilating pipes."^^xsd:string ;
        pset:groups   pset:coverLength , pset:coverWidth , pset:nominalBodyWidth , pset:nominalBodyLength , pset:outletConnectionSize , pset:nominalBodyDepth , pset:inletConnectionSize , pset:coverMaterial , pset:ventilatingPipeSize , pset:bodyMaterial .

pset:Pset_GasTerminalTypeGasBurner
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A complete unit on which or in which a flame is maintained through the provision of a gas supply."^^xsd:string ;
        pset:groups   pset:gasBurnerType .

pset:condenserFlowrate
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Flow rate of fluid through the condenser per manufacturers listing (if available)"^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumetricFlowRateMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_UnitaryEquipmentTypeAirConditioningUnit ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CondenserFlowrate" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DuctSegmentPHistory
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Duct segment performance history common attributes."^^xsd:string ;
        pset:groups   pset:fluidFlowLeakage , pset:leakageCurve , pset:atmosphericPressure , pset:lossCoefficient .

pset:columnShoeCasingDepth
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The depth of the column shoe casing."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryColumnShoe ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ColumnShoeCasingDepth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SanitaryTerminalTypeCistern
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A water storage unit attached to a sanitary terminal that is fitted with a device, operated automatically or by the user, that discharges water to cleanse a water closet (toilet) pan, urinal or slop hopper. (BS6100 330 5008)"^^xsd:string ;
        pset:groups   pset:isAutomaticFlush , pset:isSingleFlush , pset:cisternHeight , pset:flushRate , pset:cisternCapacity , pset:flushType , pset:cisternColor , pset:cisternMaterial .

pset:lightSensorSetPoint
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The illuminance value to be sensed."^^xsd:string ;
        rdfs:range        ifcowl:IfcIlluminanceMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SensorTypeLightSensor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LightSensorSetPoint" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_TankTypeExpansion
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Common attributes of an expansion type tank."^^xsd:string ;
        pset:groups   pset:reliefValveSetting , pset:pressureRegulatorSetting , pset:chargePressure .

pset:bS8666ShapeParameter_B
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter B."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBS8666Common ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BS8666ShapeParameter_B" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:ladderTrussLength
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The overall length of the truss connector."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryLadderTrussConnector ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LadderTrussLength" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hasBuiltInAlarm  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indicates whether the smoke sensor is included as an element within a smoke alarm/sensor unit (TRUE) or not (FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SensorTypeSmokeSensor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasBuiltInAlarm" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:fittingLossFactor
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "A factor that determines the pressure loss due to friction through the fitting."^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_PipeFittingTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FittingLossFactor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:anchorBoltLength
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The length of the anchor bolt."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryAnchorBolt ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AnchorBoltLength" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:description  a       ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Specific description of this type of furniture."^^xsd:string , "The description of the air side system."^^xsd:string , "Description of the reinforcement."^^xsd:string ;
        rdfs:range        ifcowl:IfcText , ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirSideSystemInformation , pset:Pset_ReinforcementBarCountOfIndependentFooting , pset:Pset_FurnitureTypeCommon , pset:Pset_ReinforcementBarPitchOfSlab , pset:Pset_ReinforcementBarPitchOfContinuousFooting , pset:Pset_ReinforcementBarPitchOfBeam , pset:Pset_ReinforcementBarPitchOfWall , pset:Pset_ReinforcementBarPitchOfColumn ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Description" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:isWired  a           ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication whether the glass includes a contained wire mesh to prevent break-in (TRUE) or not (FALSE)"^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DoorWindowGlazingType ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsWired" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:treadLengthAtOffset
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Length of treads at a given offset.\\X\\0AWalking line position is given by the WalkingLineOffset. The resulting value should normally be identical with TreadLength, it may be given in addition, if the walking line offset for building code calculations is different from that used in design."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_StairFlightCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "TreadLengthAtOffset" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:switchingDuty  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The maximum number of operations for the device at the rated making and breaking capacity."^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProtectiveDeviceTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SwitchingDuty" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:accuracyOfGasSensor
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The accuracy of the sensor"^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SensorTypeGasSensor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AccuracyOfGasSensor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:heatingDesignAirflow
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The air flowrate required during the peak heating conditions, but could also be determined by minimum ventilation requirement or minimum air change requirements."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumetricFlowRateMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalDesign ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HeatingDesignAirflow" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:maximumOutletPressure
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Maximum steam outlet pressure."^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BoilerTypeSteam ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MaximumOutletPressure" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:wetCoilFraction  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Fraction of coil surface area that is wet (0-1)."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CoilTypeHydronic ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "WetCoilFraction" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:conditionTermination
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Condition of property required on termination of the agreement e.g. cold shell, warm lit shell, broom clean, turn-key"^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_PropertyAgreement ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ConditionTermination" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:wireDiameter  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The nominal diameter of the wire."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryWireLoop ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "WireDiameter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:heatExchangeArea
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Heat exchange area."^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_EvaporativeCoolerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HeatExchangeArea" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:volume  a            ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Total volume of fluid in the tubes and their headers."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumeMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TubeBundleTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Volume" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:bS8666ShapeCode  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The bending type code for the specific bending shape as defined in the BS8666 standard. Note: depending on the standardized shape different combinations of following parameters A...E and r are used."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBS8666Common ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BS8666ShapeCode" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:edgeFixingPlateFlangeWidthInPlaneZ
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The flange width of the L-shaped edge plate in plane Z."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryEdgeFixingPlate ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "EdgeFixingPlateFlangeWidthInPlaneZ" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:averageVisibleTransmittance
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Overall or average ratio of the visible spectral flux transmitted through a body to that incident upon it."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ElementShading ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AverageVisibleTransmittance" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:lightingLoadIntensity
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Average lighting load intensity in the space per unit area (PowerMeasure/IfcAreaMeasure)"^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ThermalLoadDesignCriteria ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LightingLoadIntensity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:signalOffset  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Offset constant added to modfied signal"^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ControllerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SignalOffset" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_CompressorPHistory
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Compressor performance history attributes."^^xsd:string ;
        pset:groups   pset:inputPower , pset:compressorCapacity , pset:compressorTotalEfficiency , pset:frictionHeatGain , pset:shaftPower , pset:coefficientOfPerformance , pset:compressionEfficiency , pset:isentropicEfficiency , pset:compressorTotalHeatGain , pset:lubricantPumpHeatGain , pset:energyEfficiencyRatio , pset:fullLoadRatioCurve , pset:volumetricEfficiency , pset:mechanicalEfficiency .

pset:standardUsed  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The electrical standard used as a reference when preparing data for the device."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProtectiveDeviceTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "StandardUsed" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:accessCoverLoadRating
        a                 spin:MagicProperty , rdf:Property , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "The load rating of the access cover (which may be a value or an alphanumerically defined class rating)"^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DistributionChamberElementTypeInspectionChamber , pset:Pset_DistributionChamberElementTypeFormedDuct , pset:Pset_DistributionChamberElementTypeManhole ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AccessCoverLoadRating" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:effectiveCapacity
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The effective or actual volumetric capacity of the tank."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumeMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TankTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "EffectiveCapacity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalSurroundingHumidityCooling
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal surrounding humidity (refers to nominal cooling capacity)"^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CooledBeamTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalSurroundingHumidityCooling" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DistributionChamberElementTypeMeterChamber
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Chamber that houses a meter(s) (definition modified from BS6100 250 6224)."^^xsd:string ;
        pset:groups   pset:accessCoverMaterial , pset:baseThickness , pset:baseMaterial , pset:wallThickness , pset:wallMaterial , pset:chamberWidth , pset:chamberLengthOrRadius .

pset:Pset_StairFlightCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all occurrences of IfcStairFlight."^^xsd:string ;
        pset:groups   pset:treadLength , pset:headroom , pset:riserHeight , pset:reference , pset:treadLengthAtInnerSide , pset:nosingLength , pset:treadLengthAtOffset , pset:walkingLineOffset , pset:numberOfTreads , pset:numberOfRiser , pset:waistThickness .

pset:thermalTransmittanceSummer
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Thermal transmittance coefficient (U-Value) of a material.\\X\\0ASummer thermal transmittance coefficient of the glazing only, often referred to as (U-value)"^^xsd:string ;
        rdfs:range        ifcowl:IfcThermalTransmittanceMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DoorWindowGlazingType ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ThermalTransmittanceSummer" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_RampCommon  a  ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all occurrences of IfcRamp."^^xsd:string ;
        pset:groups   pset:requiredSlope , pset:handicapAccessible , pset:requiredHeadroom , pset:fireRating , pset:reference , pset:fireExit , pset:hasNonSkidSurface , pset:isExternal .

pset:nominalWaterFlowHeating
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal water flow (refers to nominal heating capacity)"^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumetricFlowRateMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CooledBeamTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalWaterFlowHeating" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:outletDiameter  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The outlet diameter of the breeching inlet."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FireSuppressionTerminalTypeBreechingInlet ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "OutletDiameter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hoseDiameter  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Notional diameter (bore) of the hose."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FireSuppressionTerminalTypeHoseReel ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HoseDiameter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ChillerPHistory
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Chiller performance history attributes."^^xsd:string ;
        pset:groups   pset:fullLoadRatioCurve , pset:coefficientOfPerformanceCurve , pset:capacityCurve , pset:coefficientOfPerformance , pset:energyEfficiencyRatio , pset:capacity .

pset:Pset_HeatExchangerTypePlate
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Plate heat exchanger type common attributes."^^xsd:string ;
        pset:groups   pset:numberOfPlates .

pset:nominalMediaSurfaceVelocity
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Average fluid velocity at the media surface."^^xsd:string ;
        rdfs:range        ifcowl:IfcLinearVelocityMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FilterTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalMediaSurfaceVelocity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SpaceThermalDesign
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Space or zone HVAC design requirements. HISTORY: New property set in IFC Release 1.0 (Pset_SpaceHvacInformation); renamed to Pset_SpaceThermalDesign and revised in IFC2x2."^^xsd:string ;
        pset:groups   pset:totalSensibleHeatGain , pset:coolingDryBulb , pset:ventilationAirFlowrate , pset:coolingDesignAirflow , pset:boundaryAreaHeatLoss , pset:exhaustAirFlowrate , pset:ceilingRAPlenum , pset:heatingDryBulb , pset:heatingDesignAirflow , pset:totalHeatLoss , pset:coolingRelativeHumidity , pset:heatingRelativeHumidity , pset:totalHeatGain .

pset:sectionWidth  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The width of a section used in the construction of the tank."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TankTypeSectional ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SectionWidth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ColumnCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all occurrences of IfcColumn."^^xsd:string ;
        pset:groups   pset:fireRating , pset:loadBearing , pset:isExternal , pset:slope , pset:reference .

pset:Pset_DamperTypeFireDamper
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Fire damper type attributes.\\X\\0APset renamed from Pset_DamperTypeFire to Pset_DamperTypeFireDamper in IFC2x2 Pset Addendum."^^xsd:string ;
        pset:groups   pset:fusibleLinkTemperature , pset:fireResistanceRating , pset:closureRatingEnum , pset:actuationType .

pset:Pset_DistributionChamberElementTypeValveChamber
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from BS6100 250 6224: Chamber that houses a valve(s)."^^xsd:string ;
        pset:groups   pset:accessCoverMaterial , pset:baseThickness , pset:baseMaterial , pset:wallThickness , pset:wallMaterial , pset:chamberWidth , pset:chamberLengthOrRadius .

pset:Pset_ElementShading
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Shading device properties associated with an element that represents a shading device, e.g. an IfcBuildingElementProxy or any other building element."^^xsd:string ;
        pset:groups   pset:shadingDeviceType , pset:tiltRange , pset:inclination , pset:color , pset:azimuth , pset:averageSolarTransmittance , pset:averageVisibleTransmittance , pset:reflectance , pset:roughness .

pset:Pset_EnergyConversionDeviceCoil
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Coil occurrence attributes attached to an instance of IfcEnergyConversionDevice."^^xsd:string ;
        pset:groups   pset:hasSoundAttentuation .

pset:maximumAirFlowRate
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Maximum allowable air flow rate."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumetricFlowRateMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DamperTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MaximumAirFlowRate" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:accuracyOfHumiditySensor
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The accuracy of the sensor"^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SensorTypeHumiditySensor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AccuracyOfHumiditySensor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:gapValue  a          ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Difference determined between the topic demand value and the topic supply evaluation value."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProductRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "GapValue" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:aboveGround  a       ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication whether this building storey is fully above ground (TRUE), or below ground (FALSE), or partially above and below ground (UNKNOWN) - as in sloped terrain."^^xsd:string ;
        rdfs:range        ifcowl:IfcLogical ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BuildingStoreyCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AboveGround" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasLogical ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:maximumAllowedVoltageDrop
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The maximum voltage drop across the circuit that must not be exceeded."^^xsd:string ;
        rdfs:range        ifcowl:IfcElectricVoltageMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ElectricalCircuit ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MaximumAllowedVoltageDrop" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ReinforcementBarPitchOfBeam
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: The ptich length information of reinforcement  bar with the beam."^^xsd:string ;
        pset:groups   pset:spacingBarPitch , pset:stirrupBarPitch , pset:reference , pset:description .

pset:spilloverLevel  a    rdf:Property , ifcdoc:P_SINGLEVALUE , spin:MagicProperty ;
        rdfs:comment      "The level at which water spills out of the object"^^xsd:string , "The level at which water spills out of the terminal."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SanitaryTerminalTypeBidet , pset:Pset_SanitaryTerminalTypeToiletPan , pset:Pset_SanitaryTerminalTypeUrinal , pset:Pset_WasteTerminalTypeFloorTrap ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SpilloverLevel" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:pumperConnectionSize
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The size of a connection to which a fire hose may be connected that is then linked to a pumping unit."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FireSuppressionTerminalTypeFireHydrant ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "PumperConnectionSize" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalEnergyConsumption
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal fuel consumption rate required to produce the total boiler heat output."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BoilerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalEnergyConsumption" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:weight  a            spin:MagicProperty , rdf:Property , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Weight of the evaporative cooler."^^xsd:string , "Weight of the boiler."^^xsd:string , "Weight of the air terminal."^^xsd:string , "Weight of cooling tower."^^xsd:string , "Weight of the air terminal box."^^xsd:string , "Weight of filter."^^xsd:string , "$"^^xsd:string , "Weight of cooled beam"^^xsd:string , "The weight of the humidifier."^^xsd:string , "Weight of the fan."^^xsd:string , "The weight of the silencer."^^xsd:string ;
        rdfs:range        ifcowl:IfcMassMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FanTypeCommon , pset:Pset_FilterTypeCommon , pset:Pset_EvaporativeCoolerTypeCommon , pset:Pset_CooledBeamTypeCommon , pset:Pset_AirTerminalTypeCommon , pset:Pset_AirToAirHeatRecoveryTypeCommon , pset:Pset_CoolingTowerTypeCommon , pset:Pset_AirTerminalBoxTypeCommon , pset:Pset_HumidifierTypeCommon , pset:Pset_DuctSilencerTypeCommon , pset:Pset_BoilerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Weight" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:actuatorInputPower
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Maximum input power requirement"^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ActuatorTypeElectricActuator ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ActuatorInputPower" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DrainageCatchment
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Area of land that drains naturally to a given point (BS6100 modified). Used as a non type driven property set in conjunction with an appropriate instance of IfcSpatialStructureElement that is identified as a catchment using the inherited IfcRoot.Name attribute. Catchments may be nested using IfcRelNests so that subcatchment areas (as component parts of a catchment area) can be identified. A catchment area will be geometrically defined by a closed loop (closed polyline or polyloop)\\X\\0ANote also that the boundary between catchment areas (watershed) is not currently identified."^^xsd:string ;
        pset:groups   pset:areaDrained .

pset:upstreamPressure
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The operating pressure of the fluid upstream of the pressure reducing valve"^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ValveTypePressureReducing ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "UpstreamPressure" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:standardFixingPlateThickness
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The thickness of the standard fixing plate."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryStandardFixingPlate ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "StandardFixingPlateThickness" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:boundaryAreaHeatLoss
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Heat loss per unit area for the boundary object. This is a design input value for use in the absence of calculated load data."^^xsd:string ;
        rdfs:range        ifcowl:IfcHeatFluxDensityMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalDesign ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BoundaryAreaHeatLoss" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:contributedLuminousFlux
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Luminous flux is a photometric measure of radiant flux, i.e. the volume of light emitted from a light source. Luminous flux is measured either for the interior as a whole or for a part of the interior (partial luminous flux for a solid angle). All other photometric parameters are derivatives of luminous flux. Luminous flux is measured in lumens (lm). The luminous flux is given as a nominal value for each lamp."^^xsd:string ;
        rdfs:range        ifcowl:IfcLuminousFluxMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_LampTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ContributedLuminousFlux" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:limitingTerminalSize
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The maximum terminal size capacity of the device."^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProtectiveDeviceTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LimitingTerminalSize" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:heatSensorAccuracy
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The accuracy of the sensor."^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SensorTypeHeatSensor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HeatSensorAccuracy" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:version  a           ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The version number of the agreement that is identified"^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_PropertyAgreement ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Version" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DuctSegmentTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Duct segment type common attributes."^^xsd:string ;
        pset:groups   pset:workingPressure , pset:unitWeight , pset:material , pset:length , pset:reinforcement , pset:longitudinalSeam , pset:nominalDiameterOrWidth , pset:reinforcementSpacing , pset:endStyleTreatment , pset:temperatureRange , pset:nominalHeight , pset:materialThickness , pset:shape , pset:pressureRange .

pset:Pset_SwitchingDeviceTypeContactor
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: An electrical device used to control the flow of power in a circuit on or off."^^xsd:string ;
        pset:groups   pset:contactorType .

pset:Pset_ProtectiveDeviceTypeFuseDisconnector
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A device that will electrically open the circuit after a period of prolonged, abnormal current flow."^^xsd:string ;
        pset:groups   pset:fuseDisconnectorType .

pset:Pset_FlowMeterTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Common attributes of a flow meter type"^^xsd:string ;
        pset:groups   pset:isMain , pset:remoteReading , pset:readOutType .

pset:yDirectionTieHoopBarPitch
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The Y direction pitch length of the tie hoop."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarPitchOfColumn ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "YDirectionTieHoopBarPitch" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:openPressureDrop
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Total pressure drop across damper."^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DamperTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "OpenPressureDrop" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DuctFittingPHistory
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Duct fitting performance history common attributes."^^xsd:string ;
        pset:groups   pset:airFlowLeakage , pset:atmosphericPressure , pset:lossCoefficient .

pset:bECBendingParameter_v
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar bending angle parameter v."^^xsd:string ;
        rdfs:range        ifcowl:IfcPlaneAngleMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBECCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BECBendingParameter_v" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_Draughting  a  ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Property set to capture layer and colour as a quick win implementation within IFC2x platform to enable more efficient exchange of 3D building models.\\X\\0ANOTE: With implementation of the IFC2x2 capabilities defined in the presentation resources (IfcPresentationLayerAssignment, IfcCurveStyle) the use of this property set may become obsolete."^^xsd:string ;
        pset:groups   pset:colour , pset:layerName .

pset:withBackdrop  a      rdf:Property , ifcdoc:P_SINGLEVALUE , spin:MagicProperty ;
        rdfs:comment      "Indicates whether the chamber has a backdrop or tumbling bay (TRUE) or not (FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DistributionChamberElementTypeInspectionChamber , pset:Pset_DistributionChamberElementTypeManhole ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "WithBackdrop" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:bECShapeParameter_e
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter e."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBECCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BECShapeParameter_e" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:extendToStructure
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indicates whether the object extend to the structure above (TRUE) or not (FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_WallCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ExtendToStructure" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:connectionSize  a    rdf:Property , spin:MagicProperty , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Duct connection diameter"^^xsd:string , "Size of the inlet connection to the sprinkler."^^xsd:string , "Defines the size of inlet and outlet pipe connections to the meter."^^xsd:string , "The connection size of the to and from the pump"^^xsd:string , "Pipe connection diameter"^^xsd:string ;
        rdfs:range        ifcowl:IfcLengthMeasure , ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FlowMeterTypeEnergyMeter , pset:Pset_PumpTypeCommon , pset:Pset_FireSuppressionTerminalTypeSprinkler , pset:Pset_FlowMeterTypeOilMeter , pset:Pset_FlowMeterTypeWaterMeter , pset:Pset_FlowMeterTypeGasMeter , pset:Pset_CooledBeamTypeCommon , pset:Pset_CooledBeamTypeActive ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ConnectionSize" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FireSuppressionTerminalTypeHoseReel
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A supporting framework on which a hose may be wound (BS6100 155 8201).\\X\\0A\\X\\0ANote that the service provided by the hose (water/foam) is determined by the context of the system onto which the hose reel is connected."^^xsd:string ;
        pset:groups   pset:hoseReelMountingType , pset:hoseNozzleType , pset:hoseLength , pset:classOfService , pset:inletConnectionSize , pset:classificationAuthority , pset:hoseDiameter , pset:hoseReelType .

pset:Pset_CableCarrierSegmentTypeCableLadderSegment
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: An open carrier segment on which cables are carried on a ladder structure."^^xsd:string ;
        pset:groups   pset:ladderConfiguration , pset:nominalHeight , pset:nominalWidth , pset:nominalLength .

pset:energyGainTotal  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The total amount of energy gains for the spaces served by the system during the peak cooling conditions, plus any system-level total energy gains."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirSideSystemInformation ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "EnergyGainTotal" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_CableSegmentTypeConductorSegment
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: An electrical conductor is a single linear element with the specific purpose to lead electric current. The core of one lead is normally single wired or multiwired which are intertwined."^^xsd:string ;
        pset:groups   pset:nominalLength , pset:sheathColor , pset:isFireResistant , pset:crossSectionalArea , pset:conductorMaterial , pset:phaseReference , pset:conductorSheathMaterial , pset:electricalConductorFunction , pset:maximumOperatingTemperature .

pset:heatingRelativeHumidity
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Inside relative humidity for heating design."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalDesign ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HeatingRelativeHumidity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:inletDiameter  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The inlet diameter of the breeching inlet."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FireSuppressionTerminalTypeBreechingInlet ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "InletDiameter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_LightFixtureTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Common data for light fixtures."^^xsd:string ;
        pset:groups   pset:articleNumber , pset:manufacturersSpecificInformation , pset:maintenanceFactor , pset:lightFixturePlacingType , pset:lightFixtureMountingType , pset:totalWattage , pset:numberOfSources .

pset:flowCoefficient  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Flow coefficient (the quantity of fluid that passes through a fully open valve at unit pressure drop), typically expressed as the Kv or Cv value for the valve."^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ValveTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FlowCoefficient" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalSumpDepth
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal or quoted length measured along the z-axis in the local coordinate system of the sump."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_WasteTerminalTypeGullySump ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalSumpDepth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:crossSectionalArea
        a                 rdf:Property , ifcdoc:P_SINGLEVALUE , spin:MagicProperty ;
        rdfs:comment      "Cross section area of the cable"^^xsd:string , "Cross section area of the phase(s) lead(s)"^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CableSegmentTypeCableSegment , pset:Pset_CableSegmentTypeConductorSegment ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CrossSectionalArea" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:throwLength  a       ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The horizontal or vertical axial distance an airstream travels after leaving an AirTerminal before the maximum stream velocity is reduced to a specified terminal velocity under isothermal conditions at the upper value of the AirFlowrateRange."^^xsd:string ;
        rdfs:range        ifcowl:IfcLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirTerminalTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ThrowLength" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_UnitaryEquipmentTypeAirHandler
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Air handler unitary equipment type attributes.\\X\\0ANote that these attributes were formerly Pset_AirHandler prior to IFC2x2."^^xsd:string ;
        pset:groups   pset:dualDeck , pset:airHandlerFanCoilArrangement , pset:airHandlerConstruction .

pset:nominalCountedEfficiency
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal filter efficiency based the particle count concentration before and after the filter against particles with a certain size distribution."^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FilterTypeAirParticleFilter ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalCountedEfficiency" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SensorTypeFireSensor
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A device that senses or detects the presence of fire."^^xsd:string ;
        pset:groups   pset:timeConstant , pset:accuracyOfFireSensor , pset:fireSensorSetPoint .

pset:isSingleFlush  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indicates whether the cistern is single flush = TRUE (i.e. the same amount of water is used for each and every flush) or dual flush = FALSE (i.e. the amount of water used for a flush may be selected by the user to be high or low depending on the waste material to be removed)"^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SanitaryTerminalTypeCistern ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsSingleFlush" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hasAntiStaticSurface
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication whether the surface finish is designed to prevent electrostatic charge (TRUE) or not (FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CoveringFlooring ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasAntiStaticSurface" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:specialRequirements
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Any additional special requirements that need to be included in the permit to work.\\X\\0A\\X\\0ANOTE - Additional permit requirements may be imposed according to the nature of the facility at which the work is carried out. For instance, in clean areas, special clothing may be required whilst in corrective institutions, it may be necessary to check in and check out tools that will be used for work as a safety precaution."^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_Permit ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SpecialRequirements" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:spaceTemperatureWinterMin
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Minimal temperature of the space or zone for the cold (winter) period, that is required from user/designer view point."^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SpaceTemperatureWinterMin" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:anchorBoltProtrusionLength
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The length of the protruding part of the anchor bolt."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryAnchorBolt ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AnchorBoltProtrusionLength" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalHeatRejectionRate
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Sum of the refrigeration effect and the heat equivalent of the power input to the compressor."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ChillerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalHeatRejectionRate" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:totalCoolingLoad
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The peak total cooling load for the building, zone or space."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ThermalLoadAggregate ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "TotalCoolingLoad" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DuctFittingTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Duct fitting type common attributes."^^xsd:string ;
        pset:groups   pset:unitWeight , pset:material , pset:nominalDiameterOrWidth , pset:subType , pset:endStyleTreatment , pset:pressureClass , pset:pressureRange , pset:materialThickness , pset:temperatureRange , pset:nominalHeight .

pset:infiltration  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Infiltration flowrate of outside air for the filler object based on the area of the filler object at a pressure level of 50 Pascals. It shall be used, if the length of all joints is unknown."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumetricFlowRateMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DoorCommon , pset:Pset_WindowCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Infiltration" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:seatColor  a         ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Color of the object"^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SanitaryTerminalTypeWCSeat ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SeatColor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:waistThickness  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Minimum thickness of the stair flight, measured perpendicular to the slope of the flight to the inner corner of riser and tread. It is a pre-calculated value, in case of inconsistencies, the value derived from the shape representation shall take precedence."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_StairFlightCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "WaistThickness" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:insetShadingCoefficient
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Radiation transmission coefficient of the shading device inside the glazing, symbol \"b-value\". It is a value without unit."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DoorWindowShadingType ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "InsetShadingCoefficient" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:bS8666ShapeParameter_C
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter C."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBS8666Common ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BS8666ShapeParameter_C" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SpaceThermalPHistory
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Thermal and air flow conditions of a space or zone. HISTORY: New property set in IFC 2x2."^^xsd:string ;
        pset:groups   pset:spaceRelativeHumidity , pset:spaceTemperature , pset:exhaustAirFlowRate , pset:ventilationAirFlowRate , pset:heatingAirFlowRate , pset:coolingAirFlowRate .

pset:Pset_DiscreteAccessoryStandardFixingPlate
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties specific to standard fixing plates."^^xsd:string ;
        pset:groups   pset:standardFixingPlateThickness , pset:standardFixingPlateDepth , pset:standardFixingPlateWidth .

pset:fusibleLinkTemperature
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The temperature that the fusible link melts"^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DamperTypeFireDamper ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FusibleLinkTemperature" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:iSOCD3766BendingEndHook
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The angle of the hook at end of the bar. If the property is not included  the bar has no end hook. Note: this differs from how ISO/CD 3766 handles end hooks."^^xsd:string ;
        rdfs:range        ifcowl:IfcPlaneAngleMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsISOCD3766Common ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ISOCD3766BendingEndHook" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_CooledBeamPHistory
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Common performance history attributes for a cooled beam."^^xsd:string ;
        pset:groups   pset:waterPressureDropCurves , pset:totalCoolingCapacity , pset:returnWaterTemperatureHeating , pset:totalHeatingCapacity , pset:correctionFactorForHeating , pset:supplyWaterTemperatureCooling , pset:beamCoolingCapacity , pset:returnWaterTemperatureCooling , pset:correctionFactorForCooling , pset:supplyWaterTemperatureHeating , pset:beamHeatingCapacity , pset:heatingWaterFlowRate , pset:coolingWaterFlowRate .

pset:hasHoseUnion  a      ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "Indicates whether the drawoff cock is fitted with a hose union connection (= TRUE) or not (= FALSE)"^^xsd:string , "Indicates whether the gas tap is fitted with a hose union connection (= TRUE) or not (= FALSE)"^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ValveTypeDrawOffCock , pset:Pset_ValveTypeGasTap ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasHoseUnion" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:reasonForChange  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "A description of the problem for why a change is needed."^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProjectOrderChangeOrder ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ReasonForChange" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:highestSeatingHeight
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The value of seating height of high level if the chair height is adjustable."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FurnitureTypeChair ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HighestSeatingHeight" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:protectiveTagType
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The breaking capacity value of the device. Note: This may be expressed as a code or a value depending on standard and/or source."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProtectiveDeviceTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ProtectiveTagType" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_CoveringFlooring
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all occurrences of IfcCovering with the PredefinedType set to FLOORING."^^xsd:string ;
        pset:groups   pset:hasAntiStaticSurface , pset:hasNonSkidSurface .

pset:nominalPowerRate
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal fan power rate."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FanTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalPowerRate" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_PlateCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all occurrences of IfcPlate."^^xsd:string ;
        pset:groups   pset:thermalTransmittance , pset:fireRating , pset:acousticRating , pset:loadBearing , pset:isExternal , pset:reference .

pset:Pset_FlowControllerDamper
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Damper occurrence attributes attached to an instance of IfcFlowController."^^xsd:string ;
        pset:groups   pset:sizingMethod .

pset:washHandBasinSetPoint
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The CO2 value to be sensed."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SensorTypeCO2Sensor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "WashHandBasinSetPoint" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:numberOfRiser  a     ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "Total number of the risers included in the stair"^^xsd:string , "Total number of the risers included in the stair flight"^^xsd:string ;
        rdfs:range        ifcowl:IfcCountMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_StairCommon , pset:Pset_StairFlightCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NumberOfRiser" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:numberOfStoreys  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Captures the number of storeys within a building for those cases where the IfcBuildingStorey entity is not used. Note that if IfcBuilingStorey is asserted and the number of storeys in a building can be determined from it, then this approach should be used in preference to setting a property for the number of storeys."^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BuildingCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NumberOfStoreys" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_WasteTerminalTypeFloorTrap
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Pipe fitting, set into the floor, that retains liquid to prevent the passage of foul air."^^xsd:string ;
        pset:groups   pset:coverMaterial , pset:nominalBodyLength , pset:nominalBodyWidth , pset:coverLength , pset:inletPatternType , pset:bodyMaterial , pset:outletConnectionSize , pset:nominalBodyDepth , pset:spilloverLevel , pset:hasStrainer , pset:inletConnectionSize , pset:coverWidth , pset:isForSullageWater , pset:trapType .

pset:receptacleLoadIntensity
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Average power use intensity of appliances and other non-HVAC equipment.in the space per unit area.(PowerMeasure/IfcAreaMeasure)"^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ThermalLoadDesignCriteria ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ReceptacleLoadIntensity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:finCorrugatedType
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Description of a fin corrugated type."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TubeBundleTypeFinned ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FinCorrugatedType" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:maximumOperatingTemperature
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The maximum temperature at which the sheath retains its integrity."^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CableSegmentTypeConductorSegment ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MaximumOperatingTemperature" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_GasTerminalTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Common attributes of gas terminal types. \\X\\0AGasProperties attribute deleted in IFC2x2 Pset Addendum: Use IfcFuelProperties instead."^^xsd:string ;
        pset:groups   pset:gasFlowRateRange .

pset:isFOB  a             ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication of whether contents of the purchase order are delivered Free on Board (= True) or not (= False)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProjectOrderPurchaseOrder ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsFOB" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_Reliability
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Indication of the expected reliability of a product"^^xsd:string ;
        pset:groups   pset:meanTimeBetweenFailure .

pset:Pset_SpaceProgramCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all instances of IfcSpaceProgram"^^xsd:string ;
        pset:groups   pset:securityRequirement , pset:occupancyType , pset:employeeType , pset:location , pset:occupancyNumber , pset:lightingRequirement , pset:functionRequirement , pset:fFETypeRequirement , pset:privacyRequirement .

pset:Pset_ReinforcementBarPitchOfWall
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: The pitch length information of reinforcement  bar with the wall."^^xsd:string ;
        pset:groups   pset:spacingBarPitch , pset:horizontalBarPitch , pset:verticalBarPitch , pset:barAllocationType , pset:reference , pset:description .

pset:Pset_SpaceParkingAisle
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all occurrences of IfcSpace which have an attribute value for ObjectType = ParkingAisle."^^xsd:string ;
        pset:groups   pset:isOneWay .

pset:withLock  a          ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indicates whether the file cabinet is lockable (= TRUE) or not (= FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FurnitureTypeFileCabinet ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "WithLock" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:boltSize  a          ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Size of the bolts securing the flange"^^xsd:string ;
        rdfs:range        ifcowl:IfcLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_PipeConnectionFlanged ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BoltSize" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:maxOperatingTemperature
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Maximum operating temperature for the cable."^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CableSegmentTypeCableSegment ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MaxOperatingTemperature" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:boreSize  a          ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The nominal bore of the pipe flange"^^xsd:string ;
        rdfs:range        ifcowl:IfcLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_PipeConnectionFlanged ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BoreSize" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:soundSensorAccuracy
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The accuracy of the sensor."^^xsd:string ;
        rdfs:range        ifcowl:IfcSoundPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SensorTypeSoundSensor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SoundSensorAccuracy" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalEfficiency
        a                 spin:MagicProperty , ifcdoc:P_LISTVALUE , ifcdoc:P_SINGLEVALUE , rdf:Property ;
        rdfs:comment      "Nominal chiller efficiency under nominal conditions."^^xsd:string , "The nominal efficiency of the boiler as defined by the manufacturer. For water boilers, a function of inlet versus outlet temperature. For steam boilers, a function of inlet temperature versus steam pressure."^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BoilerTypeCommon , pset:Pset_ChillerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalEfficiency" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:scheduledFrequency
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The period of time between expected instantiations of a work order that may have been predefined."^^xsd:string ;
        rdfs:range        ifcowl:IfcTimeMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProjectOrderMaintenanceWorkOrder ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ScheduledFrequency" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_AirTerminalTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Air terminal type common attributes.\\X\\0ASoundLevel attribute deleted in IFC2x2 Pset Addendum: Use IfcSoundProperties instead."^^xsd:string ;
        pset:groups   pset:airFlowrateVersusFlowControlElement , pset:finishColor , pset:temperatureRange , pset:throwLength , pset:airDiffusionPerformanceIndex , pset:flowPattern , pset:coreType , pset:airFlowrateRange , pset:effectiveArea , pset:hasSoundAttenuator , pset:hasIntegralControl , pset:coreSetHorizontal , pset:material , pset:neckArea , pset:weight , pset:hasThermalInsulation , pset:shape , pset:flowControlType , pset:coreSetVertical , pset:mountingType , pset:dischargeDirection , pset:finishType .

pset:bECBendingParameter_u1
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar bending angle parameter u1."^^xsd:string ;
        rdfs:range        ifcowl:IfcPlaneAngleMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBECCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BECBendingParameter_u1" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ValveTypeMixing
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A valve where typically the temperature of the outlet is determined by mixing hot and cold water inlet flows."^^xsd:string ;
        pset:groups   pset:outletConnectionSize , pset:mixerControl .

pset:Pset_FireRatingProperties
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties related to the combustion of materials for purposes of assessing fire hazard."^^xsd:string ;
        pset:groups   pset:surfaceSpreadOfFlame , pset:isCombustible , pset:fireResistanceRating .

pset:buildableArea  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The area of utilization expressed as a minimum value and a maximum value  - according to local building codes."^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SiteCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BuildableArea" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hasDefrost  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "has the heat exchanger has defrost function or not"^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirToAirHeatRecoveryTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasDefrost" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:numberOfCircuits
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Number of parallel fluid tube circuits."^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TubeBundleTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NumberOfCircuits" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:oneDayCoolingTowerMakeupWater
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The volume of water that needs to be stored to supply make up water to the cooling towers in a building for one day in the event of water supply failure."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumeMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BuildingWaterStorage ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "OneDayCoolingTowerMakeupWater" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:azimuth  a           spin:MagicProperty , rdf:Property , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Azimuth of the element as derived from the placement of the element shape, by convention: North = 0 and measurement is done clockwise (I.e. east = 90, if unit is grad). The calculation procedure will be specific for each type of element.  In cases of inconsistency between the geometric parameters and the azimuth property, provided in the attached property set, the geometric parameters take precedence."^^xsd:string , "The azimuth of the outward normal for the outward or upward facing surface."^^xsd:string ;
        rdfs:range        <http://www.buildingsmart-tech.org/ifcOWL/IFC2X3_TC1#$> , ifcowl:IfcPositivePlaneAngleMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProjectionElementShadingDevicePHistory , pset:Pset_ElementShading ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Azimuth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:combustible  a       ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication whether the object is made from combustible material (TRUE) or not (FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_WallCommon , pset:Pset_CurtainWallCommon , pset:Pset_SlabCommon , pset:Pset_CoveringCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Combustible" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:grossPlannedArea
        a                 rdf:Property , ifcdoc:P_SINGLEVALUE , spin:MagicProperty ;
        rdfs:comment      "Total planned area for the building  Used for programming the building."^^xsd:string , "Total planned area for the space. Used for programming the space."^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceCommon , pset:Pset_BuildingCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "GrossPlannedArea" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hydraulicDiameter
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Hydraulic diameter"^^xsd:string ;
        rdfs:range        ifcowl:IfcLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DuctSilencerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HydraulicDiameter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:affectsSurroundings
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indicates wether the risk affects only to the person assigned to that task (FALSE) or if it can also affect to the people in the surroundings (TRUE).\\X\\0A\\X\\0AFor example, the process of painting would affect all the people in the vicinity of the process"^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_Risk ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AffectsSurroundings" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:requiredSlope  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Required sloping angle of the object  - relative to horizontal (0.0 degrees).\\X\\0ARequired maximum slope for the passageway according to the applicable building code or additional requirements"^^xsd:string ;
        rdfs:range        ifcowl:IfcPlaneAngleMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_RampCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "RequiredSlope" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:xDirectionUpperBarCount
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The number of bars with X direction upper bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarCountOfIndependentFooting ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "XDirectionUpperBarCount" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SwitchingDeviceTypeEmergencyStop
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IEC 826-08-03: An emergency stop device acts to remove as quickly as possible any danger that may have arisen unexpectedly."^^xsd:string ;
        pset:groups   pset:switchOperation .

pset:minimumHeadroom  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Headroom required for the activity assigned to this space."^^xsd:string ;
        rdfs:range        ifcowl:IfcLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceOccupancyRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MinimumHeadroom" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:internalSurfaceArea
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Internal surface area."^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_EvaporatorTypeCommon , pset:Pset_CondenserTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "InternalSurfaceArea" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_PackingInstructions
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Packing instructions are specific instructions relating to the packing that is required for an artefact (instance of IfcProduct) in the event of a move (where the product is related to an instance of IfcMove)."^^xsd:string ;
        pset:groups   pset:specialInstructions , pset:containerMaterial , pset:wrappingMaterial , pset:packingCareType .

pset:Pset_ElectricalCircuit
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A circuit supplies electrical devices with voltage and current."^^xsd:string ;
        pset:groups   pset:netImpedance , pset:maximumAllowedVoltageDrop , pset:numberOfPhases , pset:diversity .

pset:nominalSupplyWaterTemperatureHeating
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal supply water temperature (refers to nominal heating capacity)"^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CooledBeamTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalSupplyWaterTemperatureHeating" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:numberOfGangs  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Number of gangs/buttons on this switch"^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SwitchingDeviceTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NumberOfGangs" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:spacingBarPitch  a   ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "The pitch length of the spacing bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarPitchOfBeam , pset:Pset_ReinforcementBarPitchOfWall ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SpacingBarPitch" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:wireEmbeddingLength
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The length of the part of wire which is embedded in the precast concrete element."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryWireLoop ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "WireEmbeddingLength" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:spaceHumidity  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Humidity of the space or zone that is required from user/designer view point.  If no summer or winter space humidity requirements are given, it applies all year, otherwise for the intermediate period."^^xsd:string ;
        rdfs:range        ifcowl:IfcRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SpaceHumidity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:seatHasCover  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indicates whether there is a cover associated with the toilet seat"^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SanitaryTerminalTypeWCSeat ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SeatHasCover" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:duration  a          ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The period of time for the lease. Note that values should be given in year/day/month and not in hour/minute/second."^^xsd:string ;
        rdfs:range        ifcowl:IfcTimeMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_PropertyAgreement ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Duration" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_AirTerminalBoxTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Air terminal box type common attributes."^^xsd:string ;
        pset:groups   pset:operationTemperatureRange , pset:nominalDamperDiameter , pset:arrangementType , pset:housingThickness , pset:reheatType , pset:nominalInletAirPressure , pset:hasReturnAir , pset:material , pset:hasFan , pset:weight , pset:nominalAirFlowRate , pset:airPressureRange , pset:hasSoundAttenuator , pset:returnAirFractionRange , pset:airflowRateRange .

pset:closeOffRating  a    rdf:Property , spin:MagicProperty , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Close off rating."^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DamperTypeCommon , pset:Pset_ValveTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CloseOffRating" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:signalFactor  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Factor multiplied onto offset signal"^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ControllerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SignalFactor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:frameType  a         ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The type of frame used by the damper (e.g., Standard, Single Flange, Single Reversed Flange, Double Flange, etc.)."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DamperTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FrameType" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalSensibleCapacity
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal sensible capacity."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CoilTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalSensibleCapacity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ActuatorTypeRotationalActuation
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Characteristics of rotational actuation of an actuator\\X\\0AHistory: Replaces Pset_RotationalActuator"^^xsd:string ;
        pset:groups   pset:rangeAngle , pset:torque .

pset:Pset_SensorTypePressureSensor
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A device that senses or detects pressure."^^xsd:string ;
        pset:groups   pset:isSwitch , pset:timeConstant , pset:accuracyOfPressureSensor , pset:pressureSensorRange , pset:pressureSensorSetPoint .

pset:nominalThickness
        a                 ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "The nominal thickness of the panel"^^xsd:string , "The nominal thickness of the work surface."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SystemFurnitureElementTypePanel , pset:Pset_SystemFurnitureElementTypeWorkSurface ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalThickness" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:soffitLevel  a       rdf:Property , spin:MagicProperty , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Level of the highest internal part of the cross section. (BS6100 250 8002)"^^xsd:string ;
        rdfs:range        ifcowl:IfcLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DistributionChamberElementTypeInspectionChamber , pset:Pset_DistributionChamberElementTypeManhole ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SoffitLevel" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:ladderTrussCrossBarDiameter
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The nominal diameter of the straight cross-bars."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryLadderTrussConnector ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LadderTrussCrossBarDiameter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FlowMovingDeviceCompressor
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Compressor occurrence attributes attached to an instance of IfcFlowMovingDevice."^^xsd:string ;
        pset:groups   pset:impellerDiameter .

pset:totalWattage  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Wattage on whole lightfitting device with all sources intact."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_LightFixtureTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "TotalWattage" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:bECShapeParameter_f
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter f."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBECCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BECShapeParameter_f" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:lightingDiversity
        a                 ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "Lighting diversity."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirSideSystemInformation , pset:Pset_ThermalLoadAggregate ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LightingDiversity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:compartmentation
        a                 rdf:Property , ifcdoc:P_SINGLEVALUE , spin:MagicProperty ;
        rdfs:comment      "Indication whether the object is designed to serve as a fire compartmentation (TRUE) or not (FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_WallCommon , pset:Pset_SlabCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Compartmentation" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:productDescription
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "A textual description of the products that require the work."^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProjectOrderWorkOrder , pset:Pset_ProjectOrderMaintenanceWorkOrder ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ProductDescription" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hasIntegralControl
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "If TRUE, a self powered temperature control is included in the AirTerminal."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirTerminalTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasIntegralControl" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalCondensingTemperature
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Chiller condensing temperature."^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ChillerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalCondensingTemperature" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_CableCarrierSegmentTypeCableTraySegment
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: An (typically) open carrier segment onto which cables are laid."^^xsd:string ;
        pset:groups   pset:hasCover , pset:nominalHeight , pset:nominalWidth , pset:nominalLength .

pset:numberOfDoors  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Number of doors"^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ElectricDistributionPointCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NumberOfDoors" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:bECShapeAid_x  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape measure aid x."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBECCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BECShapeAid_x" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:yDirectionLowerBarCount
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The number of bars with Y direction lower bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarCountOfIndependentFooting ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "YDirectionLowerBarCount" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:shortInsideEndTopBarPitch
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The pitch length of the short inside end top bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarPitchOfSlab ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ShortInsideEndTopBarPitch" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:slope  a             rdf:Property , ifcdoc:P_SINGLEVALUE , spin:MagicProperty ;
        rdfs:comment      "Sloping angle of the object  - relative to horizontal (0.0 degrees). \\X\\0AActual maximum slope for the passageway according to the current design.\\X\\0AThe shape information is provided in addition to the shape representation and the geometric parameters used within. In cases of inconsistency between the geometric parameters and the shape properties, provided in the attached property, the geometric parameters take precedence."^^xsd:string , "Slope angle - relative to horizontal (0.0 degrees).\\X\\0AThe shape information is provided in addition to the shape representation and the geometric parameters used within. In cases of inconsistency between the geometric parameters and the shape properties, provided in the attached property, the geometric parameters take precedence."^^xsd:string , "Angle of the gutter to allow for drainage"^^xsd:string ;
        rdfs:range        ifcowl:IfcPlaneAngleMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ColumnCommon , pset:Pset_BeamCommon , pset:Pset_RampFlightCommon , pset:Pset_PipeSegmentTypeGutter , pset:Pset_MemberCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Slope" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:airConditioning  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication whether this space requires air conditioning provided (TRUE) or not (FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AirConditioning" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:maximumPartLoadRatio
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Maximum part load ratio as a fraction of nominal capacity."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CompressorTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MaximumPartLoadRatio" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:marketCategory  a    ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "Category of use e.g. residential, commercial, recreation etc."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BuildingUse , pset:Pset_BuildingUseAdjacent ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MarketCategory" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:edgeFixingPlateLength
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The length of the L-shaped edge plate."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryEdgeFixingPlate ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "EdgeFixingPlateLength" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalLength  a     spin:MagicProperty , ifcdoc:P_SINGLEVALUE , rdf:Property ;
        rdfs:comment      "The nominal length of the segment."^^xsd:string , "The nominal length of a cable, busbar or tube."^^xsd:string , "Nominal or quoted length of the object."^^xsd:string , "The nominal length of a conductor."^^xsd:string , "The nominal length of the furniture of this type. The size information is provided in addition to the shape representation and the geometric parameters used within. In cases of inconsistency between the geometric parameters and the size properties, provided in the attached property set, the geometric parameters take precedence."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SanitaryTerminalTypeBidet , pset:Pset_SanitaryTerminalTypeUrinal , pset:Pset_CableSegmentTypeCableSegment , pset:Pset_SanitaryTerminalTypeSanitaryFountain , pset:Pset_CableCarrierSegmentTypeCableLadderSegment , pset:Pset_CableCarrierSegmentTypeCableTraySegment , pset:Pset_CableCarrierSegmentTypeCableTrunkingSegment , pset:Pset_SanitaryTerminalTypeWashHandBasin , pset:Pset_SanitaryTerminalTypeToiletPan , pset:Pset_SanitaryTerminalTypeShower , pset:Pset_FurnitureTypeCommon , pset:Pset_CableSegmentTypeConductorSegment , pset:Pset_SanitaryTerminalTypeBath , pset:Pset_CableCarrierSegmentTypeConduitSegment , pset:Pset_SanitaryTerminalTypeSink ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalLength" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_HumidifierTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Humidifier type common attributes.\\X\\0AWaterProperties attribute renamed to WaterRequirement and unit type modified in IFC2x2 Pset Addendum."^^xsd:string ;
        pset:groups   pset:waterRequirement , pset:internalControl , pset:nominalAirFlowRate , pset:nominalMoistureGain , pset:weight , pset:application .

pset:nominalPowerConsumption
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal total power consumption."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ChillerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalPowerConsumption" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:modelLabel  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The model number and/or unit designator assigned by the manufacturer of the manufactured item."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ManufacturerTypeInformation ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ModelLabel" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:netImpedance  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The maximum earth loop impedance of a circuit (typically stated as the variable Zs)"^^xsd:string ;
        rdfs:range        ifcowl:IfcElectricResistanceMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ElectricalCircuit ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NetImpedance" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:longInsideEndTopBarPitch
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The pitch length of the long inside end top bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarPitchOfSlab ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LongInsideEndTopBarPitch" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:displaySize  a       spin:MagicProperty , ifcdoc:P_SINGLEVALUE , rdf:Property ;
        rdfs:comment      "The physical size of the display. In the case of a stem thermometer, this will be the length of the stem. For a dial thermometer, it will be the diameter of the dial."^^xsd:string , "The physical size of the display. For a dial pressure gauge it will be the diameter of the dial."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FlowInstrumentTypeThermometer , pset:Pset_FlowInstrumentTypePressureGauge ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "DisplaySize" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalBodyWidth
        a                 spin:MagicProperty , ifcdoc:P_SINGLEVALUE , rdf:Property ;
        rdfs:comment      "Nominal or quoted length measured along the y-axis in the local coordinate system of the chamber of the gully trap."^^xsd:string , "Nominal or quoted length measured along the y-axis in the local coordinate system of the chamber of the trap."^^xsd:string , "Nominal or quoted length, measured along the y-axis of the local coordinate system of the object, of the body of the object."^^xsd:string , "Nominal or quoted length measured along the y-axis in the local coordinate system of the waste."^^xsd:string , "Nominal or quoted length measured along the y-axis in the local coordinate system of the drain."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_WasteTerminalTypePetrolInterceptor , pset:Pset_WasteTerminalTypeRoofDrain , pset:Pset_WasteTerminalTypeFloorWaste , pset:Pset_WasteTerminalTypeGreaseInterceptor , pset:Pset_WasteTerminalTypeGullyTrap , pset:Pset_WasteTerminalTypeFloorTrap , pset:Pset_WasteTerminalTypeOilInterceptor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalBodyWidth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_LightFixtureTypeThermal
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Heat load data for a light fixture."^^xsd:string ;
        pset:groups   pset:sensibleLoadToRadiant , pset:maximumSpaceSensibleLoad , pset:maximumPlenumSensibleLoad .

pset:bECBarShapeCode  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The bending type code for the specific bending shape as defined in the BEC standard. Note: depending on the standardized shape different combinations of following parameters a...e (f...l), TD, u, v, u1, v1, aid_x, and aid_y are used."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBECCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BECBarShapeCode" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:isFireResistant  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication of whether the sheath is fire resistant (= TRUE) or not (= FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CableSegmentTypeConductorSegment ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsFireResistant" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:strainerDepth  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Depth, measured in elevation view, of the strainer basket."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_WasteTerminalTypeGreaseInterceptor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "StrainerDepth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ValveTypeIsolating
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Valve that is used to isolate system components.\\X\\0ANote that an isolating valve is constrained to have a 2 port  pattern."^^xsd:string ;
        pset:groups   pset:isolatingPurpose , pset:isNormallyOpen .

pset:Pset_AirSideSystemInformation
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Attributes that apply to an air side HVAC system. HISTORY: New property set in IFC Release 1.0."^^xsd:string ;
        pset:groups   pset:applianceDiversity , pset:airflowSensible , pset:name , pset:coolingTemperatureDelta , pset:energyGainTotal , pset:description , pset:lightingDiversity , pset:airSideSystemType , pset:energyGainSensible , pset:infiltrationDiversitySummer , pset:heatingTemperatureDelta , pset:airSideSystemDistributionType , pset:infiltrationDiversityWinter , pset:fanPower , pset:energyLoss , pset:totalAirflow , pset:ventilation , pset:loadSafetyFactor .

pset:nominalSurroundingTemperatureCooling
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal surrounding temperature (refers to nominal cooling capacity)"^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CooledBeamTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalSurroundingTemperatureCooling" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:tileLength  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Length of ceiling tiles. The size information is provided in addition to the shape representation and the geometric parameters used within. In cases of inconsistency between the geometric parameters and the size properties, provided in the attached property set, the geometric parameters take precedence."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CoveringCeiling ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "TileLength" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:bS8666ShapeParameter_D
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter D."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBS8666Common ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BS8666ShapeParameter_D" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SensorTypeSmokeSensor
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A device that senses or detects smoke."^^xsd:string ;
        pset:groups   pset:hasBuiltInAlarm , pset:timeConstant , pset:accuracyOfSmokeSensor , pset:smokeSensorRange , pset:pressureSensorSetPoint , pset:coverageArea .

pset:protectedOpening
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication whether the opening is considered to be protected under fire safety considerations. If (TRUE) it counts as a protected opening under the applicable building code, (FALSE) otherwise."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_OpeningElementCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ProtectedOpening" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FlowFittingPipeFitting
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Pipe fitting occurrence attributes attached to an instance of IfcFlowFitting."^^xsd:string ;
        pset:groups   pset:color , pset:interiorRoughnessCoefficient .

pset:Pset_FlowMeterTypeGasMeter
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Device that measures, indicates and sometimes records, the volume of gas that passes through it without interrupting the flow."^^xsd:string ;
        pset:groups   pset:maximumPressureLoss , pset:maximumFlowRate , pset:connectionSize , pset:gasType .

pset:Pset_RoofCommon  a  ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all occurrences of IfcRoof. Note: Properties for ProjectedArea and TotalArea added in IFC 2x3"^^xsd:string ;
        pset:groups   pset:totalArea , pset:projectedArea , pset:isExternal , pset:fireRating , pset:reference .

pset:clearWidth  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Clear width of the object (elevator). It indicates the distance from the inner surfaces of the elevator car left and right from the elevator door. \\X\\0AThe shape information is provided in addition to the shape representation and the geometric parameters used within. In cases of inconsistency between the geometric parameters and the shape properties, provided in the attached property, the geometric parameters take precedence."^^xsd:string , "The width of the formed space in the duct."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DistributionChamberElementTypeFormedDuct , pset:Pset_TransportElementElevator ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ClearWidth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:bECBendingParameter_v1
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar bending angle parameter v1."^^xsd:string ;
        rdfs:range        ifcowl:IfcPlaneAngleMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBECCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BECBendingParameter_v1" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:firstCurvatureRadius
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "FirstCurvatureRadius should be defined as the base or left side radius of curvature value."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TankTypePreformed ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FirstCurvatureRadius" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:thermalEfficiency
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Overall Thermal Efficiency is defined as gross energy output of the heat transfer device divided by the energy input."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceHeaterTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ThermalEfficiency" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_EnergyConsumptionPHistorySteam
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Measured steam energy consumption properties."^^xsd:string ;
        pset:groups   pset:quality , pset:flowrate , pset:pressure , pset:temperature .

pset:Pset_SensorTypeCO2Sensor
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A device that senses or detects carbon dioxide."^^xsd:string ;
        pset:groups   pset:timeConstant , pset:accuracyOfCO2Sensor , pset:cO2SensorRange , pset:washHandBasinSetPoint , pset:coverageArea .

pset:nominalMoistureGain
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal rate of water vapor added into the airstream."^^xsd:string ;
        rdfs:range        ifcowl:IfcMassFlowRateMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_HumidifierTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalMoistureGain" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:waterRequirement
        a                 ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "Make-up water requirements."^^xsd:string , "Make-up water requirement."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumetricFlowRateMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_EvaporativeCoolerTypeCommon , pset:Pset_CoolingTowerTypeCommon , pset:Pset_HumidifierTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "WaterRequirement" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:lowLimit  a          spin:MagicProperty , rdf:Property , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "The low limit value for the analog output."^^xsd:string , "The low limit value for the analog input."^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AnalogInput , pset:Pset_AnalogOutput ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LowLimit" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:standardFixingPlateDepth
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The depth of the standard fixing plate."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryStandardFixingPlate ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "StandardFixingPlateDepth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ProtectiveDeviceTypeCircuitBreaker
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IEC 441-14-20: A circuit breaker is a mechanical switching device capable of making, carrying, and breaking currents under normal circuit conditions and also making, carrying for a specified time and breaking, current under specified abnormal circuit conditions such as those of short circuit."^^xsd:string ;
        pset:groups   pset:circuitBreakerType .

pset:Pset_ValvePHistory
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Valve performance history common attributes of a typical 2 port pattern type valve."^^xsd:string ;
        pset:groups   pset:measuredPressureDrop , pset:measuredFlowRate , pset:percentageOpen .

pset:longInsideCenterLowerBarPitch
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The pitch length of the long inside center lower bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarPitchOfSlab ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LongInsideCenterLowerBarPitch" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:isPluggableOutlet
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication of whether the outlet accepts a loose plug connection (= TRUE) or whether it is directly connected (= FALSE) or whether the form of connection has not yet been determined (= UNKNOWN)"^^xsd:string ;
        rdfs:range        ifcowl:IfcLogical ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_OutletTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsPluggableOutlet" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasLogical ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalDepth  a      spin:MagicProperty , rdf:Property , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Nominal or quoted depth of the object."^^xsd:string , "The nominal depth of the tank.\\X\\0A\\X\\0ANote: Not required for a horizontal cylindrical tank."^^xsd:string , "The nominal depth of the furniture of this type. The size information is provided in addition to the shape representation and the geometric parameters used within. In cases of inconsistency between the geometric parameters and the size properties, provided in the attached property set, the geometric parameters take precedence."^^xsd:string , "Nominal or quoted depth of the object measured from the inlet drain connection to the base of the unit."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SanitaryTerminalTypeShower , pset:Pset_SanitaryTerminalTypeWashHandBasin , pset:Pset_SanitaryTerminalTypeBidet , pset:Pset_SanitaryTerminalTypeSanitaryFountain , pset:Pset_SanitaryTerminalTypeBath , pset:Pset_SanitaryTerminalTypeUrinal , pset:Pset_SanitaryTerminalTypeToiletPan , pset:Pset_WasteTerminalTypeWasteDisposalUnit , pset:Pset_FurnitureTypeCommon , pset:Pset_SanitaryTerminalTypeSink , pset:Pset_TankTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalDepth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:primaryApparentPower
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The power in VA (volt ampere) that has been transformed and that runs into the transformer on the primary side."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TransformerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "PrimaryApparentPower" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:isShallow  a         ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indicates whether the chamber has been designed as being shallow (TRUE) or deep (FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DistributionChamberElementTypeManhole ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsShallow" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ElectricalDeviceCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A means of collecting together all properties that are commonly used by electrical devices."^^xsd:string ;
        pset:groups   pset:nominalCurrent , pset:iP_Code , pset:phaseAngle , pset:usageCurrent , pset:nominalFrequencyRange , pset:insulationStandardClass , pset:phaseReference , pset:numberOfPoles , pset:electricalDeviceNominalPower , pset:nominalVoltage , pset:hasProtectiveEarth .

pset:Pset_ProjectOrderWorkOrder
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Defines the requirements for purchase orders in a project."^^xsd:string ;
        pset:groups   pset:ifNotAccomplished , pset:contractualType , pset:workTypeRequested , pset:longJobDescription , pset:shortJobDescription , pset:productDescription .

pset:weatherDataStation
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The site weather data station description or reference to the data source from which weather data was obtained for use in calculations."^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_OutsideDesignCriteria ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "WeatherDataStation" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DistributionPortDuct
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Duct port occurrence attributes attached to an instance of IfcDistributionPort."^^xsd:string ;
        pset:groups   pset:connectionType , pset:portNumber .

pset:purpose  a           ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property , ifcdoc:P_ENUMERATEDVALUE ;
        rdfs:comment      "Enumeration defining the purpose of the flow meter occurrence."^^xsd:string , "Indication of the purpose for that opening, e.g. ventilation, access, etc."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_OpeningElementCommon , pset:Pset_FlowControllerFlowMeter ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Purpose" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:requiredHeadroom
        a                 spin:MagicProperty , ifcdoc:P_SINGLEVALUE , rdf:Property ;
        rdfs:comment      "Required headroom clearance for the passageway according to the applicable building code or additional requirements"^^xsd:string , "Required headroom clearance for the passageway according to the applicable building code or additional requirements."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_RampCommon , pset:Pset_StairCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "RequiredHeadroom" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ThermalLoadAggregate
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: The aggregated thermal loads experienced by one or many spaces, zones, or buildings. This aggregate thermal load information is typically addressed by a system or plant. HISTORY: New property set in IFC Release 1.0 (Pset_AggregateLoadInformation); renamed Pset_ThermalLoadAggregate in IFC2x2."^^xsd:string ;
        pset:groups   pset:loadSafetyFactor , pset:applianceDiversity , pset:infiltrationDiversityWinter , pset:infiltrationDiversitySummer , pset:lightingDiversity , pset:totalHeatingLoad , pset:totalCoolingLoad .

pset:groupName  a         ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Name of grouping of topics."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProductRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "GroupName" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FurnitureTypeTable
        a             ifcdoc:PropertySet ;
        rdfs:comment  "A set of specific properties for furniture type table. HISTORY: First issued in IFC Release R1.5. Renamed from Pset_Table"^^xsd:string ;
        pset:groups   pset:numberOfChairs , pset:worksurfaceArea .

pset:parkingUse  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Identifies the type of transporation for which the parking space is designed. Values are not predefined but might include car, compact car, motorcycle, bicycle, truck, bus etc."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceParking ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ParkingUse" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:workTypeRequested
        a                 spin:MagicProperty , rdf:Property , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Work type requested in circumstances where there are categorizations of types of work task. It could be used to identify a remedial task, minor work task, electrical task etc."^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProjectOrderWorkOrder , pset:Pset_ProjectOrderMaintenanceWorkOrder ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "WorkTypeRequested" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:primaryFrequency
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The frequency that is going to be transformed and that runs into the transformer on the primary side."^^xsd:string ;
        rdfs:range        ifcowl:IfcFrequencyMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TransformerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "PrimaryFrequency" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SpaceHeaterTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Space heater type common attributes.\\X\\0ASoundLevel attribute deleted in IFC2x2 Pset Addendum: Use IfcSoundProperties instead."^^xsd:string ;
        pset:groups   pset:thermalEfficiency , pset:outputCapacity , pset:thermalMassHeatCapacity , pset:bodyMass , pset:material , pset:heatingSource , pset:temperatureClassification .

pset:leakageFullyClosed
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Leakage when fully closed."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumetricFlowRateMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DamperTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LeakageFullyClosed" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:columnShoeCasingHeight
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The height of the column shoe casing."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryColumnShoe ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ColumnShoeCasingHeight" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:bodyDepth  a         ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal or quoted length, measured along the z-axis of the local coordinate system of the object, of the body of the object."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_WasteTerminalTypeGreaseInterceptor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BodyDepth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:projectedArea  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Area of the roof projected onto a 2D horizontal plane"^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_RoofCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ProjectedArea" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:scrapFactor  a       ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Sheet metal scrap factor"^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DuctDesignCriteria ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ScrapFactor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:length  a            ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The length of the sump."^^xsd:string , "Length of the pipe segment."^^xsd:string , "Length of the fin as measured parallel to the direction of airflow."^^xsd:string , "The finished length of the silencer."^^xsd:string , "Length of the tubes in the tube bundle."^^xsd:string , "The length of the pit."^^xsd:string , "Length of the duct segment."^^xsd:string , "Length of the duct segment. If a Length attribute is provided in the occurrence property set, it supersedes this value."^^xsd:string ;
        rdfs:range        ifcowl:IfcLengthMeasure , ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DuctSilencerTypeCommon , pset:Pset_FlowSegmentDuctSegment , pset:Pset_DuctSegmentTypeCommon , pset:Pset_FlowSegmentPipeSegment , pset:Pset_DistributionChamberElementTypeSump , pset:Pset_TubeBundleTypeCommon , pset:Pset_TubeBundleTypeFinned , pset:Pset_DistributionChamberElementTypeInspectionPit ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Length" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_TransportElementElevator
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all occurrences of IfcTransportElement with the predefined type =\"ELEVATOR\""^^xsd:string ;
        pset:groups   pset:clearHeight , pset:clearDepth , pset:clearWidth .

pset:hasLadder  a         ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication of whether the tank is provided with a ladder (set TRUE) for access to the top. If no ladder is provided then value is set FALSE.\\X\\0A\\X\\0ANote: No indication is given of the type of ladder (gooseneck etc.)"^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FlowStorageDeviceTank ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasLadder" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DistributionChamberElementTypeInspectionPit
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Recess or chamber formed to permit access for inspection of substructure and services (definition modified from BS6100 221 4128)."^^xsd:string ;
        pset:groups   pset:depth , pset:width , pset:length .

pset:colorTemperature
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The color temperature of any source of radiation is defined as the temperature (in Kelvin) of a black-body or Planckian radiator whose radiation has the same chromaticity as the source of radiation. Often the values are only approximate color temperatures as the black-body radiator cannot emit radiation of every chromaticity value. The color temperatures of the commonest artificial light sources range from less than 3000K (warm white) to 4000K (intermediate) and over 5000K (daylight)."^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_LampTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ColorTemperature" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:artificialLighting
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication whether this space  requires artificial lighting (as natural lighting would be not sufficient). (TRUE) indicates yes (FALSE) otherwise."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceLightingRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ArtificialLighting" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ActuatorTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Actuator type common attributes."^^xsd:string ;
        pset:groups   pset:manualOverride , pset:failPosition .

pset:Pset_WallCommon  a  ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all occurrences of IfcWall and IfcWallStandardCase."^^xsd:string ;
        pset:groups   pset:compartmentation , pset:thermalTransmittance , pset:combustible , pset:extendToStructure , pset:acousticRating , pset:surfaceSpreadOfFlame , pset:loadBearing , pset:fireRating , pset:reference , pset:isExternal .

pset:Pset_SwitchingDeviceTypeStarter
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A starter is a switch which in the closed position controls the application of power to an electrical device."^^xsd:string ;
        pset:groups   pset:starterType .

pset:diagonalTrussHeight
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The overall height of the truss connector."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryDiagonalTrussConnector ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "DiagonalTrussHeight" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:numberOfOpenings
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Maximum number of openings that can fit with the case for normal use. In the openings there must be nipples, so cable may run through."^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ElectricDistributionPointCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NumberOfOpenings" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hoopBarPitch  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The pitch length of the hoop bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarPitchOfColumn ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HoopBarPitch" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:isTempered  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication whether the glass is tempered (TRUE) or not (FALSE) ."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DoorWindowGlazingType ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsTempered" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:seatingHeight  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The value of seating height if the chair height is not adjustable."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FurnitureTypeChair ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SeatingHeight" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:finalResistance  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Filter fluid resistance when replacement is required (i.e., Pressure drop at the maximum air flowrate across the filter when the filter needs replacement per ASHRAE Standard 52.1)."^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FilterTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FinalResistance" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:infiltrationDiversityWinter
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Diversity factor for Winter infiltration."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ThermalLoadAggregate , pset:Pset_AirSideSystemInformation ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "InfiltrationDiversityWinter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:edgeFixingPlateThickness
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The thickness of the L-shaped edge plate."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryEdgeFixingPlate ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "EdgeFixingPlateThickness" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SpaceLightingRequirements
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties related to the lighting requirements that apply to the occurrences of IfcSpace or IfcZone. This includes the required artificial lighting, illuminance, etc."^^xsd:string ;
        pset:groups   pset:illuminance , pset:artificialLighting .

pset:Pset_DistributionChamberElementTypeSump
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from BS6100 100 3431: Recess or small chamber into which liquid is drained to facilitate its removal."^^xsd:string ;
        pset:groups   pset:invertLevel , pset:width , pset:length .

pset:location  a          ifcdoc:P_SINGLEVALUE , rdf:Property , ifcdoc:P_ENUMERATEDVALUE , spin:MagicProperty ;
        rdfs:comment      "General description of the required location for the space (e.g. \"third floor south\")"^^xsd:string , "Location  (a single type of diffuser can be used for multiple locations); high means close to ceiling."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FlowTerminalAirTerminal , pset:Pset_SpaceProgramCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Location" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:solarHeatGainTransmittance
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Total solar heat transmittance that passes the glazing at normal incidence. It is a value without unit, often referred to as (SHGC):."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DoorWindowGlazingType ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SolarHeatGainTransmittance" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SanitaryTerminalTypeShower
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Installation or waste water appliance that emits a spray of water to wash the human body (BS6100)."^^xsd:string ;
        pset:groups   pset:material , pset:showerType , pset:hasTray , pset:drainSize , pset:color , pset:nominalDepth , pset:nominalWidth , pset:materialThickness , pset:showerHeadDescription , pset:nominalLength .

pset:supplyEvaluationValue
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Value of the subject matter as determined using an agreed scale for what is provided, or capable of being provided."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProductRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SupplyEvaluationValue" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:finish  a            ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Finish selection for this object.\\X\\0AHere specification of the surface finish for informational purposes"^^xsd:string , "Description of the finish applied to the faucet"^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ValveTypeFaucet , pset:Pset_CoveringCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Finish" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:compressorSpeed  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Compressor speed"^^xsd:string ;
        rdfs:range        ifcowl:IfcRotationalFrequencyMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CompressorTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CompressorSpeed" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_TankTypePreformed
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Fixed vessel manufactured as a single unit with one or more compartments for storing a liquid.\\X\\0A\\X\\0APset renamed from Pset_TankTypePreformedTank to Pset_TankTypePreformed in IFC2x2 Pset Addendum."^^xsd:string ;
        pset:groups   pset:secondCurvatureRadius , pset:firstCurvatureRadius , pset:endShapeType , pset:patternType .

pset:condenserEnteringTemperature
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Temperature of fluid entering condenser per manufacturers listing (if available)"^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_UnitaryEquipmentTypeAirConditioningUnit ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CondenserEnteringTemperature" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:heatingCapacity  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Heating capacity of the PackagedACUnit per ARI Standards 210/240, 270, 275, 360, 340 and 365 for heat pumps, AFUE for fuel burning and NEMA for electric heat."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_UnitaryEquipmentTypeAirConditioningUnit ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HeatingCapacity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SwitchingDeviceTypeSwitchDisconnector
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IEC 441-14-12: A switch disconnector is a switch which in the open position satisfies the isolating requirements specified for a disconnector."^^xsd:string ;
        pset:groups   pset:hasVisualIndication , pset:loadDisconnectionType , pset:switchDisconnectorType .

pset:Pset_EvaporatorPHistory
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Evaporator performance history attributes."^^xsd:string ;
        pset:groups   pset:exteriorHeatTransferCoefficient , pset:refrigrerantFoulingResistance , pset:compressorEvaporatorHeatGain , pset:uAcurves , pset:logarithmicMeanTemperatureDifference , pset:compressorEvaporatorPressureDrop , pset:waterFoulingResistance , pset:evaporatorMeanVoidFraction , pset:heatRejectionRate , pset:interiorHeatTransferCoefficient , pset:evaporatingTemperature .

pset:loadSafetyFactor
        a                 spin:MagicProperty , rdf:Property , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Load safety factor."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ThermalLoadAggregate , pset:Pset_AirSideSystemInformation ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LoadSafetyFactor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:bodyColor  a         ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Color of the body of the hydrant.\\X\\0A\\X\\0ANote: Consult local fire regulations for statutory colors that may be required for hydrant bodies in particular circumstances."^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FireSuppressionTerminalTypeFireHydrant ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BodyColor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SpaceCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all occurrences of IfcSpace. Please note that several space attributes are handled directly at the IfcSpace instance, the space number (or short name) by IfcSpace.Name, the space name (or long name) by IfcSpace:LongName, and the description (or comments) by IfcSpace.Description. Actual space quantities, like space perimeter, space area and space volume are provided by IfcElementQuantities, and space classification according to national building code by IfcClassificationReference. The level above zero (relative to the building) for the slab row construction is provided by the IfcBuildingStorey.Elevation, the level above zero (relative to the building) for the floor finish is provided by the IfcSpace.ElevationWithFlooring."^^xsd:string ;
        pset:groups   pset:grossPlannedArea , pset:handicapAccessible , pset:publiclyAccessible , pset:wallCovering , pset:category , pset:floorCovering , pset:skirtingBoard , pset:concealedFlooring , pset:concealedCeiling , pset:ceilingCovering , pset:netPlannedArea , pset:reference .

pset:changeDescription
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "A general description of the change."^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProjectOrderChangeOrder ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ChangeDescription" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:shipMethod  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Method of shipping that will be used for goods or services."^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProjectOrderPurchaseOrder ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ShipMethod" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_WasteTerminalTypeFloorWaste
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Pipe fitting, set into the floor, that collects waste water and discharges it to a separate trap."^^xsd:string ;
        pset:groups   pset:nominalBodyLength , pset:nominalBodyWidth , pset:outletConnectionSize , pset:coverLength , pset:coverMaterial , pset:coverWidth , pset:nominalBodyDepth , pset:bodyMaterial .

pset:wireLoopLength  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The length of the fastening loop part of the wire."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryWireLoop ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "WireLoopLength" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hasProtectiveEarth
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indicates whether the electrical device has a protective earth connection (=TRUE) or not (= FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ElectricalDeviceCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasProtectiveEarth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_PipeFittingTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Pipe fitting type common attributes."^^xsd:string ;
        pset:groups   pset:subType , pset:innerDiameter , pset:temperatureRange , pset:material , pset:pressureRange , pset:endStyleTreatment , pset:pressureClass , pset:nominalDiameter , pset:outerDiameter , pset:fittingLossFactor , pset:unitWeight .

pset:requestDescription
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The request description as provided."^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ActionRequest ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "RequestDescription" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_Risk  a     ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: An indication of exposure to mischance, peril, menace, hazard or loss. \\X\\0A\\X\\0AHISTORY: Extended in IFC2x3\\X\\0A\\X\\0AThere are various types of risk that may be encountered and there may be several instances of Pset_Risk associated in an instance of an IfcObject (either a physical object, a grouping of physical objects such as an asset or a process).\\X\\0ASpecification of this property set incorporates the values of the Incom risk analysis matrix (satisfying AS/NZS 4360) together with additional identified requirements."^^xsd:string ;
        pset:groups   pset:preventiveMeassures , pset:riskOwner , pset:riskCause , pset:riskType , pset:subNatureOfRisk1 , pset:affectsSurroundings , pset:riskConsequence , pset:riskRating , pset:assessmentOfRisk , pset:natureOfRisk , pset:subNatureOfRisk2 .

pset:sensibleHeatRatio
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Air-side sensible heat ratio, or fraction of sensible heat transfer to the total heat transfer."^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CoilTypeHydronic ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SensibleHeatRatio" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SpaceOccupancyRequirements
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties concerning work activities occurring or expected to occur within one or a set of similar spatial structure elements."^^xsd:string ;
        pset:groups   pset:isOutlookDesirable , pset:minimumHeadroom , pset:areaPerOccupant , pset:occupancyTimePerDay , pset:occupancyNumberPeak , pset:occupancyNumber , pset:occupancyType .

pset:occupancyTimePerDay
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The amount of time during the day that the activity is required within this space."^^xsd:string ;
        rdfs:range        ifcowl:IfcTimeMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceOccupancyRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "OccupancyTimePerDay" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FilterTypeAirParticleFilter
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Air particle filter type attributes."^^xsd:string ;
        pset:groups   pset:faceSurfaceArea , pset:dustHoldingCapacity , pset:separationType , pset:mediaExtendedArea , pset:frameMaterial , pset:nominalWeightedEfficiency , pset:nominalCountedEfficiency , pset:airParticleFilterType , pset:mediaMaterial , pset:weightedEfficiencyCurve , pset:countedEfficiencyCurve , pset:pressureDropCurve .

pset:primaryVoltage  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The voltage that is going to be transformed and that runs into the transformer on the primary side."^^xsd:string ;
        rdfs:range        ifcowl:IfcElectricVoltageMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TransformerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "PrimaryVoltage" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ZoneCommon  a  ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all occurrences of IfcZone."^^xsd:string ;
        pset:groups   pset:handicapAccessible , pset:publiclyAccessible , pset:netAreaPlanned , pset:grossAreaPlanned , pset:category , pset:reference .

pset:bECShapeParameter_g
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter g."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBECCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BECShapeParameter_g" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:crossingUpperBarPitch
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The pitch length of the crossing upper bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarPitchOfContinuousFooting ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CrossingUpperBarPitch" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:isMain  a            spin:MagicProperty , rdf:Property , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Identifies if the current instance is a main distribution point or topmost level in an electrical distribution hierarchy (= TRUE) or a sub-main distribution point (= FALSE)."^^xsd:string , "Indicates whether the meter is the main meter on the system. If FALSE, it is a submeter."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FlowMeterTypeCommon , pset:Pset_ElectricDistributionPointCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsMain" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:finishing  a         ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The finishing applied to system furniture elements of this type e.g. walnut, fabric."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SystemFurnitureElementTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Finishing" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:shortInsideEndLowerBarPitch
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The pitch length of the short inside end lower bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcementBarPitchOfSlab ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ShortInsideEndLowerBarPitch" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:coolingDryBulb  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Inside dry bulb temperature for cooling design"^^xsd:string , "Outside dry bulb temperature for cooling design"^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_OutsideDesignCriteria , pset:Pset_SpaceThermalDesign ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CoolingDryBulb" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:shapeDescription
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "A description of the shape of the work surface e.g. corner square, rectangle, etc."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SystemFurnitureElementTypeWorkSurface ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ShapeDescription" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:heatingDryBulb  a    ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "Outside dry bulb temperature for heating design"^^xsd:string , "Inside dry bulb temperature for heating design"^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalDesign , pset:Pset_OutsideDesignCriteria ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HeatingDryBulb" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_EvaporativeCoolerTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Evaporative cooler type common attributes.\\X\\0ASound attribute deleted in IFC2x2 Pset Addendum: Use IfcSoundProperties instead. WaterRequirement attribute unit type modified in IFC2x2 Pset Addendum."^^xsd:string ;
        pset:groups   pset:waterRequirement , pset:weight , pset:operationTemperatureRange , pset:heatExchangerMediaMaterials , pset:heatExchangeArea , pset:flowArrangement .

pset:demandValue  a       ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Value of the subject matter as determined using an agreed scale for what is required."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProductRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "DemandValue" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:isLaminated  a       ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication whether the glass is layered with other materials (TRUE) or not (FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DoorWindowGlazingType ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsLaminated" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:bECShapeAid_y  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape measure aid y."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBECCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BECShapeAid_y" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_BuildingWaterStorage
        a             ifcdoc:PropertySet ;
        rdfs:comment  "The basic set of properties that are used for determining the water requirements for a building.\\X\\0ATypically, this property set is expected to be used in conjunction with IfcBuilding."^^xsd:string ;
        pset:groups   pset:oneDayProcessOrProductionWater , pset:oneDayCoolingTowerMakeupWater , pset:oneDayEssentialWater , pset:oneDayPotableWater , pset:waterStorageRatePerPerson .

pset:fixingSocketThreadLength
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The length of the threaded part of the fixing socket."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryFixingSocket ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FixingSocketThreadLength" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_CurtainWallCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all occurrences of IfcCurtainWall."^^xsd:string ;
        pset:groups   pset:isExternal , pset:thermalTransmittance , pset:surfaceSpreadOfFlame , pset:combustible , pset:fireRating , pset:acousticRating , pset:reference .

pset:staggeredRowSpacing
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Staggered tube row spacing."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TubeBundleTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "StaggeredRowSpacing" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:outletConnectionSize
        a                 spin:MagicProperty , rdf:Property , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Size of the outlet connection from the waste disposal unit"^^xsd:string , "Size of the outlet connection from the object"^^xsd:string , "The size of the pipework connection from the mixing valve."^^xsd:string , "Size of the outlet connection."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_WasteTerminalTypeGullySump , pset:Pset_WasteTerminalTypeWasteDisposalUnit , pset:Pset_WasteTerminalTypePetrolInterceptor , pset:Pset_WasteTerminalTypeOilInterceptor , pset:Pset_ValveTypeMixing , pset:Pset_WasteTerminalTypeRoofDrain , pset:Pset_WasteTerminalTypeFloorWaste , pset:Pset_WasteTerminalTypeWasteTrap , pset:Pset_WasteTerminalTypeGullyTrap , pset:Pset_WasteTerminalTypeGreaseInterceptor , pset:Pset_WasteTerminalTypeFloorTrap ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "OutletConnectionSize" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_BuildingCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all instances of IfcBuilding. Please note that several building attributes are handled directly at the IfcBuilding instance, the building number (or short name) by IfcBuilding.Name, the building name (or long name) by IfcBuilding.LongName, and the description (or comments) by IfcBuilding.Description. Actual building quantities, like building perimeter, building area and building volume are provided by IfcElementQuantities, and the building classification according to national building code by IfcClassificationReference."^^xsd:string ;
        pset:groups   pset:mainFireUse , pset:numberOfStoreys , pset:sprinklerProtection , pset:sprinklerProtectionAutomatic , pset:yearOfConstruction , pset:isPermanentID , pset:isLandmarked , pset:grossPlannedArea , pset:occupancyType , pset:ancillaryFireUse , pset:buildingID .

pset:Pset_FanTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Fan type common attributes."^^xsd:string ;
        pset:groups   pset:nominalRotationSpeed , pset:nominalPowerRate , pset:wheelMaterial , pset:nominalAirFlowRate , pset:nominalTotalPressure , pset:housingMaterial , pset:capacityControlType , pset:operationTemperatureRange , pset:weight , pset:motorDriveType , pset:operationalCriteria , pset:nominalStaticPressure .

pset:bypassFactor  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Fraction of air that is bypassed by the coil (0-1)."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CoilTypeHydronic ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BypassFactor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hangingHeight  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The hanging height of the worksurface."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SystemFurnitureElementTypeWorkSurface ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HangingHeight" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalPressureDrop
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Total pressure drop across the filter."^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FilterTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalPressureDrop" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:fillGas  a           ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Name of the gas by which the gap between two glass layers is filled. It is given for information purposes only."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DoorWindowGlazingType ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FillGas" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:condenserLeavingTemperature
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Termperature of fluid leaving condenser per manufacturers listing (if available)"^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_UnitaryEquipmentTypeAirConditioningUnit ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CondenserLeavingTemperature" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:force  a             ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indicates the maximum close-off force for the actuator."^^xsd:string ;
        rdfs:range        ifcowl:IfcForceMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ActuatorTypeLinearActuation ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Force" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalDamperDiameter
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal damper diameter."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirTerminalBoxTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalDamperDiameter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_LightFixtureTypeExitSign
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties that characterize an illuminated exit sign"^^xsd:string ;
        pset:groups   pset:addressablility , pset:pictogramEscapeDirection , pset:backupSupplySystem , pset:selfTestFunction , pset:minimumTextHeight .

pset:coverWidth  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The length measured along the y-axis in the local coordinate system of the cover of the  waste."^^xsd:string , "The length measured along the x-axis in the local coordinate system of the cover of the oil interceptor."^^xsd:string , "The length measured along the x-axis in the local coordinate system of the cover of the grease interceptor."^^xsd:string , "The length measured along the y-axis in the local coordinate system of the cover of the  trap."^^xsd:string , "The length measured along the y-axis in the local coordinate system of the cover of the gully trap."^^xsd:string , "The length measured along the y-axis in the local coordinate system of the cover of the  drain."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_WasteTerminalTypeGullySump , pset:Pset_WasteTerminalTypeRoofDrain , pset:Pset_WasteTerminalTypeGreaseInterceptor , pset:Pset_WasteTerminalTypeFloorWaste , pset:Pset_WasteTerminalTypeOilInterceptor , pset:Pset_WasteTerminalTypePetrolInterceptor , pset:Pset_WasteTerminalTypeGullyTrap , pset:Pset_WasteTerminalTypeFloorTrap ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CoverWidth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DuctConnection
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: This property set is used to define the various types of duct connections. It is applied to occurrences of duct segments and fittings."^^xsd:string ;
        pset:groups   pset:connectionType .

pset:isExternal  a        ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "Indication whether the element is designed for use in the exterior (TRUE) or not (FALSE). If (TRUE) it is an external element and faces the outside of the building"^^xsd:string , "Indication whether the element is designed for use in the exterior (TRUE) or not (FALSE). If (TRUE) it is an external element and faces the outside of the building."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_WindowCommon , pset:Pset_RailingCommon , pset:Pset_MemberCommon , pset:Pset_RoofCommon , pset:Pset_PlateCommon , pset:Pset_SlabCommon , pset:Pset_CurtainWallCommon , pset:Pset_StairCommon , pset:Pset_BeamCommon , pset:Pset_WallCommon , pset:Pset_ColumnCommon , pset:Pset_RampCommon , pset:Pset_DoorCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "IsExternal" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_PumpTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Common attributes of a pump type."^^xsd:string ;
        pset:groups   pset:flowResistanceRange , pset:casingMaterial , pset:flowRateRange , pset:connectionSize , pset:nominalRotationSpeed , pset:netPositiveSuctionHead , pset:temperatureRange , pset:impellerMaterial , pset:impellerSealMaterial .

pset:Pset_CondenserTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Condenser type common attributes."^^xsd:string ;
        pset:groups   pset:refrigerantClass , pset:externalSurfaceArea , pset:nominalHeatTransferCoefficient , pset:internalWaterVolume , pset:refrigerantType , pset:internalSurfaceArea , pset:internalRefrigerantVolume , pset:nominalHeatTransferArea .

pset:inLineRowSpacing
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "In-line tube row spacing."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TubeBundleTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "InLineRowSpacing" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:frameDepth  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The length (or depth) of the damper frame."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DamperTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FrameDepth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SanitaryTerminalTypeToiletPan
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Soil appliance for the disposal of excrement."^^xsd:string ;
        pset:groups   pset:panMaterial , pset:nominalLength , pset:panColor , pset:toiletPanType , pset:spilloverLevel , pset:toiletType , pset:panMounting , pset:nominalWidth , pset:nominalDepth .

pset:Pset_ValveTypeGasTap
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A small diameter valve, used to discharge gas from a system."^^xsd:string ;
        pset:groups   pset:hasHoseUnion .

pset:acousticRating  a    rdf:Property , ifcdoc:P_SINGLEVALUE , spin:MagicProperty ;
        rdfs:comment      "Acoustic rating for this object.\\X\\0AIt is giving according to the national building code. It indicates the sound transmission resistance of this object by an index ration (instead of providing full sound absorbtion values)."^^xsd:string , "Acoustic rating for this object. It is giving according to the national building code. It indicates the sound transmission resistance of this object by an index ration (instead of providing full sound absorbtion values"^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CoveringCommon , pset:Pset_WindowCommon , pset:Pset_CurtainWallCommon , pset:Pset_DoorCommon , pset:Pset_SlabCommon , pset:Pset_PlateCommon , pset:Pset_WallCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AcousticRating" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:bS8666ShapeParameter_E
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter E."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBS8666Common ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BS8666ShapeParameter_E" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:classificationAuthority
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The name of the authority that applies the classification of service to the hose reel (e.g. NFPA/FEMA)"^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FireSuppressionTerminalTypeHoseReel ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ClassificationAuthority" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:coilFaceArea  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Coil face area in the direction against air the flow."^^xsd:string ;
        rdfs:range        ifcowl:IfcAreaMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CoilTypeHydronic ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CoilFaceArea" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SanitaryTerminalTypeSanitaryFountain
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A sanitary terminal that provides a low pressure jet of water for a specific purpose (IAI)."^^xsd:string ;
        pset:groups   pset:drainSize , pset:nominalDepth , pset:material , pset:mounting , pset:fountainType , pset:nominalWidth , pset:nominalLength , pset:color .

pset:bECCuttingLength
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Usually calculated from the sum of the partial length parameters with corrections for the bendings."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBECCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BECCuttingLength" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:glazingAreaFraction
        a                 ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "Fraction of the glazing area relative to the total area of the filling element. \\X\\0AIt shall be used, if the glazing area is not given separately for all panels within the filling element."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DoorCommon , pset:Pset_WindowCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "GlazingAreaFraction" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hasTurbulator  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "TRUE if the tube has a turbulator, FALSE if it does not."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TubeBundleTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasTurbulator" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:flangeStandard  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Designation of the standard describing the flange table"^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_PipeConnectionFlanged ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FlangeStandard" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:diagonalTrussCrossBarSpacing
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The spacing between diagonal cross-bar sections."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryDiagonalTrussConnector ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "DiagonalTrussCrossBarSpacing" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:electricalDeviceNominalPower
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The output power rating that is certified for a device."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ElectricalDeviceCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ElectricalDeviceNominalPower" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:ladderTrussHeight
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The overall height of the truss connector."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryLadderTrussConnector ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LadderTrussHeight" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:housingThickness
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Air terminal box housing material thickness."^^xsd:string ;
        rdfs:range        ifcowl:IfcLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirTerminalBoxTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HousingThickness" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:aspectRatio  a       ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The default aspect ratio"^^xsd:string ;
        rdfs:range        ifcowl:IfcReal ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DuctDesignCriteria ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AspectRatio" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DamperTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Damper type common attributes."^^xsd:string ;
        pset:groups   pset:sealMaterial , pset:lossCoefficentCurve , pset:bladeEdge , pset:temperatureRange , pset:maximumWorkingPressure , pset:nominalAirFlowRate , pset:operation , pset:frameMaterial , pset:frameDepth , pset:bladeShape , pset:maximumAirFlowRate , pset:numberofBlades , pset:orientation , pset:closeOffRating , pset:frameThickness , pset:bladeAction , pset:bladeMaterial , pset:frameType , pset:bladeThickness , pset:leakageFullyClosed , pset:openPressureDrop , pset:leakageCurve , pset:faceArea , pset:regeneratedSoundCurve , pset:torqueRange , pset:temperatureRating .

pset:Pset_SensorTypeGasSensor
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A device that senses or detects gas."^^xsd:string ;
        pset:groups   pset:timeConstant , pset:accuracyOfGasSensor , pset:gasSensorRange , pset:gasSensorSetPoint , pset:gasDetected .

pset:Pset_ProjectCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Common properties for a building project."^^xsd:string ;
        pset:groups   pset:grossAreaPlanned , pset:buildingPermitId , pset:constructionMode .

pset:interiorRoughnessCoefficient
        a                 spin:MagicProperty , ifcdoc:P_SINGLEVALUE , rdf:Property ;
        rdfs:comment      "The interior roughness of the duct fitting material."^^xsd:string , "The interior roughness coefficient of the pipe segment."^^xsd:string , "The interior roughness of the pipe fitting material."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FlowSegmentDuctSegment , pset:Pset_FlowFittingPipeFitting , pset:Pset_FlowSegmentPipeSegment ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "InteriorRoughnessCoefficient" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:flammabilityRating
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Flammability Rating for this object.\\X\\0AIt is given according to the national building code that governs the rating of flammability for materials."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CoveringCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FlammabilityRating" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:ceilingRAPlenum  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Ceiling plenum used for return air or not. TRUE = Yes, FALSE = No."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalDesign ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CeilingRAPlenum" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:airflowSensible  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The air flowrate required to satisfy the sensible peak loads."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumetricFlowRateMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirSideSystemInformation ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AirflowSensible" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_CoilPHistory
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Coil performance history common attributes.\\X\\0ASound attribute deleted in IFC2x2 Pset Addendum: Use IfcSoundProperties instead."^^xsd:string ;
        pset:groups   pset:faceVelocity , pset:soundCurve , pset:airPressureDropCurve , pset:atmosphericPressure .

pset:anchorBoltThreadLength
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The length of the threaded part of the anchor bolt."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryAnchorBolt ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AnchorBoltThreadLength" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:totalAirflow  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The total design supply air flowrate required for the system for either heating or cooling conditions, whichever is greater."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumetricFlowRateMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirSideSystemInformation ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "TotalAirflow" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_BinaryInput
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Defines the characteristics of a binary input."^^xsd:string ;
        pset:groups   pset:inactiveText , pset:eventEnable , pset:minimumOnTime , pset:ackedTransitions , pset:minimumOffTime , pset:polarity , pset:feedbackValue , pset:activeText .

pset:Pset_ValveTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Valve type common attributes."^^xsd:string ;
        pset:groups   pset:workingPressure , pset:operatingMechanismMaterial , pset:testPressure , pset:bodyMaterial , pset:closeOffRating , pset:size , pset:valvePattern , pset:flowCoefficient , pset:valveOperation , pset:valveMechanism .

pset:Pset_BuildingUse
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Provides information on on the real estate context of the building of interest both current and anticipated."^^xsd:string ;
        pset:groups   pset:narrativeText , pset:tenureModesAvailableNow , pset:marketSubCategoriesAvailableFuture , pset:vacancyRateInCategoryFuture , pset:vacancyRateInCategoryNow , pset:planningControlStatus , pset:rentalRatesInCategoryNow , pset:marketSubCategoriesAvailableNow , pset:rentalRatesInCategoryFuture , pset:marketCategory , pset:marketSubCategory , pset:tenureModesAvailableFuture .

pset:diversity  a         ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "A factor that is a means of reducing the cable size on the basis that not all the connected load will be drawing current simultaneously."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ElectricalCircuit ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Diversity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:smokeStop  a         spin:MagicProperty , ifcdoc:P_SINGLEVALUE , rdf:Property ;
        rdfs:comment      "Indication whether the object is designed to provide a smoke stop (TRUE) or not (FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DoorCommon , pset:Pset_WindowCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SmokeStop" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:modelReference  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The name of the manufactured item as used by the manufacturer."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ManufacturerTypeInformation ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ModelReference" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_AnalogOutput
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Defines the characteristics of an analog output."^^xsd:string ;
        pset:groups   pset:notifyType , pset:eventEnable , pset:lowLimitEnable , pset:highLimitEnable , pset:deadband , pset:lowLimit , pset:highLimit .

pset:flowRating  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Actual flow capacity for the gutter. Value of 0.00 means this value has not been set."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumetricFlowRateMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_PipeSegmentTypeGutter ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FlowRating" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:reflectance  a       ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The ratio of reflected power to incident power."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ElementShading ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Reflectance" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SensorTypeHumiditySensor
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A device that senses or detects humidity."^^xsd:string ;
        pset:groups   pset:timeConstant , pset:accuracyOfHumiditySensor , pset:humiditySensorRange , pset:humiditySetPoint .

pset:initialResistance
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Initial new filter fluid resistance (i.e., pressure drop at the maximum air flowrate across the filter when the filter is new per ASHRAE Standard 52.1)."^^xsd:string ;
        rdfs:range        ifcowl:IfcPressureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FilterTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "InitialResistance" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:occupancyType  a     spin:MagicProperty , rdf:Property , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "Occupancy type for this object. It is defined according to the presiding national building code."^^xsd:string , "Occupancy type for this object.\\X\\0AIt is defined according to the presiding national building code."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceProgramCommon , pset:Pset_BuildingCommon , pset:Pset_SpaceOccupancyRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "OccupancyType" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:liftElevationDifference
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Elevation difference between cooling tower sump and the top of the tower."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CoolingTowerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LiftElevationDifference" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:cornerFixingPlateFlangeWidthInPlaneX
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The flange width of the L-shaped corner plate in plane X."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryCornerFixingPlate ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CornerFixingPlateFlangeWidthInPlaneX" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:coolingTemperatureDelta
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Cooling temperature difference for calculating space air flow rates"^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirSideSystemInformation ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CoolingTemperatureDelta" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:dIN135610ShapeParameter_a
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter a. Note: this parameter is also used for parameter a0 (shape code B3)"^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsDIN135610Common ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "DIN135610ShapeParameter_a" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:clearHeight  a       ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Clear height of the object (elevator).  \\X\\0AThe shape information is provided in addition to the shape representation and the geometric parameters used within. In cases of inconsistency between the geometric parameters and the shape properties, provided in the attached property, the geometric parameters take precedence."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TransportElementElevator ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ClearHeight" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_QuantityTakeOff
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Description of quantities for work items to be exchanged in addition to the IfcElementQuantity"^^xsd:string ;
        pset:groups   pset:localContext , pset:layerQuantity , pset:reference .

pset:demandThresholdValue
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Value of the subject matter above or below which a special significance is attached."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProductRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "DemandThresholdValue" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ActuatorTypeElectricActuator
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A device that electrically actuates a control element."^^xsd:string ;
        pset:groups   pset:electricActuatorType , pset:actuatorInputPower .

pset:nominalParticleGeometricMeanDiameter
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Particle geometric mean diameter associated with nominal efficiency."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FilterTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalParticleGeometricMeanDiameter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:operatingWeight  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Operating weight of the tank including all of its contents."^^xsd:string ;
        rdfs:range        ifcowl:IfcMassMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TankTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "OperatingWeight" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:meanTimeBetweenFailure
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The average time duration between instances of failure of a product."^^xsd:string ;
        rdfs:range        ifcowl:IfcTimeMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_Reliability ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MeanTimeBetweenFailure" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:discontinuedHeating
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication whether discontinued heating is required/desirable from user/designer view point. (TRUE) if yes, (FALSE) otherwise."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "DiscontinuedHeating" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SystemFurnitureElementTypePanel
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A set of specific properties for vertical panels that assembly workstations.. HISTORY: First issued in IFC Release R1.5. Renamed from Pset_Panel"^^xsd:string ;
        pset:groups   pset:nominalThickness , pset:furniturePanelType , pset:hasOpening .

pset:nominalFilterFaceVelocity
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Filter face velocity."^^xsd:string ;
        rdfs:range        ifcowl:IfcLinearVelocityMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FilterTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalFilterFaceVelocity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:diagonalTrussSecondaryBarDiameter
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The nominal diameter of the secondary bar."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryDiagonalTrussConnector ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "DiagonalTrussSecondaryBarDiameter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:shortJobDescription
        a                 rdf:Property , ifcdoc:P_SINGLEVALUE , spin:MagicProperty ;
        rdfs:comment      "Short description of the job requested."^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProjectOrderWorkOrder , pset:Pset_ProjectOrderMaintenanceWorkOrder ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ShortJobDescription" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DuctDesignCriteria
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: This property set is used to define the general characteristics of the duct design parameters. This property set is typically attached to an instance of an IfcSystem, however, it may also be attached to individual elements within a duct distribution system where individual design parameters overrule those of the system.\\X\\0AHISTORY: New property set in IFC Release 2.0."^^xsd:string ;
        pset:groups   pset:ductSealant , pset:frictionLoss , pset:designName , pset:scrapFactor , pset:minimumHeight , pset:ductSizingMethod , pset:pressureClass , pset:leakageClass , pset:minimumWidth , pset:maximumVelocity , pset:aspectRatio .

pset:Pset_ProtectiveDeviceTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Common properties for different protective device types."^^xsd:string ;
        pset:groups   pset:limitingTerminalSize , pset:maximumRatedVoltage , pset:ratedShortCircuitCurrent , pset:protectiveTagType , pset:characteristicTripCurve , pset:cutOffCurrent , pset:standardUsed , pset:switchingDuty .

pset:depth  a             ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The depth of the trench."^^xsd:string , "The depth of the pit."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DistributionChamberElementTypeInspectionPit , pset:Pset_DistributionChamberElementTypeTrench ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Depth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hasExteriorInsulation
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "TRUE if the silencer has exterior insulation. FALSE if it does not."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DuctSilencerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasExteriorInsulation" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:energyGainSensible
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The sum of total energy gains for the spaces served by the system during the peak cooling conditions, plus any system-level sensible energy gains."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirSideSystemInformation ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "EnergyGainSensible" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:primaryCurrent  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The current that is going to be transformed and that runs into the transformer on the primary side."^^xsd:string ;
        rdfs:range        ifcowl:IfcElectricCurrentMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TransformerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "PrimaryCurrent" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FurnitureTypeDesk
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A set of specific properties for furniture type desk. HISTORY: First issued in IFC Release R1.5. Renamed from Pset_Desk"^^xsd:string ;
        pset:groups   pset:worksurfaceArea .

pset:Pset_CoilTypeHydronic
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Hydronic coil type attributes."^^xsd:string ;
        pset:groups   pset:fluid , pset:wetCoilFraction , pset:waterPressureDropCurve , pset:coilCoolant , pset:coilFaceArea , pset:primarySurfaceArea , pset:totalUACurves , pset:heatExchangeSurfaceArea , pset:coilFluidArrangement , pset:sensibleHeatRatio , pset:bypassFactor , pset:fluidPressureRange , pset:coilConnectionDirection , pset:secondarySurfaceArea .

pset:coolingEfficiency
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Coefficient of Performance: Ratio of cooling energy output to energy input under full load operating conditions per ARI Standards 210/240, 270, 275, 360, 340 and 365."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_UnitaryEquipmentTypeAirConditioningUnit ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CoolingEfficiency" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:insideDiameter  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Actual inner diameter of the tube in the tube bundle."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TubeBundleTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "InsideDiameter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FlowMeterTypeEnergyMeter
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Device that measures, indicates and sometimes records, the energy usage in a system."^^xsd:string ;
        pset:groups   pset:connectionSize .

pset:Pset_PropertyAgreement
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A property agreement is an agreement that enables the occupation of a property for a period of time.\\X\\0A\\X\\0AThe objective is to capture the information within an  agreement that is relevant to a facilities manager. Design and construction information associated with the property is not considered. A property agreement may be applied to an instance of IfcSpatialStructureElement including to compositions defined through the IfcSpatialStructureElement.Element.CompositionEnum.\\X\\0A\\X\\0ANote that the associated actors are captured by the IfcOccupant class."^^xsd:string ;
        pset:groups   pset:restrictions , pset:commencementDate , pset:duration , pset:version , pset:conditionTermination , pset:versionDate , pset:options , pset:conditionCommencement , pset:identifier , pset:propertyName , pset:agreementType , pset:terminationDate .

pset:reinforcement  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The type of reinforcement, if any, used for the duct segment."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DuctSegmentTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Reinforcement" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:buildingID  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "A unique identifier assigned to a building. A temporary identifier is initially assigned at the time of making a planning application. This temporary identifier is changed to a permanent identifier when the building is registered into a statutory buildings and properties database."^^xsd:string ;
        rdfs:range        ifcowl:IfcIdentifier ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BuildingCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BuildingID" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ControllerTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties for signal handling for an analog controller taking disparate valued multiple inputs and creating a single valued output."^^xsd:string ;
        pset:groups   pset:signalTime , pset:signalFactor , pset:signalOffset , pset:controlType .

pset:Pset_BeamCommon  a  ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all occurrences of IfcBeam."^^xsd:string ;
        pset:groups   pset:fireRating , pset:loadBearing , pset:isExternal , pset:slope , pset:span , pset:reference .

pset:parallelJambs  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indicated, whether the jambs of an opening in a curved building element are intended to be parallel (TRUE) or are radial (FALSE). Radial means, that the extension of the jambs are rays through the axis of the revolution forming the curved building element."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_OpeningElementCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ParallelJambs" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:materialThickness
        a                 ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "Thickness of the material from which the tank is constructed"^^xsd:string , "The thickness of the duct fitting material."^^xsd:string , "Thickness of the material from which the object is constructed"^^xsd:string , "The thickness of the duct segment material."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TankTypeCommon , pset:Pset_SanitaryTerminalTypeShower , pset:Pset_SanitaryTerminalTypeBath , pset:Pset_FlowSegmentDuctSegment , pset:Pset_DuctFittingTypeCommon , pset:Pset_DuctSegmentTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MaterialThickness" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:numberOfActors  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The number of actors that are to be dealt with together in the population."^^xsd:string ;
        rdfs:range        ifcowl:IfcCountMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ActorCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NumberOfActors" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:glassThickness1  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Thickness of the first (inner) glass layer."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DoorWindowGlazingType ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "GlassThickness1" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hoseConnectionSize
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The size of connections to which a hose may be connected (other than that to be linked to a pumping unit)."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FireSuppressionTerminalTypeFireHydrant ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HoseConnectionSize" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DuctSilencerTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Duct silencer type common attributes.\\X\\0AInsertionLoss and RegeneratedSound attributes deleted in IFC2x2 Pset Addendum: Use IfcSoundProperties instead."^^xsd:string ;
        pset:groups   pset:hydraulicDiameter , pset:shape , pset:workingPressureRange , pset:temperatureRange , pset:airFlowrateRange , pset:weight , pset:length , pset:hasExteriorInsulation .

pset:bECShapeParameter_h
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter h."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsBECCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BECShapeParameter_h" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:electricGeneratorEfficiency
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The ratio of output capacity to intake capacity."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ElectricGeneratorTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ElectricGeneratorEfficiency" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:usePurpose  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The principal purpose for which the work surface is intended to be used e.g. writing/reading, computer, meeting, printer, reference files, etc."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SystemFurnitureElementTypeWorkSurface ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "UsePurpose" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:flangeDiameter  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Overall diameter of the flange"^^xsd:string ;
        rdfs:range        ifcowl:IfcLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_PipeConnectionFlanged ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FlangeDiameter" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:oneDayPotableWater
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The volume of water that needs to be stored to supply water to the building for human use for one day in the event of water supply failure."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumeMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BuildingWaterStorage ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "OneDayPotableWater" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_CooledBeamPHistoryActive
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Performance history attributes for an active cooled beam."^^xsd:string ;
        pset:groups   pset:airPressureDropCurves , pset:throw , pset:airFlowRate .

pset:tileWidth  a         ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Width of ceiling tiles. The size information is provided in addition to the shape representation and the geometric parameters used within. In cases of inconsistency between the geometric parameters and the size properties, provided in the attached property set, the geometric parameters take precedence."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CoveringCeiling ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "TileWidth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:energyLoss  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The sum of energy losses for the spaces served by the system during the peak heating conditions."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirSideSystemInformation ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "EnergyLoss" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DamperPHistory
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Damper performance history attributes."^^xsd:string ;
        pset:groups   pset:pressureLossCoefficient , pset:damperPosition , pset:bladePositionAngle , pset:pressureDrop , pset:leakage , pset:airFlowRate .

pset:Pset_ProtectiveDeviceTypeResidualCurrentCircuitBreaker
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A residual current circuit breaker opens, closes or isolates a circuit and has short circuit and overload protection."^^xsd:string ;
        pset:groups   pset:sensitivity .

pset:privacyRequirement
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "General description of the privacy requirement for the space (in addition to the security requirement)"^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceProgramCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "PrivacyRequirement" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:naturalVentilationRate
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication of the requirement of a particular natural air ventilation rate, given in air changes per hour."^^xsd:string ;
        rdfs:range        ifcowl:IfcCountMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NaturalVentilationRate" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:color  a             ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "The color of the pipe fitting.\\X\\0A\\X\\0ANote: This is typically used only for plastic pipe fittings. However, it may be used for any pipe fittings with a painted surface which is not otherwise specified as a covering."^^xsd:string , "Color of the object"^^xsd:string , "The color of the duct segment.\\X\\0A\\X\\0ANote: This is typically used for any duct segments with a painted surface which is not otherwise specified as a covering."^^xsd:string , "The color of the surface."^^xsd:string , "The color of the pipe segment.\\X\\0A\\X\\0ANote: This is typically used only for plastic pipe segments. However, it may be used for any pipe segments with a painted surface which is not otherwise specified as a covering."^^xsd:string , "Principal color of the object."^^xsd:string , "Color selection for this object"^^xsd:string , "The color of the duct fitting.\\X\\0A\\X\\0ANote: This is typically used for any duct fittings with a painted surface which is not otherwise specified as a covering."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel , ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SanitaryTerminalTypeSink , pset:Pset_SanitaryTerminalTypeShower , pset:Pset_SanitaryTerminalTypeBidet , pset:Pset_ElementShading , pset:Pset_FlowSegmentPipeSegment , pset:Pset_SanitaryTerminalTypeBath , pset:Pset_SanitaryTerminalTypeSanitaryFountain , pset:Pset_SanitaryTerminalTypeWashHandBasin , pset:Pset_FlowFittingDuctFitting , pset:Pset_FlowSegmentDuctSegment , pset:Pset_FlowFittingPipeFitting ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Color" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:cutOffCurrent  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The maximum instantaneous value of current attained during the breaking operation of a protective device. (IEC 441-17-12)"^^xsd:string ;
        rdfs:range        ifcowl:IfcElectricCurrentMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ProtectiveDeviceTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CutOffCurrent" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:requestComments  a   ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Comments that may be made on the request."^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ActionRequest ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "RequestComments" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:roughness  a         ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "A measure of the vertical deviations of the surface."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ElementShading ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Roughness" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DiscreteAccessoryColumnShoe
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Shape properties common to column shoes."^^xsd:string ;
        pset:groups   pset:columnShoeCasingDepth , pset:columnShoeCasingWidth , pset:columnShoeCasingHeight , pset:columnShoeBasePlateDepth , pset:columnShoeBasePlateWidth , pset:columnShoeBasePlateThickness .

pset:basinReserveVolume
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Volume between operating and overflow levels in cooling tower basin."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumeMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CoolingTowerTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "BasinReserveVolume" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SpaceParking
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all occurrences of IfcSpace which have an attribute value for ObjectType = Parking. NOTE: Modified in IFC 2x3, properties ParkingUse and ParkingUnits added."^^xsd:string ;
        pset:groups   pset:parkingUnits , pset:parkingUse , pset:handicapAccessible .

pset:accessLengthOrRadius
        a                 spin:MagicProperty , rdf:Property , ifcdoc:P_SINGLEVALUE ;
        rdfs:comment      "The length of the chamber access cover or, where the plan shape of the cover is circular, the radius."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DistributionChamberElementTypeManhole , pset:Pset_DistributionChamberElementTypeInspectionChamber ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AccessLengthOrRadius" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:outputCapacity  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Total nominal heat output as listed by the manufacturer."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceHeaterTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "OutputCapacity" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FlowFittingDuctFitting
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Duct fitting occurrence attributes attached to an instance of IfcFlowFitting."^^xsd:string ;
        pset:groups   pset:color , pset:hasLiner , pset:absoluteRoughnessFactor .

pset:exhaustAirFlowrate
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Design exhaust air flow rate for the space."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumetricFlowRateMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalDesign ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ExhaustAirFlowrate" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:remoteReading  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indicates whether the meter has a connection for remote reading through connection of a communication device (set TRUE) or not (set FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FlowMeterTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "RemoteReading" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hasSoundAttentuation
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "TRUE if the coil has sound attenuation, FALSE if it does not."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_EnergyConversionDeviceCoil ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasSoundAttentuation" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:minimumWidth  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The minimum duct width for oval or rectangular duct"^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DuctDesignCriteria ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MinimumWidth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:numberOfPanels  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Number of panels."^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_EnergyConversionDeviceSpaceHeaterPanel ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NumberOfPanels" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FireSuppressionTerminalTypeSprinkler
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Device for sprinkling water from a pipe under pressure over an area (BS6100 100 3432)"^^xsd:string ;
        pset:groups   pset:maximumWorkingPressure , pset:response , pset:coverageArea , pset:dischargeFlowRate , pset:residualFlowingPressure , pset:frameMaterial , pset:activation , pset:activationTemperature , pset:connectionSize , pset:dischargeCoefficient , pset:sprinklerType , pset:hasDeflector , pset:deflectorMaterial , pset:bulbLiquidColor .

pset:Pset_AirTerminalPHistory
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Air terminal performance history common attributes."^^xsd:string ;
        pset:groups   pset:centerlineAirVelocity , pset:inductionRatio , pset:pressureDrop , pset:supplyAirTemperatureCooling , pset:supplyAirTemperatureHeating , pset:neckAirVelocity , pset:airFlowRate .

pset:numberOfPlates  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Number of plates used by the plate heat exchanger."^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_HeatExchangerTypePlate ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NumberOfPlates" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DistributionChamberElementTypeInspectionChamber
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Chamber constructed on a drain, sewer or pipeline and with a removable cover, that permits visible inspection."^^xsd:string ;
        pset:groups   pset:chamberWidth , pset:baseThickness , pset:accessWidth , pset:accessLengthOrRadius , pset:wallMaterial , pset:baseMaterial , pset:soffitLevel , pset:wallThickness , pset:accessCoverLoadRating , pset:invertLevel , pset:chamberLengthOrRadius , pset:accessCoverMaterial , pset:withBackdrop .

pset:absoluteRoughnessFactor
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The absolute roughness factor of the duct fitting."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FlowFittingDuctFitting ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "AbsoluteRoughnessFactor" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:gradient  a          ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The gradient of the pipe segment."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveRatioMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_FlowSegmentPipeSegment ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "Gradient" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_ActorCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A property set that enables further classification of actors, including the ability to give a number of actors to be designated as a population, the number being specified as a property to be dealt with as a single value rather than having to aggregate a number of instances of IfcActor."^^xsd:string ;
        pset:groups   pset:skillLevel , pset:category , pset:numberOfActors .

pset:numberOfBoltholes
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Number of boltholes in the flange"^^xsd:string ;
        rdfs:range        ifcowl:IfcInteger ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_PipeConnectionFlanged ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NumberOfBoltholes" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasInteger ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:secondCurvatureRadius
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "SecondCurvatureRadius should be defined as the top or right side radius of curvature value."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_TankTypePreformed ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SecondCurvatureRadius" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:iSOCD3766ShapeParameter_a
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Bar shape parameter a."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsISOCD3766Common ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ISOCD3766ShapeParameter_a" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_MultiStateInput
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Defines the characteristics of a multi-state input."^^xsd:string ;
        pset:groups   pset:notifyType , pset:eventEnable , pset:alarmValues , pset:stateText , pset:numberOfStates .

pset:spaceTemperatureMin
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Minimal temperature of the space or zone, that is required from user/designer view point. If no summer or winter space temperature requirements are given, it applies all year, otherwise for the intermediate period."^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SpaceTemperatureMin" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:lightSensorAccuracy
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The accuracy of the sensor."^^xsd:string ;
        rdfs:range        ifcowl:IfcIlluminanceMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SensorTypeLightSensor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "LightSensorAccuracy" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:slotLength  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Slot length."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_AirTerminalTypeSlot ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "SlotLength" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:oneDayEssentialWater
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The volume of water that needs to be stored to supply water to the building for uninterrupted water supply to essential areas for one day in the event of water supply failure. An essential area is considered to be a part of a building carrying out a critical function and that is unable to operate in the intended manner without a water supply."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumeMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_BuildingWaterStorage ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "OneDayEssentialWater" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:nominalReturnWaterTemperatureHeating
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Nominal return water temperature (refers to nominal heating capacity)"^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CooledBeamTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NominalReturnWaterTemperatureHeating" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:columnShoeBasePlateWidth
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The width of the column shoe base plate."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryColumnShoe ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ColumnShoeBasePlateWidth" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_RampFlightCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all occurrences of IfcRampFlight."^^xsd:string ;
        pset:groups   pset:slope , pset:headroom , pset:reference .

pset:iSOCD3766ShapeCode
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The bending type code for the specific bending shape as defined in the ISO/CD 3766 standard. Note: depending on the standardized shape different combinations of following parameters a...e and R are used."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ReinforcingBarBendingsISOCD3766Common ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ISOCD3766ShapeCode" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_OutsideDesignCriteria
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Outside air conditions used as the basis for calculating thermal loads at peak conditions, as well as the weather data location from which these conditions were obtained. HISTORY: New property set in IFC Release 1.0."^^xsd:string ;
        pset:groups   pset:buildingThermalExposure , pset:heatingWetBulb , pset:weatherDataDate , pset:coolingDryBulb , pset:heatingDesignDay , pset:coolingDesignDay , pset:prevailingWindDirection , pset:weatherDataStation , pset:heatingDryBulb , pset:coolingWetBulb , pset:prevailingWindVelocity .

pset:tubingLength  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Water tube length inside the component."^^xsd:string ;
        rdfs:range        ifcowl:IfcLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceHeaterTypeHydronic ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "TubingLength" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:naturalVentilation
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication whether the space is required to have natural ventilation (TRUE) or mechanical ventilation (FALSE)."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalRequirements ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "NaturalVentilation" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_EnergyConsumptionPHistoryFuel
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Measured fuel energy consumption properties."^^xsd:string ;
        pset:groups   pset:flowrate , pset:pressure , pset:temperature .

pset:Pset_DoorCommon  a  ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to the definition of all occurrences of IfcDoor."^^xsd:string ;
        pset:groups   pset:isExternal , pset:fireExit , pset:reference , pset:handicapAccessible , pset:securityRating , pset:acousticRating , pset:smokeStop , pset:glazingAreaFraction , pset:fireRating , pset:thermalTransmittance , pset:selfClosing , pset:infiltration .

pset:totalHeatLoss  a     ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The total amount of heat or energy lost by the space at the time of the spaces peak heating conditions."^^xsd:string ;
        rdfs:range        ifcowl:IfcPowerMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalDesign ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "TotalHeatLoss" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FurnitureTypeChair
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A set of specific properties for furniture type chair. HISTORY: First issued in IFC Release R1.5. Renamed from Pset_Chair"^^xsd:string ;
        pset:groups   pset:lowestSeatingHeight , pset:highestSeatingHeight , pset:seatingHeight .

pset:ventilationAirFlowrate
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Ventilation outside air requirement for the space."^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumetricFlowRateMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceThermalDesign ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "VentilationAirFlowrate" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_BoilerPHistory
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Boiler performance history common attributes.\\X\\0AWaterQuality attribute deleted in IFC2x2 Pset Addendum: Use IfcWaterProperties instead. CombustionProductsMaximulLoad and CombustionProductsPartialLoad attributes deleted in IFC2x2 Pset Addendum: Use IfcProductsOfCombustionProperties instead."^^xsd:string ;
        pset:groups   pset:energySourceConsumption , pset:combustionTemperature , pset:partLoadRatio , pset:load , pset:workingPressure , pset:auxiliaryEnergyConsumption , pset:combustionEfficiency , pset:operationalEfficiency , pset:primaryEnergyConsumption .

pset:diagonalTrussLength
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The overall length of the truss connector."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryDiagonalTrussConnector ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "DiagonalTrussLength" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:showerHeadDescription
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "A description of the shower head(s) that emit the spray of water"^^xsd:string ;
        rdfs:range        ifcowl:IfcText ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SanitaryTerminalTypeShower ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ShowerHeadDescription" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:hasCover  a          ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Indication of whether the cable tray has a cover (=TRUE) or not (= FALSE). By default, this value should be set to FALSE."^^xsd:string ;
        rdfs:range        ifcowl:IfcBoolean ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_CableCarrierSegmentTypeCableTraySegment ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "HasCover" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasBoolean ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:coolingWetBulb  a    ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Outside wet bulb temperature for cooling design"^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_OutsideDesignCriteria ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CoolingWetBulb" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_FlowInstrumentTypeThermometer
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: A device that reads and displays a temperature value at a point."^^xsd:string ;
        pset:groups   pset:displaySize , pset:thermometerType .

pset:temperatureSensorSetPoint
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The temperature value to be sensed."^^xsd:string ;
        rdfs:range        ifcowl:IfcThermodynamicTemperatureMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SensorTypeTemperatureSensor ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "TemperatureSensorSetPoint" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:flushingRate  a      ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The predetermined quantity of water to be flushed"^^xsd:string ;
        rdfs:range        ifcowl:IfcVolumetricFlowRateMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_ValveTypeFlushing ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FlushingRate" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:cornerFixingPlateLength
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The length of the L-shaped corner plate."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DiscreteAccessoryCornerFixingPlate ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "CornerFixingPlateLength" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_DiscreteAccessoryAnchorBolt
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Properties common to different types of anchor bolts."^^xsd:string ;
        pset:groups   pset:anchorBoltProtrusionLength , pset:anchorBoltThreadLength , pset:anchorBoltDiameter , pset:anchorBoltLength .

pset:mainFireUse  a       ifcdoc:P_SINGLEVALUE , rdf:Property , spin:MagicProperty ;
        rdfs:comment      "Main fire use for the building which is assigned from the fire use classification table as given by the relevant national building code."^^xsd:string , "Main fire use for the space which is assigned from the fire use classification table as given by the relevant national building code."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SpaceFireSafetyRequirements , pset:Pset_BuildingCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "MainFireUse" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_SwitchingDeviceTypeCommon
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IEC 441-14-01: A switching device is a device designed to make or break the current in one or more electric circuits."^^xsd:string ;
        pset:groups   pset:hasLock , pset:switchFunction , pset:numberOfGangs .

pset:reinforcementSpacing
        a                 ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "The spacing between reinforcing elements."^^xsd:string ;
        rdfs:range        ifcowl:IfcPositiveLengthMeasure ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_DuctSegmentTypeCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "ReinforcementSpacing" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasDouble ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:fireRating  a        ifcdoc:P_SINGLEVALUE , spin:MagicProperty , rdf:Property ;
        rdfs:comment      "Fire rating given according to the national fire safety classification."^^xsd:string , "Fire rating for this object. It is given according to the national fire safety classification."^^xsd:string , "Fire rating for this object.\\X\\0AIt is given according to the national fire safety classification."^^xsd:string ;
        rdfs:range        ifcowl:IfcLabel ;
        rdfs:subClassOf   spin:MagicProperties ;
        pset:isGroupedBy  pset:Pset_SlabCommon , pset:Pset_ColumnCommon , pset:Pset_StairCommon , pset:Pset_CurtainWallCommon , pset:Pset_RoofCommon , pset:Pset_WindowCommon , pset:Pset_DoorCommon , pset:Pset_MemberCommon , pset:Pset_CoveringCommon , pset:Pset_WallCommon , pset:Pset_PlateCommon , pset:Pset_RampCommon , pset:Pset_BeamCommon ;
        spin:body         [ a                   sp:Select ;
                            sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                            sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                    sp:predicate  schm:hasProperty ;
                                                    sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                      sp:predicate  ifcowl:name_IfcProperty ;
                                                      sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                    ] [ sp:object     "FireRating" ;
                                                        sp:predicate  expr:hasString ;
                                                        sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                      ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                          sp:predicate  ifcowl:nominalValue_IfcPropertySingleValue ;
                                                          sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                            sp:predicate  expr:hasString ;
                                                            sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                          ] )
                          ] ;
        spin:constraint   [ a              spl:Argument ;
                            spl:predicate  sp:arg1 ;
                            spl:valueType  rdfs:Resource
                          ] .

pset:Pset_CableSegmentTypeCableSegment
        a             ifcdoc:PropertySet ;
        rdfs:comment  "Definition from IAI: Electrical cable with a specific purpose to lead electric current within a circuit or any other electric construction. Includes all types of electric cables, mainly several electrical segments wrapped together, e.g. cable, tube, busbar. Note that the number of conductors within a cable is determined by an aggregation mechanism that aggregates the conductors within the cable."^^xsd:string ;
        pset:groups   pset:nominalHeight , pset:maxOperatingTemperature , pset:cableInsulationMaterial , pset:normalOperatingTemperature , pset:nominalLength , pset:nominalWidthOrDiameter , pset:crossSectionalArea , pset:sheathColor .
