# baseURI: http://bimsparql.org/query-rewriting
# imports: http://rdfrepo.ddss.nl/rewrite
# imports: http://spinrdf.org/spin
# imports: http://www.buildingsmart-tech.org/ifcOWL/IFC2X3_TC1

@prefix :        <http://bimsparql.org/schema#> .
@prefix dce:     <http://purl.org/dc/elements/1.1/> .
@prefix expr:    <https://w3id.org/express#> .
@prefix ifcowl:  <http://ifcowl.openbimstandards.org/IFC2X3_TC1#> .
@prefix list:    <https://w3id.org/list#> .
@prefix owl:     <http://www.w3.org/2002/07/owl#> .
@prefix schm:     <http://bimsparql.org/schema#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rw:      <http://rdfrepo.ddss.nl/rewrite#> .
@prefix sp:      <http://spinrdf.org/sp#> .
@prefix spin:    <http://spinrdf.org/spin#> .
@prefix spl:     <http://spinrdf.org/spl#> .
@prefix test:    <http://rdfrepo.ddss.nl/rule/test#> .
@prefix xsd:     <http://www.w3.org/2001/XMLSchema#> .

<http://bimsparql.org/schema>
      rdf:type owl:Ontology ;
      owl:imports <http://www.buildingsmart-tech.org/ifcOWL/IFC2X3_TC1> , <http://spinrdf.org/spin> , <http://rdfrepo.ddss.nl/rewrite> ;
      owl:versionInfo "Created with TopBraid Composer"^^xsd:string .

schm:hasActorAssignment
      rdf:type spin:MagicProperty ;
      rdfs:comment "Assignment relationship between a actor and a control. Actors may have assignments indicating objects for which they have responsibility. An example of such assignment is a work order assigned to an organization."^^xsd:string ;
      rdfs:domain ifcowl:IfcActor ;
      rdfs:range ifcowl:IfcControl ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatingActor_IfcRelAssignsToActor ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatedObjects_IfcRelAssigns ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object ifcowl:IfcRelAssignsToActor ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasApprovalAssociation
      rdf:type spin:MagicProperty ;
      rdfs:comment "Relationship between an object or object type with an approval. Approvels indicate who is required to approve the data, the status of whether it has been approved, and the date/time of such approval. Approvals may require multiple parties fulfilling various roles."^^xsd:string ;
      rdfs:domain ifcowl:IfcObjectDefinition ;
      rdfs:range ifcowl:IfcApproval ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object ifcowl:IfcRelAssociatesApproval ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatedObjects_IfcRelAssociates ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatingApproval_IfcRelAssociatesApproval ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasClassificationAssociation
      rdf:type spin:MagicProperty ;
      rdfs:comment "Relationship between an object or an object type with its classification, which describs references to external sources of information. The source of information can be: a classification system; a dictionary server; any external catalogue that classifies the object further; any service that combine the above features."^^xsd:string ;
      rdfs:domain ifcowl:IfcObjectDefinition ;
      rdfs:range ifcowl:IfcClassificationReference ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object ifcowl:IfcRelAssociatesClassification ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatingClassification_IfcRelAssociatesClassification ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a4"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:referencedSource_IfcClassificationReference ;
                            sp:subject
                                    [ sp:varName "a2"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatedObjects_IfcRelAssociates ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object ifcowl:IfcClassificationReference ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a2"^^xsd:string
                                    ]
                          ] [ sp:object ifcowl:IfcClassification ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a4"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasContainedProduct
      rdf:type spin:MagicProperty ;
      rdfs:comment "Relationship between spatial structure element and its contained product."^^xsd:string ;
      rdfs:domain ifcowl:IfcSpatialStructureElement ;
      rdfs:range ifcowl:IfcProduct ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object ifcowl:IfcRelContainedInSpatialStructure ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatedElements_IfcRelContainedInSpatialStructure ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatingStructure_IfcRelContainedInSpatialStructure ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasControlAssignment
      rdf:type spin:MagicProperty ;
      rdfs:domain ifcowl:IfcControl ;
      rdfs:range ifcowl:IfcObject ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatedObjects_IfcRelAssigns ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatingControl_IfcRelAssignsToControl ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object ifcowl:IfcRelAssignsToControl ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasControlFlow
      rdf:type spin:MagicProperty ;
      rdfs:comment "Relationship between a control element and a flow element. Control elements (such as sensors) that monitor or control behavior of flow elements (such as valves) use this relationship to indicate control flow logical behavior."^^xsd:string ;
      rdfs:domain ifcowl:IfcDistributionControlElement ;
      rdfs:range ifcowl:IfcDistributionFlowElement ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object ifcowl:IfcRelFlowControlElements ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatedControlElements_IfcRelFlowControlElements ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatingFlowElement_IfcRelFlowControlElements ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasDocumentAssociation
      rdf:type spin:MagicProperty ;
      rdfs:comment """Relationship between an object or object type and documents indicating external files. Documents may be referenced in their entirety such as to capture product brochures, data sheets, multimedia content, or thumbnail images. Contents within documents may be referenced from any object, and may be used to synchronize information in other files such as work schedules for project management applications.
Typical document meta data, such as issue date, editor, and similar, can be captured with the association, the document content however remains with the external files."""^^xsd:string ;
      rdfs:domain ifcowl:IfcObjectDefinition ;
      rdfs:range ifcowl:IfcDocumentReference ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object ifcowl:IfcRelAssociatesDocument ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatedObjects_IfcRelAssociates ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatingDocument_IfcRelAssociatesDocument ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasElementComposition
      rdf:type spin:MagicProperty ;
      rdfs:comment """Provision of an aggregation structure where the element is part of another element representing the composite. The part then provides, if such concepts are in scope of the Model View Definition, exclusively the following:
Body Geometry — The partial body shape representation and its placement;
Material — The material information for the part.
The part may also provide, in addition to the aggregate, more specificly the following:
Property Sets — The parts may have individual property sets assigned, solely or in addition to the composite;
Quantity Sets — The parts may have individual quantity sets assigned, solely or in addition to the composite.
The part should not be contained in the spatial hierarchy, i.e. the concept Spatial Containment shall not be used at the level of parts. The part is contained in the spatial structure by the spatial containment of its composite."""^^xsd:string ;
      rdfs:domain ifcowl:IfcElement ;
      rdfs:range ifcowl:IfcElement ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object ifcowl:IfcRelAggregates ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatedObjects_IfcRelDecomposes ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatingObject_IfcRelDecomposes ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasElementDecomposition
      rdf:type spin:MagicProperty ;
      rdfs:comment """Provision of an aggregation structure where the element, representing the composite, is decomposed into parts represented by other elements.
The composite then provides, if such concepts are in scope of the Model View Definition, exclusively the following:
Placement — the common object coordinate system to which the parts are placed relative
By default the following constraints apply to an element being decomposed by Element Decomposition:
Body Geometry — composite is constructed from the sum of the Body Geometry of the parts;
the composite shall not have an own Body Geometry, body geometry is provided at the parts;
the composite shall not have an own Material assignment, material is assigned to the parts."""^^xsd:string ;
      rdfs:domain ifcowl:IfcElement ;
      rdfs:range ifcowl:IfcElement ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object ifcowl:IfcRelAggregates ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatedObjects_IfcRelDecomposes ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatingObject_IfcRelDecomposes ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object ifcowl:IfcElement ;
                            sp:predicate rdf:type ;
                            sp:subject spin:_arg1
                          ] [ sp:object ifcowl:IfcElement ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a2"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasElementFilling
      rdf:type spin:MagicProperty ;
      rdfs:comment "Relationship between an opening element and its filling (e.g. window, door). "^^xsd:string ;
      rdfs:domain ifcowl:IfcOpeningElement ;
      rdfs:range ifcowl:IfcElement ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a0"^^xsd:string
                          ]) ;
                sp:where ([ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatingOpeningElement_IfcRelFillsElement ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a0"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatedBuildingElement_IfcRelFillsElement ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object ifcowl:IfcRelFillsElement ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasGroupAssignment
      rdf:type spin:MagicProperty ;
      rdfs:comment """Relationship between a group (e.g. system, zone) and its collected objects. It established an arbitrary collection of objects within a group. The grouping relationship does not apply any other meaning then grouping objects under some aspect. It is non-hierarchical, that is objects can be grouped into different logical groups, and it does not interfere with other relationship concepts, such as ObjectAggregation.
The Group Assignment concept establish a given object as being the group collection for other objects. It usually implies the existence of a grouping relationship and the provision of some identity under which the group is characterized.
The group collection is handled by an instance of IfcRelAssignsToGroup, which assigns all group members to the IfcGroup being the collection.
Objects included in group as collected items are linked by IsGroupedBy pointing to IfcRelAssignsToGroup
NOTE  The IfcGroup maybe not yet have a grouping relationship established, it then identifies an empty group.
EXAMPLE  An air handler belonging to an air conditioning system is an example of such group assignment."""^^xsd:string ;
      rdfs:domain ifcowl:IfcGroup ;
      rdfs:range ifcowl:IfcProduct ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object ifcowl:IfcRelAssignsToGroup ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatingGroup_IfcRelAssignsToGroup ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatedObjects_IfcRelAssigns ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasLibraryAssociation
      rdf:type spin:MagicProperty ;
      rdfs:comment "Relationship between an object or object type with its associated library entities indicating the source of data such as from a model server or product library, or simply enriching the data with more details. Libraries may be referenced in their entirety from projects or project libraries indicating the master source and version of data. Contents within libraries may be referenced from any object, type object, property, and some resource schema entities within a project or project library."^^xsd:string ;
      rdfs:domain ifcowl:IfcObjectDefinition ;
      rdfs:range ifcowl:IfcLibraryReference ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatingLibrary_IfcRelAssociatesLibrary ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a4"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:referenceIntoLibrary_IfcLibraryReference ;
                            sp:subject
                                    [ sp:varName "a2"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatedObjects_IfcRelAssociates ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object ifcowl:IfcRelAssociatesLibrary ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasNextSpace
      rdf:type spin:MagicProperty ;
      rdfs:comment "Relationship between a space and a space next to it. They share the same space boundary"^^xsd:string ;
      rdfs:domain ifcowl:IfcSpace ;
      rdfs:range ifcowl:IfcSpace ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "space"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "d"^^xsd:string
                                    ] ;
                            sp:predicate schm:hasSpaceBoundary ;
                            sp:subject spin:_arg1
                          ] [ sp:object
                                    [ sp:varName "d"^^xsd:string
                                    ] ;
                            sp:predicate schm:hasSpaceBoundary ;
                            sp:subject
                                    [ sp:varName "space"^^xsd:string
                                    ]
                          ] [ rdf:type sp:Filter ;
                            sp:expression
                                    [ rdf:type sp:ne ;
                                      sp:arg1 spin:_arg1 ;
                                      sp:arg2 [ sp:varName "space"^^xsd:string
                                              ]
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasObjectNesting
      rdf:type spin:MagicProperty ;
      rdfs:comment """Nesting relationship between an object or object type with an object. It indicates an ordered arrangement relationship. Nesting is used:
on building elements to indicate features placed in sequence such as ports.
on control objects to indicate specification hierarchies.
on process objects to indicate subordinate task details.
on resource objects to indicate subordinate resource allocations."""^^xsd:string ;
      rdfs:domain ifcowl:IfcObjectDefinition ;
      rdfs:range ifcowl:IfcObject ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object ifcowl:IfcRelNests ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatedObjects_IfcRelDecomposes ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatingObject_IfcRelDecomposes ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasObjectTyping
      rdf:type spin:MagicProperty ;
      rdfs:comment """Relationship between an object occurrence an its object type. A pair of entities are defined for most semantic objects - an object occurrence entity and a corresponding object type entity. For example, the IfcTank is the object occurrence entity that has a corresponding IfcTankType being the object type entity.
On instance level, an object occurrence instance may have:
similar state as its object type instance by applying all characteristics defined at the type;
overridden state for particular characteristics;
no defined object type instance.
Characteristics defined at the object type level may include:
common naming and predefined type;
common properties within a type driven property set;
common geometry representations, applied as mapped representation to each occurences;
common material assignments (with exception of material set usages);
common definition of a decomposition structure.
Many object occurrence and object type entities have an attribute named PredefinedType consisting of a specific enumeration. Such predefined type essentially provides another level of inheritance to further differentiate objects without the need for additional entities. Predefined types are not just informational; various rules apply such as applicable property sets, part composition, and distribution ports."""^^xsd:string ;
      rdfs:domain ifcowl:IfcObject ;
      rdfs:range ifcowl:IfcTypeObject ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object ifcowl:IfcRelDefinesByType ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatedObjects_IfcRelDefines ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatingType_IfcRelDefinesByType ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasPortNesting
      rdf:type spin:MagicProperty ;
      rdfs:comment """Ports indicate possible connections to other objects according to specified system types, flow direction, and connection properties. Ports are typically connected between devices via cables, pipes, or ducts.
Ports may have placement defined indicating the position and outward orientation of the port relative to the product or product type.
Ports may have material profile sets defined indicating the flow area and connection enclosure."""^^xsd:string ;
      rdfs:domain ifcowl:IfcDistributionElement ;
      rdfs:range ifcowl:IfcDistributionPort ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object ifcowl:IfcRelNests ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatingObject_IfcRelDecomposes ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatedObjects_IfcRelDecomposes ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object ifcowl:IfcDistributionElement ;
                            sp:predicate rdf:type ;
                            sp:subject spin:_arg1
                          ] [ sp:object ifcowl:IfcDistributionPort ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a2"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasProcessAssignment
      rdf:type spin:MagicProperty ;
      rdfs:comment "Relationship between a process and its assigned resource. Processes may have assignments indicating resources consumed or occupied by the process. An example of such assignment is a carpenter labor resource building a wall."^^xsd:string ;
      rdfs:domain ifcowl:IfcProcess ;
      rdfs:range ifcowl:IfcResource ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object ifcowl:IfcRelAssignsToProcess ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatedObjects_IfcRelAssigns ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatingProcess_IfcRelAssignsToProcess ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasProductAssignment
      rdf:type spin:MagicProperty ;
      rdfs:comment "Relationship between a product and a process that operate upon the product. An example of such assignment is a task to construct a wall."^^xsd:string ;
      rdfs:domain ifcowl:IfcProduct ;
      rdfs:range ifcowl:IfcObject ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatedObjects_IfcRelAssigns ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatingProduct_IfcRelAssignsToProduct ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object ifcowl:IfcRelAssignsToProduct ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasProjectClassificationInformation
      rdf:type spin:MagicProperty ;
      rdfs:comment "Relationship between a project and classfication. Projects may define classification structures, which may be used to classify objects contained within the same project, or other referencing projects (incorporating the current project as IfcProjectLibrary)."^^xsd:string ;
      rdfs:domain ifcowl:IfcProject ;
      rdfs:range ifcowl:IfcClassification ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object ifcowl:IfcRelAssociatesClassification ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatedObjects_IfcRelAssociates ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatingClassification_IfcRelAssociatesClassification ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object ifcowl:IfcProject ;
                            sp:predicate rdf:type ;
                            sp:subject spin:_arg1
                          ] [ sp:object ifcowl:IfcClassification ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a2"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasProjectDocumentInformation
      rdf:type spin:MagicProperty ;
      rdfs:comment "Projects may define external documents, which may be used to attach arbitrary information to objects contained within the same project or referencing projects."^^xsd:string ;
      rdfs:domain ifcowl:IfcProject ;
      rdfs:range ifcowl:IfcDocumentInformation ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object ifcowl:IfcRelAssociatesDocument ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatedObjects_IfcRelAssociates ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatingDocument_IfcRelAssociatesDocument ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object ifcowl:IfcProject ;
                            sp:predicate rdf:type ;
                            sp:subject spin:_arg1
                          ] [ sp:object ifcowl:IfcDocumentInformation ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a2"^^xsd:string
                                    ]
                          ])
              ] .

schm:hasProjectLibraryInformation
      rdf:type spin:MagicProperty ;
      rdfs:comment "Projects may define libraries holding revisions of the project such as model servers or databases. Multiple libraries may be referenced to indicate multiple revisions, multiple branches, and/or multiple servers."^^xsd:string ;
      rdfs:domain ifcowl:IfcProject ;
      rdfs:range ifcowl:IfcLibraryInformation ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object ifcowl:IfcRelAssociatesLibrary ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatedObjects_IfcRelAssociates ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatingLibrary_IfcRelAssociatesLibrary ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object ifcowl:IfcProject ;
                            sp:predicate rdf:type ;
                            sp:subject spin:_arg1
                          ] [ sp:object ifcowl:IfcLibraryInformation ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a2"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasProperty
      rdf:type spin:MagicProperty ;
      rdfs:comment "Relationship between an object occurrence and its property ."^^xsd:string ;
      rdfs:domain ifcowl:IfcObject ;
      rdfs:range ifcowl:IfcProperty ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "p"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "pSet"^^xsd:string
                                    ] ;
                            sp:predicate schm:hasPropertySet ;
                            sp:subject spin:_arg1
                          ] [ sp:object
                                    [ sp:varName "p"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:hasProperties_IfcPropertySet ;
                            sp:subject
                                    [ sp:varName "pSet"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasPropertySet
      rdf:type spin:MagicProperty ;
      rdfs:comment "Relationship between an object occurence and its property set. A property set contains a single or multiple properties. The data types of an individual property are single value, enumerated value, bounded value, table value, reference value, list value, and combination of property occurrences."^^xsd:string ;
      rdfs:domain ifcowl:IfcObject ;
      rdfs:range ifcowl:IfcPropertySet ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "pSet"^^xsd:string
                          ]) ;
                sp:where ([ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatedObjects_IfcRelDefines ;
                            sp:subject
                                    [ sp:varName "rel"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "pSet"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatingPropertyDefinition_IfcRelDefinesByProperties ;
                            sp:subject
                                    [ sp:varName "rel"^^xsd:string
                                    ]
                          ] [ sp:object ifcowl:IfcPropertySet ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "pSet"^^xsd:string
                                    ]
                          ] [ sp:object ifcowl:IfcRelDefinesByProperties ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "rel"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasQuantity
      rdf:type spin:MagicProperty ;
      rdfs:comment "Relationship between an object occurrence and its quantity object."^^xsd:string ;
      rdfs:domain ifcowl:IfcObject ;
      rdfs:range ifcowl:IfcPhysicalQuantity ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a15"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate schm:hasQuantitySet ;
                            sp:subject spin:_arg1
                          ] [ sp:object
                                    [ sp:varName "a15"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:quantities_IfcElementQuantity ;
                            sp:subject
                                    [ sp:varName "a2"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasQuantitySet
      rdf:type spin:MagicProperty ;
      rdfs:comment "Relationship between an object occurrence and its quantity set. A quantity set contains multiple quantity occurrences. The data type of quantity occurrence values are count, length, area, volume, weight, time, or a combination of quantities. Each quantity is defined by its name, value, and optionally a description and a formula."^^xsd:string ;
      rdfs:domain ifcowl:IfcObject ;
      rdfs:range ifcowl:IfcElementQuantity ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object ifcowl:IfcRelDefinesByProperties ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatedObjects_IfcRelDefines ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatingPropertyDefinition_IfcRelDefinesByProperties ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object ifcowl:IfcElementQuantity ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a2"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasResourceAssignment
      rdf:type spin:MagicProperty ;
      rdfs:comment "Relationship between resource and its assiged actor or product. An example of such assignment is a person fulfilling a carpenter labor resource."^^xsd:string ;
      rdfs:domain ifcowl:IfcResource ;
      rdfs:range ifcowl:IfcProduct , ifcowl:IfcActor ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object ifcowl:IfcRelAssignsToResource ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatingResource_IfcRelAssignsToResource ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatedObjects_IfcRelAssigns ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object ifcowl:IfcResource ;
                            sp:predicate rdf:type ;
                            sp:subject spin:_arg1
                          ])
              ] ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object ifcowl:IfcRelAssignsToResource ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatingResource_IfcRelAssignsToResource ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatedObjects_IfcRelAssigns ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object ifcowl:IfcResource ;
                            sp:predicate rdf:type ;
                            sp:subject spin:_arg1
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasServiceSystem
      rdf:type spin:MagicProperty ;
      rdfs:comment "Relationship between a spatial structure element (e.g. building, storey, space) and its serving system."^^xsd:string ;
      rdfs:domain ifcowl:IfcSpatialStructureElement ;
      rdfs:range ifcowl:IfcSystem ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object ifcowl:IfcRelServicesBuildings ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatedBuildings_IfcRelServicesBuildings ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatingSystem_IfcRelServicesBuildings ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasSingleMaterial
      rdf:type spin:MagicProperty ;
      rdfs:comment "Relationship between an object or object type with a single uniform material."^^xsd:string ;
      rdfs:domain ifcowl:IfcObjectDefinition ;
      rdfs:range ifcowl:IfcMaterial ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object ifcowl:IfcRelAssociatesMaterial ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatedObjects_IfcRelAssociates ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatingMaterial_IfcRelAssociatesMaterial ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasSpaceBoundary
      rdf:type spin:MagicProperty ;
      rdfs:comment "Relationship between a space and its boundary elements, which can be physical (e.g. wall, door) or virtual (virtual element)."^^xsd:string ;
      rdfs:domain ifcowl:IfcSpace ;
      rdfs:range ifcowl:IfcElement ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object ifcowl:IfcRelSpaceBoundary ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatedBuildingElement_IfcRelSpaceBoundary ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatingSpace_IfcRelSpaceBoundary ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasSpatialDecomposition
      rdf:type spin:MagicProperty ;
      rdfs:comment "Spatial hierarchy relationship between project or spatial element ( site, building, stoery, space)."^^xsd:string ;
      rdfs:domain ifcowl:IfcObject ;
      rdfs:range ifcowl:IfcSpatialStructureElement ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object ifcowl:IfcRelAggregates ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatedObjects_IfcRelDecomposes ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatingObject_IfcRelDecomposes ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasStructuralActivity
      rdf:type spin:MagicProperty ;
      rdfs:comment "Relationship between structural activity and items"^^xsd:string ;
      rdfs:domain ifcowl:IfcStructuralActivity ;
      rdfs:range ifcowl:IfcStructuralItem ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a3"^^xsd:string
                          ]) ;
                sp:where ([ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatedStructuralActivity_IfcRelConnectsStructuralActivity ;
                            sp:subject
                                    [ sp:varName "a2"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a3"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatingElement_IfcRelConnectsStructuralActivity ;
                            sp:subject
                                    [ sp:varName "a2"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a1"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:appliedLoad_IfcStructuralActivity ;
                            sp:subject spin:_arg1
                          ] [ sp:object ifcowl:IfcRelConnectsStructuralActivity ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a2"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasStructuralConnectivity
      rdf:type spin:MagicProperty ;
      rdfs:comment "Structural items may be connected within an analysis model."^^xsd:string ;
      rdfs:domain ifcowl:IfcStructuralMember ;
      rdfs:range ifcowl:IfcStructuralConnection ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object ifcowl:IfcRelConnectsStructuralMember ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatingStructuralMember_IfcRelConnectsStructuralMember ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatedStructuralConnection_IfcRelConnectsStructuralMember ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasSuccessorProcess
      rdf:type spin:MagicProperty ;
      rdfs:comment "Relationship between a process and its successor process."^^xsd:string ;
      rdfs:domain ifcowl:IfcProcess ;
      rdfs:range ifcowl:IfcProcess ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object ifcowl:IfcRelSequence ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatedProcess_IfcRelSequence ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatingProcess_IfcRelSequence ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object ifcowl:IfcProcess ;
                            sp:predicate rdf:type ;
                            sp:subject spin:_arg1
                          ] [ sp:object ifcowl:IfcProcess ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a2"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:hasVoiding
      rdf:type spin:MagicProperty ;
      rdfs:comment """Relationship between a element and its voids. Voids for openings may optionally be filled by another element such as a door or window.
The use of the concept Element Voiding in the context of geometric representations implies a Boolean difference operation between the body geometry of the element and the body geometry of the void."""^^xsd:string ;
      rdfs:domain ifcowl:IfcElement ;
      rdfs:range ifcowl:IfcFeatureElementSubtraction ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object ifcowl:IfcRelVoidsElement ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatingBuildingElement_IfcRelVoidsElement ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatedOpeningElement_IfcRelVoidsElement ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:isContainedIn
      rdf:type spin:MagicProperty ;
      rdfs:comment "Relationship between a product and a spatial structure element which contains it."^^xsd:string ;
      rdfs:domain ifcowl:IfcProduct ;
      rdfs:range ifcowl:IfcSpatialStructureElement ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a2"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate ifcowl:relatingStructure_IfcRelContainedInSpatialStructure ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate ifcowl:relatedElements_IfcRelContainedInSpatialStructure ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object ifcowl:IfcRelContainedInSpatialStructure ;
                            sp:predicate rdf:type ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

schm:isPlacedIn
      rdf:type spin:MagicProperty ;
      rdfs:comment "Relationship between elements like door and window and their placed walls, slabs or other elements"^^xsd:string ;
      rdfs:domain ifcowl:IfcElement ;
      rdfs:range ifcowl:IfcElement ;
      rdfs:subClassOf spin:MagicProperties ;
      spin:body
              [ rdf:type sp:Select ;
                sp:resultVariables ([ sp:varName "a1"^^xsd:string
                          ]) ;
                sp:where ([ sp:object
                                    [ sp:varName "a2"^^xsd:string
                                    ] ;
                            sp:predicate schm:hasVoiding ;
                            sp:subject
                                    [ sp:varName "a1"^^xsd:string
                                    ]
                          ] [ sp:object spin:_arg1 ;
                            sp:predicate schm:hasElementFilling ;
                            sp:subject
                                    [ sp:varName "a2"^^xsd:string
                                    ]
                          ])
              ] ;
      spin:constraint
              [ rdf:type spl:Argument ;
                spl:predicate sp:arg1 ;
                spl:valueType rdfs:Resource
              ] .

list:hasContents
      rdf:type owl:ObjectProperty .

list:hasNext
      rdf:type owl:ObjectProperty .

list:isFollowedBy
      rdf:type rdf:Property .
