@prefix schm:  <http://bimsparql.org/schema#> .
@prefix owl:   <http://www.w3.org/2002/07/owl#> .
@prefix ifcowl: <http://ifcowl.openbimstandards.org/IFC2X3_TC1#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix ifcdoc: <http://www.buildingsmart-tech.org/ifc/IFC4/final#> .
@prefix express: <https://w3id.org/express#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix qto:   <http://bimsparql.org/pset#> .
@prefix spl:   <http://spinrdf.org/spl#> .
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix spin:  <http://spinrdf.org/spin#> .
@prefix sp:    <http://spinrdf.org/sp#> .
@prefix dc:    <http://purl.org/dc/elements/1.1/> .

qto:grossWeight_SanitaryTerminalBaseQuantities
        a                   ifcdoc:Q_WEIGHT , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSanitaryTerminal ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SanitaryTerminalBaseQuantities .

qto:Qto_CableSegmentBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of cable segment."^^xsd:string ;
        rdfs:label     "Cable Segment Base Quantities"@en ;
        ifcdoc:groups  qto:outerSurfaceArea_CableSegmentBaseQuantities , qto:crossSectionArea_CableSegmentBaseQuantities , qto:length_CableSegmentBaseQuantities , qto:grossWeight_CableSegmentBaseQuantities .

qto:netArea_RampFlightBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_AREA ;
        rdfs:comment        "Total area of the ramp flight (not the projected area). Openings and recesses are taken into account by subtraction, projections by addition. Only given, if the ramp flight is prismatic."^^xsd:string ;
        rdfs:domain         ifcowl:IfcRampFlight ;
        rdfs:label          "Nettofl\\S\\dche"@de-DE , "Net Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_RampFlightBaseQuantities .

qto:netSideArea_WallBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_AREA , rdf:Property ;
        rdfs:comment        "Area of the wall as viewed by an elevation view of the middle plane. It does take into account all wall modifications (such as openings)."^^xsd:string ;
        rdfs:domain         ifcowl:IfcWall ;
        rdfs:label          "\\X2\\6B6354735074976297627A4D\\X0\\"@ja-JP , "Net Side Area"@en , "Nettofl\\S\\dche"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetSideArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_WallBaseQuantities .

qto:length_RampFlightBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_LENGTH ;
        rdfs:comment        "Total length of the ramp flight along the walking line."^^xsd:string ;
        rdfs:domain         ifcowl:IfcRampFlight ;
        rdfs:label          "L\\S\\dnge"@de-DE , "Length"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Length" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_RampFlightBaseQuantities .

qto:Qto_BurnerBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of burners."^^xsd:string ;
        rdfs:label     "Burner Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_BurnerBaseQuantities .

qto:Qto_ElectricDistributionBoardBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of electric distribution board."^^xsd:string ;
        rdfs:label     "Electric Distribution Board Base Quantities"@en ;
        ifcdoc:groups  qto:numberOfCircuits_ElectricDistributionBoardBaseQuantities , qto:grossWeight_ElectricDistributionBoardBaseQuantities .

qto:grossWeight_UnitaryControlElementBaseQuantities
        a                   rdf:Property , ifcdoc:Q_WEIGHT , spin:MagicProperty ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcUnitaryControlElement ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_UnitaryControlElementBaseQuantities .

qto:Qto_UnitaryControlElementBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of unitary control element."^^xsd:string ;
        rdfs:label     "Unitary Control Element Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_UnitaryControlElementBaseQuantities .

qto:Qto_ElectricApplianceBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of electric appliance."^^xsd:string ;
        rdfs:label     "Electric Appliance Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_ElectricApplianceBaseQuantities .

qto:grossWeight_CableCarrierFittingBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_WEIGHT , rdf:Property ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcCableCarrierFitting ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_CableCarrierFittingBaseQuantities .

qto:outerSurfaceArea_DuctFittingBaseQuantities
        a                   rdf:Property , ifcdoc:Q_AREA , spin:MagicProperty ;
        rdfs:comment        "Total area of the extruded surfaces of the fitting (not taking into account the end cap areas)."^^xsd:string ;
        rdfs:domain         ifcowl:IfcDuctFitting ;
        rdfs:label          "Outer Surface Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "OuterSurfaceArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_DuctFittingBaseQuantities .

qto:grossCrossSectionArea_PipeFittingBaseQuantities
        a                   ifcdoc:Q_AREA , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Area of the cross section at the inlet, including the pipe fitting itself and the interior flow space."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPipeFitting ;
        rdfs:label          "Gross Cross Section Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossCrossSectionArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PipeFittingBaseQuantities .

qto:crossSectionArea_PileBaseQuantities
        a                   ifcdoc:Q_AREA , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Total area of the cross section (or profile) of the pile."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPile ;
        rdfs:label          "Cross Section Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "CrossSectionArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PileBaseQuantities .

qto:Qto_LampBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of lamp."^^xsd:string ;
        rdfs:label     "Lamp Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_LampBaseQuantities .

qto:volume_ProjectionElementBaseQuantities
        a                   rdf:Property , ifcdoc:Q_VOLUME , spin:MagicProperty ;
        rdfs:comment        "Volume of the opening. It is the addition volume of the project to the element (e.g. wall or slab)."^^xsd:string ;
        rdfs:domain         ifcowl:IfcProjectionElement ;
        rdfs:label          "Volumen"@de-DE , "Volume"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Volume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ProjectionElementBaseQuantities .

qto:netHeigtht_BuildingStoreyBaseQuantities
        a                   rdf:Property , ifcdoc:Q_LENGTH , spin:MagicProperty ;
        rdfs:comment        "Standard net height of this storey, from the top surface of the construction floor, to the bottom surface of the construction floor or roof above. Only provided is there is a constant height."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBuildingStorey ;
        rdfs:label          "\\X2\\6B635473968E9AD8\\X0\\"@ja-JP , "Lichte H\\S\\vhe"@de-DE , "Net Heigtht"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetHeigtht" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BuildingStoreyBaseQuantities .

qto:Qto_FilterBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of filters."^^xsd:string ;
        rdfs:label     "Filter Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_FilterBaseQuantities .

qto:grossWeight_LightFixtureBaseQuantities
        a                   ifcdoc:Q_WEIGHT , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcLightFixture ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_LightFixtureBaseQuantities .

qto:Qto_TankBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of tanks."^^xsd:string ;
        rdfs:label     "Tank Base Quantities"@en ;
        ifcdoc:groups  qto:totalSurfaceArea_TankBaseQuantities , qto:netWeight_TankBaseQuantities , qto:grossWeight_TankBaseQuantities .

qto:Qto_WindowBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of windows."^^xsd:string ;
        rdfs:label     "$"@ja-JP , "Window Base Quantities"@en , "$"@de-DE ;
        ifcdoc:groups  qto:area_WindowBaseQuantities , qto:perimeter_WindowBaseQuantities , qto:height_WindowBaseQuantities , qto:width_WindowBaseQuantities .

qto:Qto_HeatExchangerBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of heat exchangers."^^xsd:string ;
        rdfs:label     "Heat Exchanger Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_HeatExchangerBaseQuantities .

qto:netSideArea_CurtainWallQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_AREA ;
        rdfs:comment        "Area of the curtain wall as viewed by an elevation view of the middle plane of the curtain wall. It does take into account all curtain wall modifications."^^xsd:string ;
        rdfs:domain         ifcowl:IfcCurtainWall ;
        rdfs:label          "\\X2\\6B6354735074976297627A4D\\X0\\"@ja-JP , "Nettofl\\S\\dche"@de-DE , "Net Side Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetSideArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_CurtainWallQuantities .

qto:netWeight_ColumnBaseQuantities
        a                   ifcdoc:Q_WEIGHT , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Total net weight of the column without add-on parts, taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcColumn ;
        rdfs:label          "\\X2\\6B63547391CD91CF\\X0\\"@ja-JP , "Nettogewicht"@de-DE , "Net Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ColumnBaseQuantities .

qto:netVolume_DistributionChamberElementBaseQuantities
        a                   ifcdoc:Q_VOLUME , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Total net volume of the chamber, subtracting any enclosed elements such as pipes, ducts, cables, or equipment."^^xsd:string ;
        rdfs:domain         ifcowl:IfcDistributionChamberElement ;
        rdfs:label          "Net Volume"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_DistributionChamberElementBaseQuantities .

qto:grossWeight_UnitaryEquipmentBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcUnitaryEquipment ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_UnitaryEquipmentBaseQuantities .

qto:outerSurfaceArea_CableCarrierSegmentBaseQuantities
        a                   rdf:Property , ifcdoc:Q_AREA , spin:MagicProperty ;
        rdfs:comment        "Total surface area."^^xsd:string ;
        rdfs:domain         ifcowl:IfcCableCarrierSegment ;
        rdfs:label          "Outer Surface Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "OuterSurfaceArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_CableCarrierSegmentBaseQuantities .

qto:numberOfCircuits_ElectricDistributionBoardBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_COUNT ;
        rdfs:comment        "Number of circuits in the distribution board."^^xsd:string ;
        rdfs:domain         ifcowl:IfcElectricDistributionBoard ;
        rdfs:label          "Number Of Circuits"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NumberOfCircuits" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:countValue_IfcQuantityCount ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ElectricDistributionBoardBaseQuantities .

qto:grossSideArea_WallBaseQuantities
        a                   ifcdoc:Q_AREA , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Area of the wall as viewed by an elevation view of the middle plane of the wall.  It does not take into account any wall modifications (such as openings)."^^xsd:string ;
        rdfs:domain         ifcowl:IfcWall ;
        rdfs:label          "Bruttofl\\S\\dche"@de-DE , "\\X2\\5074976297627A4D\\X0\\"@ja-JP , "Gross Side Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossSideArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_WallBaseQuantities .

qto:netCrossSectionArea_DuctSegmentBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_AREA , rdf:Property ;
        rdfs:comment        "Area of the cross section of the duct, excluding the interior flow space."^^xsd:string ;
        rdfs:domain         ifcowl:IfcDuctSegment ;
        rdfs:label          "Net Cross Section Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetCrossSectionArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_DuctSegmentBaseQuantities .

qto:netWeight_MemberBaseQuantities
        a                   ifcdoc:Q_WEIGHT , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Total net weight of the member without add-on parts, taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcMember ;
        rdfs:label          "Nettogewicht"@de-DE , "Net Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_MemberBaseQuantities .

qto:grossWeight_MotorConnectionBaseQuantities
        a                   ifcdoc:Q_WEIGHT , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcMotorConnection ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_MotorConnectionBaseQuantities .

qto:height_CurtainWallQuantities
        a                   ifcdoc:Q_LENGTH , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Total height of the curtain wall. It should only be provided, if it is constant along the curtain wall path."^^xsd:string ;
        rdfs:domain         ifcowl:IfcCurtainWall ;
        rdfs:label          "\\X2\\9AD83055\\X0\\"@ja-JP , "Height"@en , "H\\S\\vhe"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Height" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_CurtainWallQuantities .

qto:grossWeight_CondenserBaseQuantities
        a                   ifcdoc:Q_WEIGHT , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcCondenser ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_CondenserBaseQuantities .

qto:footprintArea_BuildingBaseQuantities
        a                   ifcdoc:Q_AREA , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Gross area of the site covered by the building(s)."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBuilding ;
        rdfs:label          "\\X2\\5EFA7BC997627A4D\\X0\\"@ja-JP , "Footprint Area"@en , "Bebaute Fl\\S\\dche"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "FootprintArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BuildingBaseQuantities .

qto:grossWeight_ColumnBaseQuantities
        a                   ifcdoc:Q_WEIGHT , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Total gross weight of the column without add-on parts, not taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcColumn ;
        rdfs:label          "Bruttogewicht"@de-DE , "Gross Weight"@en , "\\X2\\91CD91CF\\X0\\"@ja-JP ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ColumnBaseQuantities .

qto:    a               owl:Ontology ;
        dc:creator      "Chi Zhang"^^xsd:string ;
        dc:date         "29-03-2016"^^xsd:string ;
        dc:description  "This is a vocabulary for the official property sets from IFC 4 documentation. "^^xsd:string .

qto:Qto_SpaceBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of spaces."^^xsd:string ;
        rdfs:label     "Space Base Quantities"@en , "$"@ja-JP , "$"@de-DE ;
        ifcdoc:groups  qto:height_SpaceBaseQuantities , qto:netPerimeter_SpaceBaseQuantities , qto:finishCeilingHeight_SpaceBaseQuantities , qto:netFloorArea_SpaceBaseQuantities , qto:grossPerimeter_SpaceBaseQuantities , qto:netVolume_SpaceBaseQuantities , qto:netCeilingArea_SpaceBaseQuantities , qto:netWallArea_SpaceBaseQuantities , qto:grossWallArea_SpaceBaseQuantities , qto:grossFloorArea_SpaceBaseQuantities , qto:grossCeilingArea_SpaceBaseQuantities , qto:finishFloorHeight_SpaceBaseQuantities , qto:grossVolume_SpaceBaseQuantities .

qto:grossWeight_FlowMeterBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcFlowMeter ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_FlowMeterBaseQuantities .

qto:grossVolume_WallBaseQuantities
        a                   rdf:Property , ifcdoc:Q_VOLUME , spin:MagicProperty ;
        rdfs:comment        "Volume of the wall, without taking into account the openings and the connection geometry."^^xsd:string ;
        rdfs:domain         ifcowl:IfcWall ;
        rdfs:label          "\\X2\\4F537A4D\\X0\\"@ja-JP , "Gross Volume"@en , "Bruttovolumen"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_WallBaseQuantities .

qto:grossVolume_PileBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_VOLUME ;
        rdfs:comment        "Total gross volume of the pile, not taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPile ;
        rdfs:label          "Gross Volume"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PileBaseQuantities .

qto:grossWeight_ElectricMotorBaseQuantities
        a                   ifcdoc:Q_WEIGHT , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcElectricMotor ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ElectricMotorBaseQuantities .

qto:Qto_CooledBeamBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of cooled beams."^^xsd:string ;
        rdfs:label     "Cooled Beam Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_CooledBeamBaseQuantities .

qto:netVolume_RampFlightBaseQuantities
        a                   ifcdoc:Q_VOLUME , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Total net volume of the ramp flight. Openings and recesses are taken into account by subtraction, projections by addition."^^xsd:string ;
        rdfs:domain         ifcowl:IfcRampFlight ;
        rdfs:label          "Nettovolumen"@de-DE , "Net Volume"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_RampFlightBaseQuantities .

qto:grossWeight_FireSuppressionTerminalBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcFireSuppressionTerminal ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_FireSuppressionTerminalBaseQuantities .

qto:grossWeight_AirToAirHeatRecoveryBaseQuantities
        a                   ifcdoc:Q_WEIGHT , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcAirToAirHeatRecovery ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_AirToAirHeatRecoveryBaseQuantities .

qto:outerSurfaceArea_BeamBaseQuantities
        a                   rdf:Property , ifcdoc:Q_AREA , spin:MagicProperty ;
        rdfs:comment        "Total area of the extruded surfaces of the beam (not taking into account the end cap areas), normally generated as perimeter * length."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBeam ;
        rdfs:label          "Mantelfl\\S\\dche"@de-DE , "Outer Surface Area"@en , "\\X2\\59168868976297627A4D\\X0\\"@ja-JP ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "OuterSurfaceArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BeamBaseQuantities .

qto:outerSurfaceArea_MemberBaseQuantities
        a                   ifcdoc:Q_AREA , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Total area of the extruded surfaces of the member (not taking into account the end cap areas), normally generated as perimeter * length."^^xsd:string ;
        rdfs:domain         ifcowl:IfcMember ;
        rdfs:label          "Outer Surface Area"@en , "Mantelfl\\S\\dche"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "OuterSurfaceArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_MemberBaseQuantities .

qto:grossSurfaceArea_BeamBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_AREA ;
        rdfs:comment        "Total area of the beam, normally generated as perimeter * length + 2 * cross section area. It is the sum of OuterSurfaceArea + (2 x CrossSectionArea) and shall only be given, if the OuterSurfaceArea and CrossSectionArea cannot be established separately."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBeam ;
        rdfs:label          "\\X2\\8868976297627A4D\\X0\\"@ja-JP , "Gross Surface Area"@en , "Gesamtoberfl\\S\\dche"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossSurfaceArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BeamBaseQuantities .

qto:Qto_PileBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of piles."^^xsd:string ;
        rdfs:label     "Pile Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_PileBaseQuantities , qto:grossVolume_PileBaseQuantities , qto:outerSurfaceArea_PileBaseQuantities , qto:netVolume_PileBaseQuantities , qto:grossSurfaceArea_PileBaseQuantities , qto:crossSectionArea_PileBaseQuantities , qto:length_PileBaseQuantities , qto:netWeight_PileBaseQuantities .

qto:Qto_PipeFittingBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types and occurrences of pipe fittings."^^xsd:string ;
        rdfs:label     "Pipe Fitting Base Quantities"@en ;
        ifcdoc:groups  qto:netWeight_PipeFittingBaseQuantities , qto:grossWeight_PipeFittingBaseQuantities , qto:outerSurfaceArea_PipeFittingBaseQuantities , qto:netCrossSectionArea_PipeFittingBaseQuantities , qto:grossCrossSectionArea_PipeFittingBaseQuantities , qto:length_PipeFittingBaseQuantities .

qto:grossWeight_ElectricFlowStorageDeviceBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcElectricFlowStorageDevice ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ElectricFlowStorageDeviceBaseQuantities .

qto:grossPerimeter_BuildingStoreyBaseQuantities
        a                   rdf:Property , ifcdoc:Q_LENGTH , spin:MagicProperty ;
        rdfs:comment        "Perimeter of the outer contour of the building story without taking interior slab openings into account."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBuildingStorey ;
        rdfs:label          "\\X2\\54688FBA9577\\X0\\"@ja-JP , "Gross Perimeter"@en , "Umfang"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossPerimeter" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BuildingStoreyBaseQuantities .

qto:grossWeight_ActuatorBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_WEIGHT , rdf:Property ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcActuator ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ActuatorBaseQuantities .

qto:perimeter_PlateBaseQuantities
        a                   ifcdoc:Q_LENGTH , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Perimeter measured along the outer boundaries of the plate. Only given, if the plate is prismatic (constant thickness)."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPlate ;
        rdfs:label          "Perimeter"@en , "Umfang"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Perimeter" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PlateBaseQuantities .

qto:Qto_ValveBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of valves."^^xsd:string ;
        rdfs:label     "Valve Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_ValveBaseQuantities .

qto:netCrossSectionArea_PipeSegmentBaseQuantities
        a                   rdf:Property , ifcdoc:Q_AREA , spin:MagicProperty ;
        rdfs:comment        "Area of the cross section of the pipe, excluding the interior flow space."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPipeSegment ;
        rdfs:label          "Net Cross Section Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetCrossSectionArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PipeSegmentBaseQuantities .

qto:grossVolume_SlabBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_VOLUME , rdf:Property ;
        rdfs:comment        "Total gross volume of the slab. Openings, recesses, and projections are not taken into account."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSlab ;
        rdfs:label          "\\X2\\4F537A4D\\X0\\"@ja-JP , "Bruttovolumen"@de-DE , "Gross Volume"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SlabBaseQuantities .

qto:grossWeight_CableFittingBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcCableFitting ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_CableFittingBaseQuantities .

qto:length_PipeFittingBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_LENGTH ;
        rdfs:comment        "Length of the fitting, calculated at midpoint of cross-section and equal to the distance along the flow path from the port inlet to the port outlet. For junction fittings, it indicates the length of the longest flow path."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPipeFitting ;
        rdfs:label          "Length"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Length" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PipeFittingBaseQuantities .

qto:grossWeight_MemberBaseQuantities
        a                   ifcdoc:Q_WEIGHT , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Total gross weight of the member without add-on parts, not taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcMember ;
        rdfs:label          "Bruttogewicht"@de-DE , "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_MemberBaseQuantities .

qto:length_CurtainWallQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_LENGTH ;
        rdfs:comment        "Total length of the curtain wall along the cutain wall center line (even if different to the curtain wall path)."^^xsd:string ;
        rdfs:domain         ifcowl:IfcCurtainWall ;
        rdfs:label          "L\\S\\dnge"@de-DE , "\\X2\\95773055\\X0\\"@ja-JP , "Length"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Length" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_CurtainWallQuantities .

qto:grossWeight_CompressorBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcCompressor ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_CompressorBaseQuantities .

qto:Qto_ConstructionEquipmentResourceBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of construction equipment resources."^^xsd:string ;
        rdfs:label     "Construction Equipment Resource Base Quantities"@en ;
        ifcdoc:groups  qto:operatingTime_ConstructionEquipmentResourceBaseQuantities , qto:usageTime_ConstructionEquipmentResourceBaseQuantities .

qto:Qto_PlateBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of plates."^^xsd:string ;
        rdfs:label     "$"@de-DE , "Plate Base Quantities"@en ;
        ifcdoc:groups  qto:grossVolume_PlateBaseQuantities , qto:grossWeight_PlateBaseQuantities , qto:netVolume_PlateBaseQuantities , qto:grossArea_PlateBaseQuantities , qto:netArea_PlateBaseQuantities , qto:perimeter_PlateBaseQuantities , qto:width_PlateBaseQuantities , qto:netWeight_PlateBaseQuantities .

qto:height_FootingBaseQuantities
        a                   rdf:Property , ifcdoc:Q_LENGTH , spin:MagicProperty ;
        rdfs:comment        "Total nominal height of the footing. It should only be provided, if it is constant."^^xsd:string ;
        rdfs:domain         ifcowl:IfcFooting ;
        rdfs:label          "H\\S\\vhe"@de-DE , "Height"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Height" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_FootingBaseQuantities .

qto:grossWeight_EvaporatorBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcEvaporator ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_EvaporatorBaseQuantities .

qto:netVolume_MemberBaseQuantities
        a                   ifcdoc:Q_VOLUME , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Total net volume of the member, taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcMember ;
        rdfs:label          "Net Volume"@en , "Nettovolumen"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_MemberBaseQuantities .

qto:height_DoorBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_LENGTH ;
        rdfs:comment        "Total outer heigth of the door lining. It should only be provided, if it is a rectangular door."^^xsd:string ;
        rdfs:domain         ifcowl:IfcDoor ;
        rdfs:label          "\\X2\\9AD83055\\X0\\"@ja-JP , "H\\S\\vhe"@de-DE , "Height"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Height" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_DoorBaseQuantities .

qto:width_OpeningElementBaseQuantities
        a                   ifcdoc:Q_LENGTH , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Width of the opening, in case of wall openings it is the horizontal dimension in case of slab openings it is one horizontal dimension. Only provided, if the area is rectangular."^^xsd:string ;
        rdfs:domain         ifcowl:IfcOpeningElement ;
        rdfs:label          "\\X2\\958B53E35E45\\X0\\"@ja-JP , "Width"@en , "Breite"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Width" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_OpeningElementBaseQuantities .

qto:grossSurfaceArea_MemberBaseQuantities
        a                   rdf:Property , ifcdoc:Q_AREA , spin:MagicProperty ;
        rdfs:comment        "Total area of the member, normally generated as perimeter * length + 2 * cross section area. It is the sum of OuterSurfaceArea + (2 x CrossSectionArea) and shall only be given, if the OuterSurfaceArea and CrossSectionArea cannot be established separately."^^xsd:string ;
        rdfs:domain         ifcowl:IfcMember ;
        rdfs:label          "Gesamtoberfl\\S\\dche"@de-DE , "Gross Surface Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossSurfaceArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_MemberBaseQuantities .

qto:crossSectionArea_FootingBaseQuantities
        a                   ifcdoc:Q_AREA , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Total area of the cross section (or profile) of the footing."^^xsd:string ;
        rdfs:domain         ifcowl:IfcFooting ;
        rdfs:label          "Cross Section Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "CrossSectionArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_FootingBaseQuantities .

qto:netWeight_BeamBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Total net weight of the beam without add-on parts, taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBeam ;
        rdfs:label          "Nettogewicht"@de-DE , "\\X2\\6B63547391CD91CF\\X0\\"@ja-JP , "Net Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BeamBaseQuantities .

qto:Qto_CoolingTowerBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of cooling towers."^^xsd:string ;
        rdfs:label     "Cooling Tower Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_CoolingTowerBaseQuantities .

qto:Qto_AirTerminalBoxTypeBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of air terminal boxes."^^xsd:string ;
        rdfs:label     "Air Terminal Box Type Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_AirTerminalBoxTypeBaseQuantities .

qto:netCeilingArea_SpaceBaseQuantities
        a                   ifcdoc:Q_AREA , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Sum of all ceiling areas of the space. It excludes the area covered by elementsinside the space (columns, inner walls, etc.). The ceiling area is the real (and not the projected) area (e.g. in case of sloped ceilings)."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSpace ;
        rdfs:label          "\\X2\\6B63547359294E9597627A4D\\X0\\"@ja-JP , "Deckenfl\\S\\dche Netto"@de-DE , "Net Ceiling Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetCeilingArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SpaceBaseQuantities .

qto:width_CoveringBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_LENGTH , rdf:Property ;
        rdfs:comment        "Nominal width (or thickness) of the plate. Only given, if the covering is prismatic (constant thickess)."^^xsd:string ;
        rdfs:domain         ifcowl:IfcCovering ;
        rdfs:label          "\\X2\\5E45\\X0\\"@ja-JP , "Dicke"@de-DE , "Width"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Width" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_CoveringBaseQuantities .

qto:Qto_OutletBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of outlet."^^xsd:string ;
        rdfs:label     "Outlet Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_OutletBaseQuantities .

qto:Qto_JunctionBoxBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of junction box."^^xsd:string ;
        rdfs:label     "Junction Box Base Quantities"@en ;
        ifcdoc:groups  qto:numberOfGangs_JunctionBoxBaseQuantities , qto:grossWeight_JunctionBoxBaseQuantities .

qto:outerSurfaceArea_FootingBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_AREA ;
        rdfs:comment        "Total area of the extruded surfaces of the footing (not taking into account the end cap areas), normally generated as perimeter * length."^^xsd:string ;
        rdfs:domain         ifcowl:IfcFooting ;
        rdfs:label          "Outer Surface Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "OuterSurfaceArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_FootingBaseQuantities .

qto:length_FootingBaseQuantities
        a                   ifcdoc:Q_LENGTH , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Length of the footing, not taking into account any cut-outs or other processing features. For strip footings it is measured along the path, for other footings it is one of the horizontal dimensions. It should only be provided, if it is constant."^^xsd:string ;
        rdfs:domain         ifcowl:IfcFooting ;
        rdfs:label          "Length"@en , "L\\S\\dnge"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Length" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_FootingBaseQuantities .

qto:Qto_ColumnBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of columns."^^xsd:string ;
        rdfs:label     "Column Base Quantities"@en , "$"@ja-JP , "$"@de-DE ;
        ifcdoc:groups  qto:grossVolume_ColumnBaseQuantities , qto:netSurfaceArea_ColumnBaseQuantities , qto:outerSurfaceArea_ColumnBaseQuantities , qto:grossSurfaceArea_ColumnBaseQuantities , qto:netWeight_ColumnBaseQuantities , qto:length_ColumnBaseQuantities , qto:netVolume_ColumnBaseQuantities , qto:crossSectionArea_ColumnBaseQuantities , qto:grossWeight_ColumnBaseQuantities .

qto:grossWeight_ControllerBaseQuantities
        a                   ifcdoc:Q_WEIGHT , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcController ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ControllerBaseQuantities .

qto:grossArea_SlabBaseQuantities
        a                   ifcdoc:Q_AREA , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Total area of the extruded area of the slab. Openings, recesses and projections are not taken into account. Only given, if the slab is prismatic."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSlab ;
        rdfs:label          "Gross Area"@en , "Bruttofl\\S\\dche"@de-DE , "\\X2\\97627A4D\\X0\\"@ja-JP ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SlabBaseQuantities .

qto:Qto_PumpBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of pumps."^^xsd:string ;
        rdfs:label     "Pump Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_PumpBaseQuantities .

qto:length_MemberBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_LENGTH ;
        rdfs:comment        "Total nominal length of the member, not taking into account any cut-outs or other processing features."^^xsd:string ;
        rdfs:domain         ifcowl:IfcMember ;
        rdfs:label          "Length"@en , "L\\S\\dnge"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Length" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_MemberBaseQuantities .

qto:netSurfaceArea_MemberBaseQuantities
        a                   rdf:Property , ifcdoc:Q_AREA , spin:MagicProperty ;
        rdfs:comment        "Net surface area of the member, normally generated as perimeter * length + 2 * cross section area taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcMember ;
        rdfs:label          "Net Surface Area"@en , "Nettooberfl\\S\\dche"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetSurfaceArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_MemberBaseQuantities .

qto:grossVolume_MemberBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_VOLUME ;
        rdfs:comment        "Total gross volume of the member, not taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcMember ;
        rdfs:label          "Gross Volume"@en , "Bruttovolumen"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_MemberBaseQuantities .

qto:grossVolume_FootingBaseQuantities
        a                   ifcdoc:Q_VOLUME , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Total gross volume of the footing, not taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcFooting ;
        rdfs:label          "Gross Volume"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_FootingBaseQuantities .

qto:length_ReinforcingElementBaseQuantities
        a                   ifcdoc:Q_LENGTH , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Total length of reinforcing."^^xsd:string ;
        rdfs:domain         ifcowl:IfcReinforcingElement ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Length" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ReinforcingElementBaseQuantities .

qto:netWeight_TankBaseQuantities
        a                   ifcdoc:Q_WEIGHT , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Weight of the element, including contained fluid as designed."^^xsd:string ;
        rdfs:domain         ifcowl:IfcTank ;
        rdfs:label          "Net Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_TankBaseQuantities .

qto:netWeight_PlateBaseQuantities
        a                   ifcdoc:Q_WEIGHT , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Total net weight of the plate without add-on parts, taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPlate ;
        rdfs:label          "Nettogewicht"@de-DE , "Net Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PlateBaseQuantities .

qto:grossWeight_SensorBaseQuantities
        a                   ifcdoc:Q_WEIGHT , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSensor ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SensorBaseQuantities .

qto:netVolume_FootingBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_VOLUME ;
        rdfs:comment        "Total net volume of the footing, taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcFooting ;
        rdfs:label          "Net Volume"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_FootingBaseQuantities .

qto:Qto_BuildingBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of building."^^xsd:string ;
        rdfs:label     "$"@ja-JP , "$"@de-DE , "Building Base Quantities"@en ;
        ifcdoc:groups  qto:grossVolume_BuildingBaseQuantities , qto:netFloorArea_BuildingBaseQuantities , qto:footprintArea_BuildingBaseQuantities , qto:netVolume_BuildingBaseQuantities , qto:eavesHeigth_BuildingBaseQuantities , qto:grossFloorArea_BuildingBaseQuantities , qto:height_BuildingBaseQuantities .

qto:outerSurfaceArea_PileBaseQuantities
        a                   rdf:Property , ifcdoc:Q_AREA , spin:MagicProperty ;
        rdfs:comment        "Total area of the extruded surfaces of the pile (not taking into account the end cap areas), normally generated as perimeter * length."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPile ;
        rdfs:label          "Outer Surface Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "OuterSurfaceArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PileBaseQuantities .

qto:grossWeight_FanBaseQuantities
        a                   rdf:Property , ifcdoc:Q_WEIGHT , spin:MagicProperty ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcFan ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_FanBaseQuantities .

qto:grossSurfaceArea_PileBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_AREA ;
        rdfs:comment        "Total area of the pile, normally generated as perimeter * length + 2 * cross section area. It is the sum of OuterSurfaceArea + (2 x CrossSectionArea) and shall only be given, if the OuterSurfaceArea and CrossSectionArea cannot be established separately."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPile ;
        rdfs:label          "Gross Surface Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossSurfaceArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PileBaseQuantities .

qto:grossWeight_HumidifierBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_WEIGHT , rdf:Property ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcHumidifier ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_HumidifierBaseQuantities .

qto:grossWeight_SpaceHeaterBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Weight of the element itself, not including contained fluid."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSpaceHeater ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SpaceHeaterBaseQuantities .

qto:grossWeight_ElectricTimeControlBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_WEIGHT , rdf:Property ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcElectricTimeControl ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ElectricTimeControlBaseQuantities .

qto:Qto_AlarmBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of alarm."^^xsd:string ;
        rdfs:label     "Alarm Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_AlarmBaseQuantities .

qto:grossWeight_SwitchingDeviceBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSwitchingDevice ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SwitchingDeviceBaseQuantities .

qto:Qto_ChillerBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of chillers."^^xsd:string ;
        rdfs:label     "Chiller Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_ChillerBaseQuantities .

qto:grossWeight_TubeBundleBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_WEIGHT , rdf:Property ;
        rdfs:comment        "Weight of the element itself, not including contained fluid."^^xsd:string ;
        rdfs:domain         ifcowl:IfcTubeBundle ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_TubeBundleBaseQuantities .

qto:grossWeight_StackTerminalBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcStackTerminal ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_StackTerminalBaseQuantities .

qto:grossFootprintArea_WallBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_AREA ;
        rdfs:comment        "Area of the wall as viewed by a ground floor view, not taking any wall modifications (like recesses) into account. It is also referred to as the foot print of the wall."^^xsd:string ;
        rdfs:domain         ifcowl:IfcWall ;
        rdfs:label          "Gross Footprint Area"@en , "Bruttogrundfl\\S\\dche"@de-DE , "\\X2\\30D530C330C830D730EA30F330C897627A4D\\X0\\"@ja-JP ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossFootprintArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_WallBaseQuantities .

qto:grossWeight_CoilBaseQuantities
        a                   ifcdoc:Q_WEIGHT , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcCoil ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_CoilBaseQuantities .

qto:Qto_ProtectiveDeviceBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of protective device."^^xsd:string ;
        rdfs:label     "Protective Device Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_ProtectiveDeviceBaseQuantities .

qto:grossCrossSectionArea_DuctSegmentBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_AREA , rdf:Property ;
        rdfs:comment        "Area of the cross section, including the duct itself and the interior flow space."^^xsd:string ;
        rdfs:domain         ifcowl:IfcDuctSegment ;
        rdfs:label          "Gross Cross Section Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossCrossSectionArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_DuctSegmentBaseQuantities .

qto:grossWeight_DuctFittingBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Weight of the duct fitting."^^xsd:string ;
        rdfs:domain         ifcowl:IfcDuctFitting ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_DuctFittingBaseQuantities .

qto:netArea_PlateBaseQuantities
        a                   rdf:Property , ifcdoc:Q_AREA , spin:MagicProperty ;
        rdfs:comment        "Total area of the extruded area of the plate. Openings and recesses are taken into account by subtraction, projections by addition. Only given, if the plate is prismatic."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPlate ;
        rdfs:label          "Net Area"@en , "Nettofl\\S\\dche"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PlateBaseQuantities .

qto:grossWeight_EvaporativeCoolerBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcEvaporativeCooler ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_EvaporativeCoolerBaseQuantities .

qto:netWeight_WallBaseQuantities
        a                   ifcdoc:Q_WEIGHT , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Total net weight of the wall, without add-on parts, taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcWall ;
        rdfs:label          "\\X2\\6B63547391CD91CF\\X0\\"@ja-JP , "Net Weight"@en , "Nettogewicht"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_WallBaseQuantities .

qto:grossFloorArea_BuildingStoreyBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_AREA , rdf:Property ;
        rdfs:comment        "Sum of all gross areas of spaces within the building storey. It includes the area of construction elements within the building storey. May be provided in addition to the quantities of the spaces and the construction elements assigend to the storey. In case of inconsistencies, the individual quantities of spaces and construction elements take precedence."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBuildingStorey ;
        rdfs:label          "\\X2\\5E8A97627A4D\\X0\\"@ja-JP , "Bruttogrundfl\\S\\dche"@de-DE , "Gross Floor Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossFloorArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BuildingStoreyBaseQuantities .

qto:outerSurfaceArea_PipeFittingBaseQuantities
        a                   ifcdoc:Q_AREA , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Total area of the extruded surfaces of the fitting (not taking into account the end cap areas)."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPipeFitting ;
        rdfs:label          "Outer Surface Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "OuterSurfaceArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PipeFittingBaseQuantities .

qto:netWeight_PileBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Total net weight of the pile without add-on parts, taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPile ;
        rdfs:label          "Net Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PileBaseQuantities .

qto:netWeight_SpaceHeaterBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_WEIGHT , rdf:Property ;
        rdfs:comment        "Weight of the element, including contained fluid as designed."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSpaceHeater ;
        rdfs:label          "Net Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SpaceHeaterBaseQuantities .

qto:grossWeight_FlowInstrumentBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_WEIGHT , rdf:Property ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcFlowInstrument ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_FlowInstrumentBaseQuantities .

qto:height_WindowBaseQuantities
        a                   ifcdoc:Q_LENGTH , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Total outer heigth of the window lining. It should only be provided, if it is a rectangular window."^^xsd:string ;
        rdfs:domain         ifcowl:IfcWindow ;
        rdfs:label          "Height"@en , "\\X2\\9AD83055\\X0\\"@ja-JP , "H\\S\\vhe"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Height" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_WindowBaseQuantities .

qto:area_ProjectionElementBaseQuantities
        a                   rdf:Property , ifcdoc:Q_AREA , spin:MagicProperty ;
        rdfs:comment        "Area of the projection as viewed by an elevation view (for wall projections or as viewed by a ground floor view (for slab projections)."^^xsd:string ;
        rdfs:domain         ifcowl:IfcProjectionElement ;
        rdfs:label          "Fl\\S\\dche"@de-DE , "Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Area" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ProjectionElementBaseQuantities .

qto:totalSurfaceArea_BoilerBaseQuantities
        a                   ifcdoc:Q_AREA , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Total surface area of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBoiler ;
        rdfs:label          "Total Surface Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "TotalSurfaceArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BoilerBaseQuantities .

qto:grossPerimeter_SpaceBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_LENGTH ;
        rdfs:comment        "Gross perimeter at the floor level of this space. It all sides of the space, including those parts of the perimeter that are created by virtual boundaries and openings (like doors)."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSpace ;
        rdfs:label          "Umfang Brutto"@de-DE , "\\X2\\54688FBA9577\\X0\\"@ja-JP , "Gross Perimeter"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossPerimeter" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SpaceBaseQuantities .

qto:netFootprintArea_WallBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_AREA ;
        rdfs:comment        "Area of the wall as viewed by a ground floor view, taking all wall modifications (like recesses) into account. It is also referred to as the foot print of the wall."^^xsd:string ;
        rdfs:domain         ifcowl:IfcWall ;
        rdfs:label          "Net Footprint Area"@en , "Nettogrundfl\\S\\dche"@de-DE , "\\X2\\6B63547330D530C330C830D730EA30F330C897627A4D\\X0\\"@ja-JP ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetFootprintArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_WallBaseQuantities .

qto:netWeight_SlabBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_WEIGHT , rdf:Property ;
        rdfs:comment        "Total net weight of the slab without add-on parts, taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSlab ;
        rdfs:label          "\\X2\\6B63547391CD91CF\\X0\\"@ja-JP , "Nettogewicht"@de-DE , "Net Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SlabBaseQuantities .

qto:crossSectionArea_ColumnBaseQuantities
        a                   ifcdoc:Q_AREA , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Total area of the cross section (or profile) of the column."^^xsd:string ;
        rdfs:domain         ifcowl:IfcColumn ;
        rdfs:label          "\\X2\\65AD976297627A4D\\X0\\"@ja-JP , "Querschnittsfl\\S\\dche"@de-DE , "Cross Section Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "CrossSectionArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ColumnBaseQuantities .

qto:Qto_WasteTerminalBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of waste terminal."^^xsd:string ;
        rdfs:label     "Waste Terminal Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_WasteTerminalBaseQuantities .

qto:netVolume_BuildingBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_VOLUME , rdf:Property ;
        rdfs:comment        "Sum of all net volumes of spaces enclosed by the building. It iexcludes the volumes of construction elements within the building. May be provided in addition to the quantities of the spaces assigend to the building. In case of inconsistencies, the individual quantities of spaces take precedence."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBuilding ;
        rdfs:label          "Nettorauminhalt"@de-DE , "\\X2\\6B6354735EFA72694F537A4D\\X0\\"@ja-JP , "Net Volume"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BuildingBaseQuantities .

qto:count_ReinforcingElementBaseQuantities
        a                   ifcdoc:Q_COUNT , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Total count of reinforcing items."^^xsd:string ;
        rdfs:domain         ifcowl:IfcReinforcingElement ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Count" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:countValue_IfcQuantityCount ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ReinforcingElementBaseQuantities .

qto:Qto_LightFixtureBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of light fixture."^^xsd:string ;
        rdfs:label     "Light Fixture Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_LightFixtureBaseQuantities .

qto:netArea_RoofBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_AREA ;
        rdfs:comment        "Total net area of the outer surface of the roof. It is the suma of all roof slab net areas. Roof openings, like sky windows and other openings and cut-outs are taken into account."^^xsd:string ;
        rdfs:domain         ifcowl:IfcRoof ;
        rdfs:label          "Net Area"@en , "Nettofl\\S\\dche"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_RoofBaseQuantities .

qto:grossWeight_ChillerBaseQuantities
        a                   ifcdoc:Q_WEIGHT , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcChiller ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ChillerBaseQuantities .

qto:grossWeight_ProtectiveDeviceTrippingUnitBaseQuantities
        a                   ifcdoc:Q_WEIGHT , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcProtectiveDeviceTrippingUnit ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ProtectiveDeviceTrippingUnitBaseQuantities .

qto:grossWeight_PipeFittingBaseQuantities
        a                   ifcdoc:Q_WEIGHT , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Weight of the pipe fitting itself, not including contained fluid."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPipeFitting ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PipeFittingBaseQuantities .

qto:perimeter_DoorBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_LENGTH ;
        rdfs:comment        "Total perimeter of the outer lining of the door."^^xsd:string ;
        rdfs:domain         ifcowl:IfcDoor ;
        rdfs:label          "Umfang"@de-DE , "Perimeter"@en , "\\X2\\546856F29577\\X0\\"@ja-JP ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Perimeter" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_DoorBaseQuantities .

qto:Qto_CurtainWallQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of curtain walls."^^xsd:string ;
        rdfs:label     "$"@ja-JP , "$"@de-DE , "Curtain Wall Quantities"@en ;
        ifcdoc:groups  qto:grossSideArea_CurtainWallQuantities , qto:netSideArea_CurtainWallQuantities , qto:width_CurtainWallQuantities , qto:height_CurtainWallQuantities , qto:length_CurtainWallQuantities .

qto:grossWeight_AirTerminalBaseQuantities
        a                   ifcdoc:Q_WEIGHT , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcAirTerminal ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_AirTerminalBaseQuantities .

qto:grossWeight_CommunicationsApplianceBaseQuantities
        a                   ifcdoc:Q_WEIGHT , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcCommunicationsAppliance ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_CommunicationsApplianceBaseQuantities .

qto:height_WallBaseQuantities
        a                   rdf:Property , ifcdoc:Q_LENGTH , spin:MagicProperty ;
        rdfs:comment        "Total nominal height of the wall. It should only be provided, if it is constant along the wall path."^^xsd:string ;
        rdfs:domain         ifcowl:IfcWall ;
        rdfs:label          "Height"@en , "H\\S\\vhe"@de-DE , "\\X2\\9AD83055\\X0\\"@ja-JP ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Height" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_WallBaseQuantities .

qto:overtimeWork_LaborResourceBaseQuantities
        a                   rdf:Property , ifcdoc:Q_TIME , spin:MagicProperty ;
        rdfs:comment        "Work that is performed after exceeding a particular limit such as hours per day and/or hours per week, after which company or municipal policy requires a different rate to apply.  Note: Policies for when overtime takes effect are the responsibility of the user or application; they are not modelled in IFC."^^xsd:string ;
        rdfs:domain         ifcowl:IfcLaborResource ;
        rdfs:label          "Overtime Work"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "OvertimeWork" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:timeValue_IfcQuantityTime ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_LaborResourceBaseQuantities .

qto:numberOfGangs_JunctionBoxBaseQuantities
        a                   ifcdoc:Q_COUNT , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Number of gangs in the junction box."^^xsd:string ;
        rdfs:domain         ifcowl:IfcJunctionBox ;
        rdfs:label          "Number Of Gangs"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NumberOfGangs" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:countValue_IfcQuantityCount ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_JunctionBoxBaseQuantities .

qto:width_RampFlightBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_LENGTH , rdf:Property ;
        rdfs:comment        "Thickness of the ramp flight. It should only be provided, if it is constant."^^xsd:string ;
        rdfs:domain         ifcowl:IfcRampFlight ;
        rdfs:label          "Width"@en , "Dicke"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Width" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_RampFlightBaseQuantities .

qto:Qto_SiteBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of site."^^xsd:string ;
        rdfs:label     "$"@ja-JP , "Site Base Quantities"@en , "$"@de-DE ;
        ifcdoc:groups  qto:grossArea_SiteBaseQuantities , qto:grossPerimeter_SiteBaseQuantities .

qto:grossFloorArea_SpaceBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_AREA ;
        rdfs:comment        "Sum of all floor areas covered by the space. It includes the area covered by elementsinside the space (columns, inner walls, etc.) and excludes the area covered by wall claddings."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSpace ;
        rdfs:label          "\\X2\\5E8A97627A4D\\X0\\"@ja-JP , "Bodenfl\\S\\dche Brutto"@de-DE , "Gross Floor Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossFloorArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SpaceBaseQuantities .

qto:netArea_SlabBaseQuantities
        a                   ifcdoc:Q_AREA , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Total area of the extruded area of the slab. Openings and recesses are taken into account by subtraction, projections by addition. Only given, if the slab is prismatic."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSlab ;
        rdfs:label          "\\X2\\6B63547397627A4D\\X0\\"@ja-JP , "Nettofl\\S\\dche"@de-DE , "Net Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SlabBaseQuantities .

qto:grossWeight_DuctSilencerBaseQuantities
        a                   ifcdoc:Q_WEIGHT , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcDuctSilencer ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_DuctSilencerBaseQuantities .

qto:Qto_DuctSegmentBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types and occurrences of duct segments."^^xsd:string ;
        rdfs:label     "Duct Segment Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_DuctSegmentBaseQuantities , qto:outerSurfaceArea_DuctSegmentBaseQuantities , qto:netCrossSectionArea_DuctSegmentBaseQuantities , qto:grossCrossSectionArea_DuctSegmentBaseQuantities , qto:length_DuctSegmentBaseQuantities .

qto:Qto_InterceptorBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of interceptor."^^xsd:string ;
        rdfs:label     "Interceptor Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_InterceptorBaseQuantities .

qto:Qto_ReinforcingElementBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of reinforcement."^^xsd:string ;
        ifcdoc:groups  qto:weight_ReinforcingElementBaseQuantities , qto:length_ReinforcingElementBaseQuantities , qto:count_ReinforcingElementBaseQuantities .

qto:standardWork_LaborResourceBaseQuantities
        a                   ifcdoc:Q_TIME , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Work that is performed at regular times, up to a particular limit after which overtime rates may apply."^^xsd:string ;
        rdfs:domain         ifcowl:IfcLaborResource ;
        rdfs:label          "Standard Work"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "StandardWork" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:timeValue_IfcQuantityTime ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_LaborResourceBaseQuantities .

qto:length_DuctSegmentBaseQuantities
        a                   ifcdoc:Q_LENGTH , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Length of the segment, calculated at midpoint of cross-section, equal to the distance between inlet and outlet ports."^^xsd:string ;
        rdfs:domain         ifcowl:IfcDuctSegment ;
        rdfs:label          "Length"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Length" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_DuctSegmentBaseQuantities .

qto:netFloorArea_BuildingStoreyBaseQuantities
        a                   ifcdoc:Q_AREA , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Sum of all net areas of spaces within the building storey. It excludes the area of construction elements within the building storey. May be provided in addition to the quantities of the spaces assigend to the storey. In case of inconsistencies, the individual quantities of spaces take precedence."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBuildingStorey ;
        rdfs:label          "Net Floor Area"@en , "\\X2\\6B6354735E8A97627A4D\\X0\\"@ja-JP , "Nettogrundfl\\S\\dche"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetFloorArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BuildingStoreyBaseQuantities .

qto:Qto_CompressorBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of compressors."^^xsd:string ;
        rdfs:label     "Compressor Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_CompressorBaseQuantities .

qto:Qto_EvaporativeCoolerBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of evaporative coolers."^^xsd:string ;
        rdfs:label     "Evaporative Cooler Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_EvaporativeCoolerBaseQuantities .

qto:crossSectionArea_CableCarrierSegmentBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_AREA ;
        rdfs:comment        "Area of the cross section."^^xsd:string ;
        rdfs:domain         ifcowl:IfcCableCarrierSegment ;
        rdfs:label          "Cross Section Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "CrossSectionArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_CableCarrierSegmentBaseQuantities .

qto:projectedArea_RoofBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_AREA , rdf:Property ;
        rdfs:comment        "Total gross area of the outer surfaces of the roof, projected tp the ground. It is the sum of all projected roof slab gross areas. Roof openings, like sky windows and other openings and cut-outs are not taken into account."^^xsd:string ;
        rdfs:domain         ifcowl:IfcRoof ;
        rdfs:label          "projizierte Fl\\S\\dche"@de-DE , "Projected Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "ProjectedArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_RoofBaseQuantities .

qto:Qto_EvaporatorBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of evaporators."^^xsd:string ;
        rdfs:label     "Evaporator Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_EvaporatorBaseQuantities .

qto:Qto_CondenserBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of condensers."^^xsd:string ;
        rdfs:label     "Condenser Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_CondenserBaseQuantities .

qto:length_RailingBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_LENGTH ;
        rdfs:comment        "Total nominal length of the railing, not taking into account any cut-outs or other processing features."^^xsd:string ;
        rdfs:domain         ifcowl:IfcRailing ;
        rdfs:label          "Length"@en , "L\\S\\dnge"@de-DE , "\\X2\\95773055\\X0\\"@ja-JP ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Length" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_RailingBaseQuantities .

qto:Qto_CableFittingBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of flow cable fitting."^^xsd:string ;
        rdfs:label     "Cable Fitting Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_CableFittingBaseQuantities .

qto:Qto_FlowMeterBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of flow meters."^^xsd:string ;
        rdfs:label     "Flow Meter Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_FlowMeterBaseQuantities .

qto:grossPerimeter_SiteBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_LENGTH ;
        rdfs:comment        "Perimeter of the site boundary, measured in horizontal projection."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSite ;
        rdfs:label          "\\X2\\54688FBA9577\\X0\\"@ja-JP , "Gross Perimeter"@en , "Umfang"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossPerimeter" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SiteBaseQuantities .

qto:length_CableCarrierSegmentBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_LENGTH ;
        rdfs:comment        "Length of the segment, calculated at midpoint of cross-section, equal to the distance between inlet and outlet ports."^^xsd:string ;
        rdfs:domain         ifcowl:IfcCableCarrierSegment ;
        rdfs:label          "Length"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Length" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_CableCarrierSegmentBaseQuantities .

qto:length_CableSegmentBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_LENGTH , rdf:Property ;
        rdfs:comment        "Length of the segment, calculated at midpoint of cross-section, equal to the distance between inlet and outlet ports."^^xsd:string ;
        rdfs:domain         ifcowl:IfcCableSegment ;
        rdfs:label          "Length"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Length" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_CableSegmentBaseQuantities .

qto:Qto_PipeSegmentBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types and occurrences of pipe segments."^^xsd:string ;
        rdfs:label     "Pipe Segment Base Quantities"@en ;
        ifcdoc:groups  qto:netWeight_PipeSegmentBaseQuantities , qto:grossWeight_PipeSegmentBaseQuantities , qto:outerSurfaceArea_PipeSegmentBaseQuantities , qto:netCrossSectionArea_PipeSegmentBaseQuantities , qto:grossCrossSectionArea_PipeSegmentBaseQuantities , qto:length_PipeSegmentBaseQuantities .

qto:eavesHeigth_BuildingBaseQuantities
        a                   ifcdoc:Q_LENGTH , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Standard net height of this storey, from the top surface of the construction floor, to the bottom surface of the construction floor or roof above. Only provided is there is a constant height."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBuilding ;
        rdfs:label          "Traufh\\S\\vhe"@de-DE , "Eaves Heigth"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "EavesHeigth" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BuildingBaseQuantities .

qto:grossWeight_CableSegmentBaseQuantities
        a                   rdf:Property , ifcdoc:Q_WEIGHT , spin:MagicProperty ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcCableSegment ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_CableSegmentBaseQuantities .

qto:length_PipeSegmentBaseQuantities
        a                   ifcdoc:Q_LENGTH , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Length of the segment, calculated at midpoint of cross-section, equal to the distance between inlet and outlet ports."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPipeSegment ;
        rdfs:label          "Length"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Length" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PipeSegmentBaseQuantities .

qto:totalSurfaceArea_AirTerminalBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_AREA ;
        rdfs:comment        "Gross area of the air terminal face plate."^^xsd:string ;
        rdfs:domain         ifcowl:IfcAirTerminal ;
        rdfs:label          "Total Surface Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "TotalSurfaceArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_AirTerminalBaseQuantities .

qto:netSurfaceArea_DistributionChamberElementBaseQuantities
        a                   ifcdoc:Q_AREA , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Total net area of the inner surface of the chamber, subtracting any openings such as for pipes, ducts, or cables."^^xsd:string ;
        rdfs:domain         ifcowl:IfcDistributionChamberElement ;
        rdfs:label          "Net Surface Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetSurfaceArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_DistributionChamberElementBaseQuantities .

qto:Qto_MemberBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of members."^^xsd:string ;
        rdfs:label     "$"@de-DE , "Member Base Quantities"@en ;
        ifcdoc:groups  qto:netSurfaceArea_MemberBaseQuantities , qto:netVolume_MemberBaseQuantities , qto:grossSurfaceArea_MemberBaseQuantities , qto:grossVolume_MemberBaseQuantities , qto:length_MemberBaseQuantities , qto:grossWeight_MemberBaseQuantities , qto:crossSectionArea_MemberBaseQuantities , qto:netWeight_MemberBaseQuantities , qto:outerSurfaceArea_MemberBaseQuantities .

qto:Qto_SolarDeviceBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of solar devices."^^xsd:string ;
        rdfs:label     "Solar Device Base Quantities"@en ;
        ifcdoc:groups  qto:grossArea_SolarDeviceBaseQuantities , qto:grossWeight_SolarDeviceBaseQuantities .

qto:Qto_TransformerBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of transformer."^^xsd:string ;
        rdfs:label     "Transformer Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_TransformerBaseQuantities .

qto:grossVolume_DistributionChamberElementBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_VOLUME ;
        rdfs:comment        "Total gross volume of the chamber, not taking into account any enclosed elements such as pipes, ducts, cables, or equipment."^^xsd:string ;
        rdfs:domain         ifcowl:IfcDistributionChamberElement ;
        rdfs:label          "Gross Volume"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_DistributionChamberElementBaseQuantities .

qto:netSurfaceArea_BeamBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_AREA ;
        rdfs:comment        "Net surface area of the beam, normally generated as perimeter * length + 2 * cross section area taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBeam ;
        rdfs:label          "Net Surface Area"@en , "Nettooberfl\\S\\dche"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetSurfaceArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BeamBaseQuantities .

qto:grossHeight_BuildingStoreyBaseQuantities
        a                   ifcdoc:Q_LENGTH , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Standard gross height of this storey, from the top surface of the construction floor, to the top surface of the construction floor or roof above. Only provided is there is a constant height."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBuildingStorey ;
        rdfs:label          "\\X2\\968E9AD8\\X0\\"@ja-JP , "Systemh\\S\\vhe"@de-DE , "Gross Height"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossHeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BuildingStoreyBaseQuantities .

qto:grossWeight_ValveBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcValve ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ValveBaseQuantities .

qto:Qto_BuildingStoreyBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of building storey."^^xsd:string ;
        rdfs:label     "Building Storey Base Quantities"@en , "$"@ja-JP , "$"@de-DE ;
        ifcdoc:groups  qto:netFloorArea_BuildingStoreyBaseQuantities , qto:netVolume_BuildingStoreyBaseQuantities , qto:netHeigtht_BuildingStoreyBaseQuantities , qto:grossFloorArea_BuildingStoreyBaseQuantities , qto:grossPerimeter_BuildingStoreyBaseQuantities , qto:grossHeight_BuildingStoreyBaseQuantities , qto:grossVolume_BuildingStoreyBaseQuantities .

qto:grossVolume_BuildingStoreyBaseQuantities
        a                   ifcdoc:Q_VOLUME , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Sum of all gross volumes of spaces enclosed by the building storey. It includes the volumes of construction elements within the building storey. May be provided in addition to the quantities of the spaces and the construction elements assigend to the storey. In case of inconsistencies, the individual quantities of spaces and construction elements take precedence."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBuildingStorey ;
        rdfs:label          "Bruttorauminhalt"@de-DE , "Gross Volume"@en , "\\X2\\5EFA7269968E4F537A4D\\X0\\"@ja-JP ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BuildingStoreyBaseQuantities .

qto:netCrossSectionArea_DuctFittingBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_AREA ;
        rdfs:comment        "Area of the cross section at the inlet, including the duct fitting and excluding the interior flow space."^^xsd:string ;
        rdfs:domain         ifcowl:IfcDuctFitting ;
        rdfs:label          "Net Cross Section Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetCrossSectionArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_DuctFittingBaseQuantities .

qto:width_PlateBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_LENGTH ;
        rdfs:comment        "Nominal width (or thickness) of the plate. Only given, if the plate is prismatic (constant thickess)."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPlate ;
        rdfs:label          "Width"@en , "Dicke"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Width" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PlateBaseQuantities .

qto:grossWeight_ConstructionMaterialResourceBaseQuantities
        a                   rdf:Property , ifcdoc:Q_WEIGHT , spin:MagicProperty ;
        rdfs:comment        "Total gross weight of the material, including material placed and wasted."^^xsd:string ;
        rdfs:domain         ifcowl:IfcConstructionMaterialResource ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ConstructionMaterialResourceBaseQuantities .

qto:Qto_ElectricMotorBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of electric motor."^^xsd:string ;
        rdfs:label     "Electric Motor Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_ElectricMotorBaseQuantities .

qto:grossWeight_PlateBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_WEIGHT , rdf:Property ;
        rdfs:comment        "Total gross weight of the plate without add-on parts, not taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPlate ;
        rdfs:label          "Bruttogewicht"@de-DE , "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PlateBaseQuantities .

qto:netWeight_BoilerBaseQuantities
        a                   rdf:Property , ifcdoc:Q_WEIGHT , spin:MagicProperty ;
        rdfs:comment        "Weight of the element, including contained fluid as designed."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBoiler ;
        rdfs:label          "Net Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BoilerBaseQuantities .

qto:netVolume_BuildingStoreyBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_VOLUME , rdf:Property ;
        rdfs:comment        "Sum of all net volumes of spaces enclosed by the building storey. It iexcludes the volumes of construction elements within the building storey. May be provided in addition to the quantities of the spaces assigend to the storey. In case of inconsistencies, the individual quantities of spaces take precedence."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBuildingStorey ;
        rdfs:label          "Nettorauminhalt"@de-DE , "Net Volume"@en , "\\X2\\6B6354735EFA7269968E4F537A4D\\X0\\"@ja-JP ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BuildingStoreyBaseQuantities .

qto:Qto_DistributionChamberElementBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of distribution chamber elements."^^xsd:string ;
        rdfs:label     "Distribution Chamber Element Base Quantities"@en ;
        ifcdoc:groups  qto:netVolume_DistributionChamberElementBaseQuantities , qto:grossVolume_DistributionChamberElementBaseQuantities , qto:netSurfaceArea_DistributionChamberElementBaseQuantities , qto:grossSurfaceArea_DistributionChamberElementBaseQuantities .

qto:weight_ReinforcingElementBaseQuantities
        a                   ifcdoc:Q_WEIGHT , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Total weight of reinforcing."^^xsd:string ;
        rdfs:domain         ifcowl:IfcReinforcingElement ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Weight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ReinforcingElementBaseQuantities .

qto:finishFloorHeight_SpaceBaseQuantities
        a                   rdf:Property , ifcdoc:Q_LENGTH , spin:MagicProperty ;
        rdfs:comment        "Height of the flooring (from base slab without flooring to the flooring height). To be provided only if the space has a constant flooring height."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSpace ;
        rdfs:label          "Fussboden H\\S\\vhe"@de-DE , "\\X2\\5E8A4ED54E0A30529AD83055\\X0\\"@ja-JP , "Finish Floor Height"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "FinishFloorHeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SpaceBaseQuantities .

qto:Qto_CoveringBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of coverings applied to spaces."^^xsd:string ;
        rdfs:label     "$"@ja-JP , "Covering Base Quantities"@en , "$"@de-DE ;
        ifcdoc:groups  qto:netArea_CoveringBaseQuantities , qto:grossArea_CoveringBaseQuantities , qto:width_CoveringBaseQuantities .

qto:Qto_OpeningElementBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of opening elements."^^xsd:string ;
        rdfs:label     "Opening Element Base Quantities"@en , "$"@ja-JP , "$"@de-DE ;
        ifcdoc:groups  qto:height_OpeningElementBaseQuantities , qto:volume_OpeningElementBaseQuantities , qto:width_OpeningElementBaseQuantities , qto:depth_OpeningElementBaseQuantities , qto:area_OpeningElementBaseQuantities .

qto:Qto_SensorBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of sensor."^^xsd:string ;
        rdfs:label     "Sensor Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_SensorBaseQuantities .

qto:grossWeight_WallBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Total gross weight of the wall, without add-on parts, not taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcWall ;
        rdfs:label          "\\X2\\91CD91CF\\X0\\"@ja-JP , "Bruttogewicht"@de-DE , "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_WallBaseQuantities .

qto:grossWeight_BoilerBaseQuantities
        a                   ifcdoc:Q_WEIGHT , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Weight of the element, not including contained fluid."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBoiler ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BoilerBaseQuantities .

qto:grossWeight_CableCarrierSegmentBaseQuantities
        a                   ifcdoc:Q_WEIGHT , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcCableCarrierSegment ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_CableCarrierSegmentBaseQuantities .

qto:grossWeight_ElectricGeneratorBaseQuantities
        a                   ifcdoc:Q_WEIGHT , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcElectricGenerator ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ElectricGeneratorBaseQuantities .

qto:outerSurfaceArea_DuctSegmentBaseQuantities
        a                   rdf:Property , ifcdoc:Q_AREA , spin:MagicProperty ;
        rdfs:comment        "Total area of the extruded surfaces of the duct (not taking into account the end cap areas), normally generated as perimeter * length."^^xsd:string ;
        rdfs:domain         ifcowl:IfcDuctSegment ;
        rdfs:label          "Outer Surface Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "OuterSurfaceArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_DuctSegmentBaseQuantities .

qto:grossCrossSectionArea_PipeSegmentBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_AREA ;
        rdfs:comment        "Area of the cross section, including the pipe itself and the interior flow space."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPipeSegment ;
        rdfs:label          "Gross Cross Section Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossCrossSectionArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PipeSegmentBaseQuantities .

qto:outerSurfaceArea_CableSegmentBaseQuantities
        a                   ifcdoc:Q_AREA , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Total surface area of the cable."^^xsd:string ;
        rdfs:domain         ifcowl:IfcCableSegment ;
        rdfs:label          "Outer Surface Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "OuterSurfaceArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_CableSegmentBaseQuantities .

qto:Qto_AudioVisualApplianceBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of audio visual appliance."^^xsd:string ;
        rdfs:label     "Audio Visual Appliance Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_AudioVisualApplianceBaseQuantities .

qto:Qto_CableCarrierFittingBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of cable carrier fitting."^^xsd:string ;
        rdfs:label     "Cable Carrier Fitting Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_CableCarrierFittingBaseQuantities .

qto:grossWeight_SlabBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_WEIGHT , rdf:Property ;
        rdfs:comment        "Total gross weight of the slab without add-on parts, not taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSlab ;
        rdfs:label          "Bruttogewicht"@de-DE , "\\X2\\91CD91CF\\X0\\"@ja-JP , "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SlabBaseQuantities .

qto:netWeight_ConstructionMaterialResourceBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Total net weight of the material, including material placed but excluding material wasted."^^xsd:string ;
        rdfs:domain         ifcowl:IfcConstructionMaterialResource ;
        rdfs:label          "Net Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ConstructionMaterialResourceBaseQuantities .

qto:grossWeight_AirTerminalBoxTypeBaseQuantities
        a                   ifcdoc:Q_WEIGHT , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcAirTerminalBox ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_AirTerminalBoxTypeBaseQuantities .

qto:crossSectionArea_MemberBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_AREA , rdf:Property ;
        rdfs:comment        "Total area of the cross section (or profile) of the member."^^xsd:string ;
        rdfs:domain         ifcowl:IfcMember ;
        rdfs:label          "Cross Section Area"@en , "Querschnittsfl\\S\\dche"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "CrossSectionArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_MemberBaseQuantities .

qto:perimeter_SlabBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_LENGTH ;
        rdfs:comment        "Perimeter measured along the outer boundaries of the slab. Only given, if the slab is prismatic (constant thickness)."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSlab ;
        rdfs:label          "\\X2\\546856F29577\\X0\\"@ja-JP , "Perimeter"@en , "Umfang"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Perimeter" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SlabBaseQuantities .

qto:Qto_UnitaryEquipmentBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of unitary equipment."^^xsd:string ;
        rdfs:label     "Unitary Equipment Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_UnitaryEquipmentBaseQuantities .

qto:Qto_SwitchingDeviceBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of switching device."^^xsd:string ;
        rdfs:label     "Switching Device Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_SwitchingDeviceBaseQuantities .

qto:Qto_ProjectionElementBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of projection elements."^^xsd:string ;
        rdfs:label     "Projection Element Base Quantities"@en , "$"@de-DE ;
        ifcdoc:groups  qto:volume_ProjectionElementBaseQuantities , qto:area_ProjectionElementBaseQuantities .

qto:netVolume_WallBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_VOLUME ;
        rdfs:comment        "Volume of the wall, after subtracting the openings and after considering the connection geometry."^^xsd:string ;
        rdfs:domain         ifcowl:IfcWall ;
        rdfs:label          "\\X2\\6B6354734F537A4D\\X0\\"@ja-JP , "Nettovolumen"@de-DE , "Net Volume"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_WallBaseQuantities .

qto:Qto_CoilBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of coils."^^xsd:string ;
        rdfs:label     "Coil Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_CoilBaseQuantities .

qto:area_DoorBaseQuantities
        a                   rdf:Property , ifcdoc:Q_AREA , spin:MagicProperty ;
        rdfs:comment        "Total area of the outer lining of the door."^^xsd:string ;
        rdfs:domain         ifcowl:IfcDoor ;
        rdfs:label          "\\X2\\97627A4D\\X0\\"@ja-JP , "Fl\\S\\dche"@de-DE , "Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Area" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_DoorBaseQuantities .

qto:grossWeight_HeatExchangerBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcHeatExchanger ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_HeatExchangerBaseQuantities .

qto:Qto_ActuatorBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of actuator."^^xsd:string ;
        rdfs:label     "Actuator Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_ActuatorBaseQuantities .

qto:perimeter_WindowBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_LENGTH ;
        rdfs:comment        "Total perimeter of the outer lining of the window."^^xsd:string ;
        rdfs:domain         ifcowl:IfcWindow ;
        rdfs:label          "Perimeter"@en , "\\X2\\546856F29577\\X0\\"@ja-JP , "Umfang"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Perimeter" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_WindowBaseQuantities .

qto:height_SpaceBaseQuantities
        a                   ifcdoc:Q_LENGTH , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Total height (from base slab without flooring to ceiling without suspended ceiling) for this space (measured from top of slab below to bottom of slab above). To be provided only if the space has a constant height."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSpace ;
        rdfs:label          "\\X2\\9AD83055\\X0\\"@ja-JP , "Height"@en , "H\\S\\vhe"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Height" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SpaceBaseQuantities .

qto:grossWeight_DuctSegmentBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Weight of the duct segment."^^xsd:string ;
        rdfs:domain         ifcowl:IfcDuctSegment ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_DuctSegmentBaseQuantities .

qto:netWeight_PipeFittingBaseQuantities
        a                   ifcdoc:Q_WEIGHT , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Weight of the pipe fitting, including contained fluid as designed."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPipeFitting ;
        rdfs:label          "Net Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PipeFittingBaseQuantities .

qto:netVolume_SpaceBaseQuantities
        a                   ifcdoc:Q_VOLUME , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Net volume enclosed by the space, excluding the volume of construction elements inside the space."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSpace ;
        rdfs:label          "Nettovolumen"@de-DE , "Net Volume"@en , "\\X2\\6B6354734F537A4D\\X0\\"@ja-JP ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SpaceBaseQuantities .

qto:grossWeight_AlarmBaseQuantities
        a                   ifcdoc:Q_WEIGHT , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcAlarm ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_AlarmBaseQuantities .

qto:outerSurfaceArea_PipeSegmentBaseQuantities
        a                   ifcdoc:Q_AREA , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Total area of the extruded surfaces of the pipe (not taking into account the end cap areas), normally generated as perimeter * length."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPipeSegment ;
        rdfs:label          "Outer Surface Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "OuterSurfaceArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PipeSegmentBaseQuantities .

qto:Qto_MotorConnectionBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of motor connection."^^xsd:string ;
        rdfs:label     "Motor Connection Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_MotorConnectionBaseQuantities .

qto:Qto_RoofBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of roof."^^xsd:string ;
        rdfs:label     "Roof Base Quantities"@en , "$"@de-DE ;
        ifcdoc:groups  qto:projectedArea_RoofBaseQuantities , qto:netArea_RoofBaseQuantities , qto:grossArea_RoofBaseQuantities .

qto:Qto_FootingBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of footings."^^xsd:string ;
        rdfs:label     "Footing Base Quantities"@en ;
        ifcdoc:groups  qto:outerSurfaceArea_FootingBaseQuantities , qto:netVolume_FootingBaseQuantities , qto:netWeight_FootingBaseQuantities , qto:grossWeight_FootingBaseQuantities , qto:grossVolume_FootingBaseQuantities , qto:length_FootingBaseQuantities , qto:grossSurfaceArea_FootingBaseQuantities , qto:width_FootingBaseQuantities , qto:crossSectionArea_FootingBaseQuantities , qto:height_FootingBaseQuantities .

qto:grossWeight_JunctionBoxBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcJunctionBox ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_JunctionBoxBaseQuantities .

qto:netWeight_TubeBundleBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_WEIGHT , rdf:Property ;
        rdfs:comment        "Weight of the element, including contained fluid as designed."^^xsd:string ;
        rdfs:domain         ifcowl:IfcTubeBundle ;
        rdfs:label          "Net Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_TubeBundleBaseQuantities .

qto:grossSideArea_CurtainWallQuantities
        a                   ifcdoc:Q_AREA , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Area of the curtain wall as viewed by an elevation view of the middle plane of the curtain wall.  It does not take into account any curtain wall modifications."^^xsd:string ;
        rdfs:domain         ifcowl:IfcCurtainWall ;
        rdfs:label          "Bruttofl\\S\\dche"@de-DE , "Gross Side Area"@en , "\\X2\\5074976297627A4D\\X0\\"@ja-JP ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossSideArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_CurtainWallQuantities .

qto:Qto_RailingBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of railings."^^xsd:string ;
        rdfs:label     "$"@ja-JP , "Railing Base Quantities"@en , "$"@de-DE ;
        ifcdoc:groups  qto:length_RailingBaseQuantities .

qto:grossWeight_BeamBaseQuantities
        a                   ifcdoc:Q_WEIGHT , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Total gross weight of the beam without add-on parts, not taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBeam ;
        rdfs:label          "\\X2\\91CD91CF\\X0\\"@ja-JP , "Bruttogewicht"@de-DE , "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BeamBaseQuantities .

qto:grossSurfaceArea_FootingBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_AREA , rdf:Property ;
        rdfs:comment        "Total area of the footing, normally generated as perimeter * length + 2 * cross section area. It is the sum of OuterSurfaceArea + (2 x CrossSectionArea) and shall only be given, if the OuterSurfaceArea and CrossSectionArea cannot be established separately."^^xsd:string ;
        rdfs:domain         ifcowl:IfcFooting ;
        rdfs:label          "Gross Surface Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossSurfaceArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_FootingBaseQuantities .

qto:length_BeamBaseQuantities
        a                   ifcdoc:Q_LENGTH , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Total length of the beam, not taking into account any cut-outs or other processing features."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBeam ;
        rdfs:label          "Length"@en , "\\X2\\95773055\\X0\\"@ja-JP , "L\\S\\dnge"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Length" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BeamBaseQuantities .

qto:grossWeight_ElectricDistributionBoardBaseQuantities
        a                   ifcdoc:Q_WEIGHT , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcElectricDistributionBoard ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ElectricDistributionBoardBaseQuantities .

qto:grossWeight_BurnerBaseQuantities
        a                   rdf:Property , ifcdoc:Q_WEIGHT , spin:MagicProperty ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBurner ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BurnerBaseQuantities .

qto:Qto_DoorBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of doors."^^xsd:string ;
        rdfs:label     "$"@ja-JP , "Door Base Quantities"@en , "$"@de-DE ;
        ifcdoc:groups  qto:area_DoorBaseQuantities , qto:perimeter_DoorBaseQuantities , qto:height_DoorBaseQuantities , qto:width_DoorBaseQuantities .

qto:height_OpeningElementBaseQuantities
        a                   ifcdoc:Q_LENGTH , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Height of the opening, in case of wall openings it is the vertical dimension in case of slab openings it is one horizontal dimension. Only provided, if the area is rectangular."^^xsd:string ;
        rdfs:domain         ifcowl:IfcOpeningElement ;
        rdfs:label          "Height"@en , "\\X2\\958B53E39AD83055\\X0\\"@ja-JP , "H\\S\\vhe"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Height" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_OpeningElementBaseQuantities .

qto:length_ChimneyBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_LENGTH , rdf:Property ;
        rdfs:comment        "Total length of the chimney from the foundation (or beginning) to the top not taking into account any cut-outs or other processing features."^^xsd:string ;
        rdfs:domain         ifcowl:IfcChimney ;
        rdfs:label          "L\\S\\dnge"@de-DE , "\\X2\\95773055\\X0\\"@ja-JP , "Length"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Length" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ChimneyBaseQuantities .

qto:grossArea_SiteBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_AREA , rdf:Property ;
        rdfs:comment        "Gross area for this site, measured in horizontal projections."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSite ;
        rdfs:label          "\\X2\\6577573097627A4D\\X0\\"@ja-JP , "Grundfl\\S\\dche"@de-DE , "Gross Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SiteBaseQuantities .

qto:volume_OpeningElementBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_VOLUME ;
        rdfs:comment        "Volume of the opening. It is the subtraction volume of the opening from the voided element (e.g. wall or slab). In case that the geometric volume of the opening is bigger then the subtraction volume, only the subtraction volume should be used."^^xsd:string ;
        rdfs:domain         ifcowl:IfcOpeningElement ;
        rdfs:label          "Volume"@en , "\\X2\\4F537A4D\\X0\\"@ja-JP , "Volumen"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Volume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_OpeningElementBaseQuantities .

qto:netVolume_PlateBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_VOLUME , rdf:Property ;
        rdfs:comment        "Total net volume of the plate. Openings and recesses are taken into account by subtraction, projections by addition."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPlate ;
        rdfs:label          "Nettovolumen"@de-DE , "Net Volume"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PlateBaseQuantities .

qto:Qto_ElectricFlowStorageDeviceBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of electric flow storage device."^^xsd:string ;
        rdfs:label     "Electric Flow Storage Device Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_ElectricFlowStorageDeviceBaseQuantities .

qto:Qto_BoilerBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of boilers."^^xsd:string ;
        rdfs:label     "Boiler Base Quantities"@en ;
        ifcdoc:groups  qto:totalSurfaceArea_BoilerBaseQuantities , qto:netWeight_BoilerBaseQuantities , qto:grossWeight_BoilerBaseQuantities .

qto:grossWeight_FilterBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcFilter ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_FilterBaseQuantities .

qto:grossArea_RampFlightBaseQuantities
        a                   ifcdoc:Q_AREA , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Total area of the ramp flight (not the projected area). Openings, recesses and projections are not taken into account. Only given, if the ramp flight is prismatic."^^xsd:string ;
        rdfs:domain         ifcowl:IfcRampFlight ;
        rdfs:label          "Gross Area"@en , "Bruttofl\\S\\dche"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_RampFlightBaseQuantities .

qto:Qto_ElectricGeneratorBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of electric generator."^^xsd:string ;
        rdfs:label     "Electric Generator Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_ElectricGeneratorBaseQuantities .

qto:grossWeight_WasteTerminalBaseQuantities
        a                   rdf:Property , ifcdoc:Q_WEIGHT , spin:MagicProperty ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcWasteTerminal ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_WasteTerminalBaseQuantities .

qto:Qto_StackTerminalBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of stack terminal."^^xsd:string ;
        rdfs:label     "Stack Terminal Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_StackTerminalBaseQuantities .

qto:Qto_RampFlightBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of ramp flights."^^xsd:string ;
        rdfs:label     "$"@de-DE , "Ramp Flight Base Quantities"@en ;
        ifcdoc:groups  qto:netArea_RampFlightBaseQuantities , qto:length_RampFlightBaseQuantities , qto:width_RampFlightBaseQuantities , qto:grossVolume_RampFlightBaseQuantities , qto:netVolume_RampFlightBaseQuantities , qto:grossArea_RampFlightBaseQuantities .

qto:Qto_DuctSilencerBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of duct silencers."^^xsd:string ;
        rdfs:label     "Duct Silencer Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_DuctSilencerBaseQuantities .

qto:Qto_ProtectiveDeviceTrippingUnitBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of protective device tripping unit."^^xsd:string ;
        rdfs:label     "Protective Device Tripping Unit Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_ProtectiveDeviceTrippingUnitBaseQuantities .

qto:Qto_ControllerBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of controller."^^xsd:string ;
        rdfs:label     "Controller Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_ControllerBaseQuantities .

qto:grossWeight_LampBaseQuantities
        a                   rdf:Property , ifcdoc:Q_WEIGHT , spin:MagicProperty ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcLamp ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_LampBaseQuantities .

qto:Qto_FlowInstrumentBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of flow instrument."^^xsd:string ;
        rdfs:label     "Flow Instrument Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_FlowInstrumentBaseQuantities .

qto:depth_SlabBaseQuantities
        a                   ifcdoc:Q_LENGTH , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Depth (one direction of the non-projected foot print area) of the slab. It shall only be provided, if the slab is rectangular.\\X\\0D\\X\\0A<blockquote class=\"note\">NOTE&nbsp; Also refered to as width, but not to be confused with the \"Width\" quantity, that denotes the thickness in the context of the slab.</blockquote>"^^xsd:string ;
        rdfs:domain         ifcowl:IfcSlab ;
        rdfs:label          "Depth"@en , "Breite"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Depth" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SlabBaseQuantities .

qto:grossVolume_SpaceBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_VOLUME , rdf:Property ;
        rdfs:comment        "Gross volume enclosed by the space, including the volume of construction elements inside the space."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSpace ;
        rdfs:label          "Bruttovolumen"@de-DE , "\\X2\\4F537A4D\\X0\\"@ja-JP , "Gross Volume"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SpaceBaseQuantities .

qto:netVolume_BeamBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_VOLUME ;
        rdfs:comment        "Total net volume of the beam, taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBeam ;
        rdfs:label          "Net Volume"@en , "\\X2\\6B6354734F537A4D\\X0\\"@ja-JP , "Nettovolumen"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BeamBaseQuantities .

qto:Qto_FireSuppressionTerminalBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of fire suppression terminal."^^xsd:string ;
        rdfs:label     "Fire Suppression Terminal Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_FireSuppressionTerminalBaseQuantities .

qto:grossWeight_TankBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_WEIGHT , rdf:Property ;
        rdfs:comment        "Weight of the element itself, not including contained fluid."^^xsd:string ;
        rdfs:domain         ifcowl:IfcTank ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_TankBaseQuantities .

qto:height_BuildingBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_LENGTH ;
        rdfs:comment        "Standard gross height of this building, from the top surface of the construction floor, to the top surface of the construction floor or roof above. Only provided is there is a constant height."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBuilding ;
        rdfs:label          "Height"@en , "\\X2\\9AD83055\\X0\\"@ja-JP , "Firsth\\S\\vhe"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Height" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BuildingBaseQuantities .

qto:grossArea_SolarDeviceBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_AREA ;
        rdfs:comment        "Area of the solar device including the outer frame."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSolarDevice ;
        rdfs:label          "Gross Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SolarDeviceBaseQuantities .

qto:Qto_FanBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of fans."^^xsd:string ;
        rdfs:label     "Fan Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_FanBaseQuantities .

qto:grossVolume_ConstructionMaterialResourceBaseQuantities
        a                   ifcdoc:Q_VOLUME , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Total gross volume of the material, including material placed and wasted."^^xsd:string ;
        rdfs:domain         ifcowl:IfcConstructionMaterialResource ;
        rdfs:label          "Gross Volume"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ConstructionMaterialResourceBaseQuantities .

qto:grossWeight_FootingBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Total gross weight of the footing without add-on parts, not taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcFooting ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_FootingBaseQuantities .

qto:width_CurtainWallQuantities
        a                   ifcdoc:Q_LENGTH , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Thickness of the curtain wall. It should only be provided, if it is constant along the curtain wall path."^^xsd:string ;
        rdfs:domain         ifcowl:IfcCurtainWall ;
        rdfs:label          "Dicke"@de-DE , "\\X2\\5E45\\X0\\"@ja-JP , "Width"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Width" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_CurtainWallQuantities .

qto:grossWeight_DamperBaseQuantities
        a                   ifcdoc:Q_WEIGHT , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcDamper ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_DamperBaseQuantities .

qto:grossVolume_RampFlightBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_VOLUME ;
        rdfs:comment        "Total gross volume of the ramp flight. Openings, recesses, and projections are not taken into account."^^xsd:string ;
        rdfs:domain         ifcowl:IfcRampFlight ;
        rdfs:label          "Gross Volume"@en , "Bruttovolumen"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_RampFlightBaseQuantities .

qto:perimeter_AirTerminalBaseQuantities
        a                   ifcdoc:Q_LENGTH , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Perimeter of the air terminal face plate."^^xsd:string ;
        rdfs:domain         ifcowl:IfcAirTerminal ;
        rdfs:label          "Perimeter"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Perimeter" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_AirTerminalBaseQuantities .

qto:grossWeight_ProtectiveDeviceBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_WEIGHT , rdf:Property ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcProtectiveDevice ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ProtectiveDeviceBaseQuantities .

qto:Qto_HumidifierBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of humidifiers."^^xsd:string ;
        rdfs:label     "Humidifier Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_HumidifierBaseQuantities .

qto:netWeight_FootingBaseQuantities
        a                   ifcdoc:Q_WEIGHT , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Total net weight of the footing without add-on parts, taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcFooting ;
        rdfs:label          "Net Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_FootingBaseQuantities .

qto:depth_OpeningElementBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_LENGTH ;
        rdfs:comment        "Depth (or thickness) of the opening, in case of openings it shall be identical to the width (or thickness) of the voided element, in case of recesses it shall be less. Only provided, if the depth is constant."^^xsd:string ;
        rdfs:domain         ifcowl:IfcOpeningElement ;
        rdfs:label          "Depth"@en , "Tiefe"@de-DE , "\\X2\\958B53E35965884C304D\\X0\\"@ja-JP ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Depth" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_OpeningElementBaseQuantities .

qto:grossVolume_PlateBaseQuantities
        a                   rdf:Property , ifcdoc:Q_VOLUME , spin:MagicProperty ;
        rdfs:comment        "Total gross volume of the plate. Openings, recesses, and projections are not taken into account."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPlate ;
        rdfs:label          "Gross Volume"@en , "Bruttovolumen"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PlateBaseQuantities .

qto:Qto_BeamBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of beams."^^xsd:string ;
        rdfs:label     "$"@ja-JP , "$"@de-DE , "Beam Base Quantities"@en ;
        ifcdoc:groups  qto:outerSurfaceArea_BeamBaseQuantities , qto:length_BeamBaseQuantities , qto:grossWeight_BeamBaseQuantities , qto:netWeight_BeamBaseQuantities , qto:grossSurfaceArea_BeamBaseQuantities , qto:grossVolume_BeamBaseQuantities , qto:crossSectionArea_BeamBaseQuantities , qto:netSurfaceArea_BeamBaseQuantities , qto:netVolume_BeamBaseQuantities .

qto:grossWeight_AudioVisualApplianceBaseQuantities
        a                   rdf:Property , ifcdoc:Q_WEIGHT , spin:MagicProperty ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcAudioVisualAppliance ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_AudioVisualApplianceBaseQuantities .

qto:usageTime_ConstructionEquipmentResourceBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_TIME , rdf:Property ;
        rdfs:comment        "Total time using the equipment including operating time and idle time."^^xsd:string ;
        rdfs:domain         ifcowl:IfcConstructionEquipmentResource ;
        rdfs:label          "Usage Time"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "UsageTime" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:timeValue_IfcQuantityTime ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ConstructionEquipmentResourceBaseQuantities .

qto:Qto_SanitaryTerminalBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of sanitary terminal."^^xsd:string ;
        rdfs:label     "Sanitary Terminal Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_SanitaryTerminalBaseQuantities .

qto:Qto_TubeBundleBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of tube bundles."^^xsd:string ;
        rdfs:label     "Tube Bundle Base Quantities"@en ;
        ifcdoc:groups  qto:netWeight_TubeBundleBaseQuantities , qto:grossWeight_TubeBundleBaseQuantities .

qto:grossFloorArea_BuildingBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_AREA , rdf:Property ;
        rdfs:comment        "Sum of all gross areas of spaces within the building. It includes the area of construction elements within the building. May be provided in addition to the quantities of the spaces and the construction elements assigend to the building. In case of inconsistencies, the individual quantities of spaces and construction elements take precedence."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBuilding ;
        rdfs:label          "Bruttogrundfl\\S\\dche"@de-DE , "\\X2\\5EF630795E8A97627A4D\\X0\\"@ja-JP , "Gross Floor Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossFloorArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BuildingBaseQuantities .

qto:width_FootingBaseQuantities
        a                   ifcdoc:Q_LENGTH , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Total nominal width (or thickness) of the footing. For strip footings it is measured perpendicular to the footing path (or longitudial axis). For other footings it is one of the horizontal dimensions. It should only be provided, if it is constant."^^xsd:string ;
        rdfs:domain         ifcowl:IfcFooting ;
        rdfs:label          "Dicke"@de-DE , "Width"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Width" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_FootingBaseQuantities .

qto:netCrossSectionArea_PipeFittingBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_AREA ;
        rdfs:comment        "Area of the cross section at the inlet, including the pipe fitting and excluding the interior flow space."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPipeFitting ;
        rdfs:label          "Net Cross Section Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetCrossSectionArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PipeFittingBaseQuantities .

qto:length_WallBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_LENGTH ;
        rdfs:comment        "Total nominal length of the wall along the wall center line (even if different to the wall path)."^^xsd:string ;
        rdfs:domain         ifcowl:IfcWall ;
        rdfs:label          "Length"@en , "L\\S\\dnge"@de-DE , "\\X2\\95773055\\X0\\"@ja-JP ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Length" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_WallBaseQuantities .

qto:width_WallBaseQuantities
        a                   ifcdoc:Q_LENGTH , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Total nominal width (or thickness) of the wall measured perpendicular to the wall path. It should only be provided, if it is constant along the wall path."^^xsd:string ;
        rdfs:domain         ifcowl:IfcWall ;
        rdfs:label          "\\X2\\5E45\\X0\\"@ja-JP , "Width"@en , "Dicke"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Width" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_WallBaseQuantities .

qto:grossWeight_VibrationIsolatorBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcVibrationIsolator ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_VibrationIsolatorBaseQuantities .

qto:grossWeight_PileBaseQuantities
        a                   ifcdoc:Q_WEIGHT , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Total gross weight of the pile without add-on parts, not taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPile ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PileBaseQuantities .

qto:Qto_SpaceHeaterBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of space heaters."^^xsd:string ;
        rdfs:label     "Space Heater Base Quantities"@en ;
        ifcdoc:groups  qto:netWeight_SpaceHeaterBaseQuantities , qto:grossWeight_SpaceHeaterBaseQuantities , qto:length_SpaceHeaterBaseQuantities .

qto:grossArea_PlateBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_AREA ;
        rdfs:comment        "Total area of the extruded area of the plate. Openings, recesses and projections are not taken into account. Only given, if the plate is prismatic."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPlate ;
        rdfs:label          "Bruttofl\\S\\dche"@de-DE , "Gross Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PlateBaseQuantities .

qto:length_PileBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_LENGTH , rdf:Property ;
        rdfs:comment        "Total length of the pile not taking into account any cut-outs or other processing features."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPile ;
        rdfs:label          "Length"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Length" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PileBaseQuantities .

qto:area_WindowBaseQuantities
        a                   ifcdoc:Q_AREA , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Total area of the outer lining of the window."^^xsd:string ;
        rdfs:domain         ifcowl:IfcWindow ;
        rdfs:label          "\\X2\\97627A4D\\X0\\"@ja-JP , "Fl\\S\\dche"@de-DE , "Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Area" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_WindowBaseQuantities .

qto:grossVolume_BuildingBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_VOLUME , rdf:Property ;
        rdfs:comment        "Sum of all gross volumes of spaces enclosed by the building. It includes the volumes of construction elements within the building. May be provided in addition to the quantities of the spaces and the construction elements assigend to the building. In case of inconsistencies, the individual quantities of spaces and construction elements take precedence."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBuilding ;
        rdfs:label          "Bruttorauminhalt"@de-DE , "Gross Volume"@en , "\\X2\\5EFA72694F537A4D\\X0\\"@ja-JP ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BuildingBaseQuantities .

qto:finishCeilingHeight_SpaceBaseQuantities
        a                   ifcdoc:Q_LENGTH , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Height of the suspended ceiling (from top of flooring to the bottom of the suspended ceiling). To be provided only if the space has a suspended ceiling with constant height."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSpace ;
        rdfs:label          "Finish Ceiling Height"@en , "\\X2\\59294E954ED54E0A30529AD83055\\X0\\"@ja-JP , "Lichte H\\S\\vhe"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "FinishCeilingHeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SpaceBaseQuantities .

qto:length_SpaceHeaterBaseQuantities
        a                   ifcdoc:Q_LENGTH , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Length of the water tube inside the component, if applicable."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSpaceHeater ;
        rdfs:label          "Length"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Length" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SpaceHeaterBaseQuantities .

qto:netVolume_ConstructionMaterialResourceBaseQuantities
        a                   rdf:Property , ifcdoc:Q_VOLUME , spin:MagicProperty ;
        rdfs:comment        "Total net volume of the material, including material placed but excluding material wasted."^^xsd:string ;
        rdfs:domain         ifcowl:IfcConstructionMaterialResource ;
        rdfs:label          "Net Volume"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ConstructionMaterialResourceBaseQuantities .

qto:grossCeilingArea_SpaceBaseQuantities
        a                   rdf:Property , ifcdoc:Q_AREA , spin:MagicProperty ;
        rdfs:comment        "Sum of all ceiling areas of the space. It includes the area covered by elementsinside the space (columns, inner walls, etc.). The ceiling area is the real (and not the projected) area (e.g. in case of sloped ceilings)."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSpace ;
        rdfs:label          "Deckenfl\\S\\dche Brutto"@de-DE , "Gross Ceiling Area"@en , "\\X2\\59294E9597627A4D\\X0\\"@ja-JP ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossCeilingArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SpaceBaseQuantities .

qto:width_DoorBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_LENGTH ;
        rdfs:comment        "Total outer width of the door lining. It should only be provided, if it is a rectangular door."^^xsd:string ;
        rdfs:domain         ifcowl:IfcDoor ;
        rdfs:label          "Breite"@de-DE , "Width"@en , "\\X2\\5E45\\X0\\"@ja-JP ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Width" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_DoorBaseQuantities .

qto:grossSurfaceArea_DistributionChamberElementBaseQuantities
        a                   rdf:Property , ifcdoc:Q_AREA , spin:MagicProperty ;
        rdfs:comment        "Total gross area of the inner surface of the chamber, not taking into account openings such as for pipes, ducts, or cables."^^xsd:string ;
        rdfs:domain         ifcowl:IfcDistributionChamberElement ;
        rdfs:label          "Gross Surface Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossSurfaceArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_DistributionChamberElementBaseQuantities .

qto:width_WindowBaseQuantities
        a                   rdf:Property , ifcdoc:Q_LENGTH , spin:MagicProperty ;
        rdfs:comment        "Total outer width of the window lining. It should only be provided, if it is a rectangular window."^^xsd:string ;
        rdfs:domain         ifcowl:IfcWindow ;
        rdfs:label          "Breite"@de-DE , "\\X2\\5E45\\X0\\"@ja-JP , "Width"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Width" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_WindowBaseQuantities .

qto:length_SlabBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_LENGTH , rdf:Property ;
        rdfs:comment        "Length (one direction of the non-projected foot print area) of the slab. It shall only be provided, if the slab is rectangular."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSlab ;
        rdfs:label          "L\\S\\dnge"@de-DE , "Length"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Length" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SlabBaseQuantities .

qto:width_SlabBaseQuantities
        a                   ifcdoc:Q_LENGTH , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Nominal width (or thickness) of the slab. Only given, if the slab is prismatic (constant thickess)."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSlab ;
        rdfs:label          "Width"@en , "Dicke"@de-DE , "\\X2\\5E45\\X0\\"@ja-JP ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Width" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SlabBaseQuantities .

qto:netFloorArea_BuildingBaseQuantities
        a                   rdf:Property , ifcdoc:Q_AREA , spin:MagicProperty ;
        rdfs:comment        "Sum of all net areas of spaces within the building. It excludes the area of construction elements within the building. May be provided in addition to the quantities of the spaces assigend to the building. In case of inconsistencies, the individual quantities of spaces take precedence."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBuilding ;
        rdfs:label          "Net Floor Area"@en , "Nettogrundfl\\S\\dche"@de-DE , "\\X2\\6B6354735E8A97627A4D\\X0\\"@ja-JP ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetFloorArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BuildingBaseQuantities .

qto:Qto_DuctFittingBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types and occurrences of duct fittings."^^xsd:string ;
        rdfs:label     "Duct Fitting Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_DuctFittingBaseQuantities , qto:outerSurfaceArea_DuctFittingBaseQuantities , qto:netCrossSectionArea_DuctFittingBaseQuantities , qto:grossCrossSectionArea_DuctFittingBaseQuantities , qto:length_DuctFittingBaseQuantities .

qto:grossVolume_StairFlightBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_VOLUME , rdf:Property ;
        rdfs:comment        "Total gross volume of the stair flight. Openings, recesses, and projections are not taken into account."^^xsd:string ;
        rdfs:domain         ifcowl:IfcStairFlight ;
        rdfs:label          "Gross Volume"@en , "Bruttovolumen"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_StairFlightBaseQuantities .

qto:Qto_DamperBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of dampers."^^xsd:string ;
        rdfs:label     "Damper Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_DamperBaseQuantities .

qto:grossWeight_CooledBeamBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcCooledBeam ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_CooledBeamBaseQuantities .

qto:Qto_ElectricTimeControlBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of electric time control."^^xsd:string ;
        rdfs:label     "Electric Time Control Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_ElectricTimeControlBaseQuantities .

qto:grossWallArea_SpaceBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_AREA ;
        rdfs:comment        "Sum of all wall (and other vertically bounding elements, like columns) areas bounded by the space. It includes the area covered by elements inside the wall area (doors, windows, other openings, etc.)."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSpace ;
        rdfs:label          "\\X2\\58C197627A4D\\X0\\"@ja-JP , "Senkrechte Fl\\S\\dche Brutto"@de-DE , "Gross Wall Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWallArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SpaceBaseQuantities .

qto:netVolume_PileBaseQuantities
        a                   rdf:Property , ifcdoc:Q_VOLUME , spin:MagicProperty ;
        rdfs:comment        "Total net volume of the pile, taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPile ;
        rdfs:label          "Net Volume"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PileBaseQuantities .

qto:length_DuctFittingBaseQuantities
        a                   ifcdoc:Q_LENGTH , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Length of the fitting, calculated at midpoint of cross-section and equal to the distance along the flow path from the port inlet to the port outlet. For junction fittings, it indicates the length of the longest flow path."^^xsd:string ;
        rdfs:domain         ifcowl:IfcDuctFitting ;
        rdfs:label          "Length"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Length" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_DuctFittingBaseQuantities .

qto:outerSurfaceArea_ColumnBaseQuantities
        a                   ifcdoc:Q_AREA , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Total area of the extruded surfaces of the column (not taking into account the end cap areas), normally generated as perimeter * length."^^xsd:string ;
        rdfs:domain         ifcowl:IfcColumn ;
        rdfs:label          "\\X2\\59168868976297627A4D\\X0\\"@ja-JP , "Mantelfl\\S\\dche"@de-DE , "Outer Surface Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "OuterSurfaceArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ColumnBaseQuantities .

qto:grossWeight_OutletBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_WEIGHT , rdf:Property ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcOutlet ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_OutletBaseQuantities .

qto:Qto_ConstructionMaterialResourceBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of construction material resources."^^xsd:string ;
        rdfs:label     "Construction Material Resource Base Quantities"@en ;
        ifcdoc:groups  qto:netWeight_ConstructionMaterialResourceBaseQuantities , qto:grossWeight_ConstructionMaterialResourceBaseQuantities , qto:netVolume_ConstructionMaterialResourceBaseQuantities , qto:grossVolume_ConstructionMaterialResourceBaseQuantities .

qto:netWallArea_SpaceBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_AREA , rdf:Property ;
        rdfs:comment        "Sum of all wall (and other vertically bounding elements, like columns) areas bounded by the space. It excludes the area covered by elements inside the wall area (doors, windows, other openings, etc.)."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSpace ;
        rdfs:label          "Net Wall Area"@en , "\\X2\\6B63547358C197627A4D\\X0\\"@ja-JP , "Senkrechte Fl\\S\\dche Netto"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetWallArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SpaceBaseQuantities .

qto:grossWeight_InterceptorBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcInterceptor ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_InterceptorBaseQuantities .

qto:netPerimeter_SpaceBaseQuantities
        a                   ifcdoc:Q_LENGTH , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Net perimeter at the floor level of this space. It excludes those parts of the perimeter that are created by by virtual boundaries and openings (like doors). It is the measurement used for skirting boards and may includes the perimeter of internal fixed objects like columns."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSpace ;
        rdfs:label          "Umfang Netto"@de-DE , "\\X2\\6B63547354688FBA9577\\X0\\"@ja-JP , "Net Perimeter"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetPerimeter" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SpaceBaseQuantities .

qto:operatingTime_ConstructionEquipmentResourceBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_TIME , rdf:Property ;
        rdfs:comment        "Productive time using the equipment including operating time and excluding idle time."^^xsd:string ;
        rdfs:domain         ifcowl:IfcConstructionEquipmentResource ;
        rdfs:label          "Operating Time"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "OperatingTime" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:timeValue_IfcQuantityTime ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ConstructionEquipmentResourceBaseQuantities .

qto:area_OpeningElementBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_AREA ;
        rdfs:comment        "Area of the opening as viewed by an elevation view (for wall openings) or as viewed by a ground floor view (for slab openings)."^^xsd:string ;
        rdfs:domain         ifcowl:IfcOpeningElement ;
        rdfs:label          "\\X2\\97627A4D\\X0\\"@ja-JP , "Fl\\S\\dche"@de-DE , "Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Area" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_OpeningElementBaseQuantities .

qto:netVolume_SlabBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_VOLUME ;
        rdfs:comment        "Total net volume of the slab. Openings and recesses are taken into account by subtraction, projections by addition."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSlab ;
        rdfs:label          "\\X2\\6B6354734F537A4D\\X0\\"@ja-JP , "Net Volume"@en , "Nettovolumen"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SlabBaseQuantities .

qto:grossWeight_CoolingTowerBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcCoolingTower ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_CoolingTowerBaseQuantities .

qto:Qto_StairFlightBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of stair flights."^^xsd:string ;
        rdfs:label     "Stair Flight Base Quantities"@en , "$"@de-DE ;
        ifcdoc:groups  qto:netVolume_StairFlightBaseQuantities , qto:grossVolume_StairFlightBaseQuantities , qto:length_StairFlightBaseQuantities .

qto:length_StairFlightBaseQuantities
        a                   rdf:Property , ifcdoc:Q_LENGTH , spin:MagicProperty ;
        rdfs:comment        "Total length of the stair flight along the walking line."^^xsd:string ;
        rdfs:domain         ifcowl:IfcStairFlight ;
        rdfs:label          "Length"@en , "L\\S\\dnge"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Length" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_StairFlightBaseQuantities .

qto:netVolume_StairFlightBaseQuantities
        a                   ifcdoc:Q_VOLUME , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Total net volume of the stair flight. Openings and recesses are taken into account by subtraction, projections by addition."^^xsd:string ;
        rdfs:domain         ifcowl:IfcStairFlight ;
        rdfs:label          "Net Volume"@en , "Nettovolumen"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_StairFlightBaseQuantities .

qto:crossSectionArea_BeamBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_AREA ;
        rdfs:comment        "Total area of the cross section (or profile) of the beam."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBeam ;
        rdfs:label          "\\X2\\65AD976297627A4D\\X0\\"@ja-JP , "Querschnittsfl\\S\\dche"@de-DE , "Cross Section Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "CrossSectionArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BeamBaseQuantities .

qto:Qto_WallBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of walls."^^xsd:string ;
        rdfs:label     "$"@ja-JP , "$"@de-DE , "Wall Base Quantities"@en ;
        ifcdoc:groups  qto:width_WallBaseQuantities , qto:netSideArea_WallBaseQuantities , qto:grossFootprintArea_WallBaseQuantities , qto:grossWeight_WallBaseQuantities , qto:height_WallBaseQuantities , qto:length_WallBaseQuantities , qto:grossSideArea_WallBaseQuantities , qto:netWeight_WallBaseQuantities , qto:netVolume_WallBaseQuantities , qto:grossVolume_WallBaseQuantities , qto:netFootprintArea_WallBaseQuantities .

qto:grossWeight_PumpBaseQuantities
        a                   rdf:Property , ifcdoc:Q_WEIGHT , spin:MagicProperty ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPump ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PumpBaseQuantities .

qto:netVolume_ColumnBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_VOLUME ;
        rdfs:comment        "Total net volume of the column, taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcColumn ;
        rdfs:label          "Nettovolumen"@de-DE , "Net Volume"@en , "\\X2\\6B6354734F537A4D\\X0\\"@ja-JP ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ColumnBaseQuantities .

qto:grossSurfaceArea_ColumnBaseQuantities
        a                   rdf:Property , ifcdoc:Q_AREA , spin:MagicProperty ;
        rdfs:comment        "Total area of the column, normally generated as perimeter * length + 2 * cross section area. It is the sum of OuterSurfaceArea + (2 x CrossSectionArea) and shall only be given, if the OuterSurfaceArea and CrossSectionArea cannot be established separately."^^xsd:string ;
        rdfs:domain         ifcowl:IfcColumn ;
        rdfs:label          "\\X2\\8868976297627A4D\\X0\\"@ja-JP , "Gesamtoberfl\\S\\dche"@de-DE , "Gross Surface Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossSurfaceArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ColumnBaseQuantities .

qto:netArea_CoveringBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_AREA ;
        rdfs:comment        "Sum of all net areas  of the covering facing the space. All openings that is included in the covering are subtracted."^^xsd:string ;
        rdfs:domain         ifcowl:IfcCovering ;
        rdfs:label          "Net Area"@en , "Nettofl\\S\\dche"@de-DE , "\\X2\\6B63547397627A4D\\X0\\"@ja-JP ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_CoveringBaseQuantities .

qto:Qto_ChimneyBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of chimneys."^^xsd:string ;
        rdfs:label     "$"@ja-JP , "Chimney Base Quantities"@en , "$"@de-DE ;
        ifcdoc:groups  qto:length_ChimneyBaseQuantities .

qto:Qto_AirTerminalBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of air terminals."^^xsd:string ;
        rdfs:label     "Air Terminal Base Quantities"@en ;
        ifcdoc:groups  qto:totalSurfaceArea_AirTerminalBaseQuantities , qto:perimeter_AirTerminalBaseQuantities , qto:grossWeight_AirTerminalBaseQuantities .

qto:grossWeight_ElectricApplianceBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcElectricAppliance ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ElectricApplianceBaseQuantities .

qto:crossSectionArea_CableSegmentBaseQuantities
        a                   ifcdoc:Q_AREA , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Area of the cross section."^^xsd:string ;
        rdfs:domain         ifcowl:IfcCableSegment ;
        rdfs:label          "Cross Section Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "CrossSectionArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_CableSegmentBaseQuantities .

qto:Qto_VibrationIsolatorBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of vibration isolators."^^xsd:string ;
        rdfs:label     "Vibration Isolator Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_VibrationIsolatorBaseQuantities .

qto:Qto_SlabBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of slabs."^^xsd:string ;
        rdfs:label     "Slab Base Quantities"@en , "$"@ja-JP , "$"@de-DE ;
        ifcdoc:groups  qto:length_SlabBaseQuantities , qto:netVolume_SlabBaseQuantities , qto:netWeight_SlabBaseQuantities , qto:grossWeight_SlabBaseQuantities , qto:grossVolume_SlabBaseQuantities , qto:netArea_SlabBaseQuantities , qto:perimeter_SlabBaseQuantities , qto:depth_SlabBaseQuantities , qto:width_SlabBaseQuantities , qto:grossArea_SlabBaseQuantities .

qto:grossWeight_PipeSegmentBaseQuantities
        a                   ifcdoc:Q_WEIGHT , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Weight of the pipe segment itself, not including contained fluid."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPipeSegment ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PipeSegmentBaseQuantities .

qto:Qto_LaborResourceBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of labour resources."^^xsd:string ;
        rdfs:label     "Labor Resource Base Quantities"@en ;
        ifcdoc:groups  qto:overtimeWork_LaborResourceBaseQuantities , qto:standardWork_LaborResourceBaseQuantities .

qto:netFloorArea_SpaceBaseQuantities
        a                   rdf:Property , ifcdoc:Q_AREA , spin:MagicProperty ;
        rdfs:comment        "Sum of all usable floor areas covered by the space. It excludes the area covered  by elements inside the space (columns, inner walls, built-ins etc.), slab openings, or other protruding elements. Varying heights are not taking into account (i.e. no reduction for areas under a minimum headroom)."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSpace ;
        rdfs:label          "\\X2\\6B6354735E8A97627A4D\\X0\\"@ja-JP , "Bodenfl\\S\\dche Netto"@de-DE , "Net Floor Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetFloorArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SpaceBaseQuantities .

qto:totalSurfaceArea_TankBaseQuantities
        a                   spin:MagicProperty , ifcdoc:Q_AREA , rdf:Property ;
        rdfs:comment        "Total surface area of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcTank ;
        rdfs:label          "Total Surface Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "TotalSurfaceArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_TankBaseQuantities .

qto:Qto_CableCarrierSegmentBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of cable carrier segment."^^xsd:string ;
        rdfs:label     "Cable Carrier Segment Base Quantities"@en ;
        ifcdoc:groups  qto:outerSurfaceArea_CableCarrierSegmentBaseQuantities , qto:crossSectionArea_CableCarrierSegmentBaseQuantities , qto:length_CableCarrierSegmentBaseQuantities , qto:grossWeight_CableCarrierSegmentBaseQuantities .

qto:Qto_AirToAirHeatRecoveryBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all types of air-to-air heat recovery elements."^^xsd:string ;
        rdfs:label     "Air To Air Heat Recovery Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_AirToAirHeatRecoveryBaseQuantities .

qto:grossWeight_SolarDeviceBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcSolarDevice ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_SolarDeviceBaseQuantities .

qto:grossArea_RoofBaseQuantities
        a                   ifcdoc:Q_AREA , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Total gross area of the outer surface of the roof. It is the sum of all roof slab gross areas. Roof openings, like sky windows and other openings and cut-outs are not taken into account."^^xsd:string ;
        rdfs:domain         ifcowl:IfcRoof ;
        rdfs:label          "Bruttofl\\S\\dche"@de-DE , "Gross Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_RoofBaseQuantities .

qto:length_ColumnBaseQuantities
        a                   ifcdoc:Q_LENGTH , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Total length of the column not taking into account any cut-outs or other processing features."^^xsd:string ;
        rdfs:domain         ifcowl:IfcColumn ;
        rdfs:label          "L\\S\\dnge"@de-DE , "Length"@en , "\\X2\\95773055\\X0\\"@ja-JP ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "Length" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:lengthValue_IfcQuantityLength ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ColumnBaseQuantities .

qto:grossWeight_TransformerBaseQuantities
        a                   rdf:Property , spin:MagicProperty , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Weight of the element."^^xsd:string ;
        rdfs:domain         ifcowl:IfcTransformer ;
        rdfs:label          "Gross Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_TransformerBaseQuantities .

qto:netSurfaceArea_ColumnBaseQuantities
        a                   ifcdoc:Q_AREA , spin:MagicProperty , rdf:Property ;
        rdfs:comment        "Net surface area of the column, normally generated as perimeter * length + 2 * cross section area taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcColumn ;
        rdfs:label          "Net Surface Area"@en , "Nettooberfl\\S\\dche"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetSurfaceArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ColumnBaseQuantities .

qto:grossVolume_ColumnBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_VOLUME ;
        rdfs:comment        "Total gross volume of the column, not taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcColumn ;
        rdfs:label          "Gross Volume"@en , "Bruttovolumen"@de-DE , "\\X2\\4F537A4D\\X0\\"@ja-JP ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_ColumnBaseQuantities .

qto:grossArea_CoveringBaseQuantities
        a                   rdf:Property , ifcdoc:Q_AREA , spin:MagicProperty ;
        rdfs:comment        "Sum of all gross areas of the covering facing the space. No opening that is included in the covering is subtracted."^^xsd:string ;
        rdfs:domain         ifcowl:IfcCovering ;
        rdfs:label          "\\X2\\97627A4D\\X0\\"@ja-JP , "Gross Area"@en , "Bruttofl\\S\\dche"@de-DE ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_CoveringBaseQuantities .

qto:grossCrossSectionArea_DuctFittingBaseQuantities
        a                   ifcdoc:Q_AREA , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Area of the cross section at the inlet, including the duct fitting itself and the interior flow space."^^xsd:string ;
        rdfs:domain         ifcowl:IfcDuctFitting ;
        rdfs:label          "Gross Cross Section Area"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossCrossSectionArea" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:areaValue_IfcQuantityArea ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_DuctFittingBaseQuantities .

qto:grossVolume_BeamBaseQuantities
        a                   ifcdoc:Q_VOLUME , rdf:Property , spin:MagicProperty ;
        rdfs:comment        "Total gross volume of the beam, not taking into account possible processing features (cut-outs, etc.) or openings and recesses."^^xsd:string ;
        rdfs:domain         ifcowl:IfcBeam ;
        rdfs:label          "Bruttovolumen"@de-DE , "\\X2\\4F537A4D\\X0\\"@ja-JP , "Gross Volume"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "GrossVolume" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:volumeValue_IfcQuantityVolume ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_BeamBaseQuantities .

qto:netWeight_PipeSegmentBaseQuantities
        a                   spin:MagicProperty , rdf:Property , ifcdoc:Q_WEIGHT ;
        rdfs:comment        "Weight of the pipe segment, including contained fluid as designed."^^xsd:string ;
        rdfs:domain         ifcowl:IfcPipeSegment ;
        rdfs:label          "Net Weight"@en ;
        rdfs:subClassOf     spin:MagicProperties ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "str"^^xsd:string ] ) ;
                              sp:where            ( [ sp:object     [ sp:varName  "p"^^xsd:string ] ;
                                                      sp:predicate  schm:hasQuantity ;
                                                      sp:subject    [ sp:varName  "arg1"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                        sp:predicate  ifcowl:name_IfcPhysicalQuantity ;
                                                        sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                      ] [ sp:object     "NetWeight" ;
                                                          sp:predicate  express:hasString ;
                                                          sp:subject    [ sp:varName  "name"^^xsd:string ]
                                                        ] [ sp:object     [ sp:varName  "val"^^xsd:string ] ;
                                                            sp:predicate  ifcowl:weightValue_IfcQuantityWeight ;
                                                            sp:subject    [ sp:varName  "p"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "str"^^xsd:string ] ;
                                                              sp:predicate  express:hasDouble ;
                                                              sp:subject    [ sp:varName  "val"^^xsd:string ]
                                                            ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        ifcdoc:isGroupedBy  qto:Qto_PipeSegmentBaseQuantities .

qto:Qto_CommunicationsApplianceBaseQuantities
        a              ifcdoc:QuantitySet ;
        rdfs:comment   "Base quantities that are common to the definition of all occurrences of communications appliance."^^xsd:string ;
        rdfs:label     "Communications Appliance Base Quantities"@en ;
        ifcdoc:groups  qto:grossWeight_CommunicationsApplianceBaseQuantities .
